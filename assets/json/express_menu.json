{
  "gettingstarted": {
    "linkPath": "/express/gettingstarted/",
    "title": "環境設定",
    "subTitle": "プロジェクトの作成",
    "iconClass": "fab fa-node-js",
    "headerTitle": "Express入門（環境構築）",
    "headerDescription": "Node.jsのWebアプリケーションフレームワークExpressの環境構築を説明します。express-generatorコマンドを使ってプロジェクトを作成しアプリ起動までを説明します。"
  },
  "editrouting": {
    "linkPath": "/express/editrouting/",
    "title": "ルーティング",
    "subTitle": "ルーティング / ミドルウェアの使用",
    "iconClass": "fas fa-home",
    "headerTitle": "Express入門（ルーティング）",
    "headerDescription": "WebアプリケーションフレームワークExpressでのルーティングの仕方を説明します。簡単なTodoアプリを作りながら説明をしていきます。"
  },
  "mongodb": {
    "linkPath": "/express/mongodb/",
    "title": "MongoDBの利用",
    "subTitle": "MongoDB / MongoDB Node.JS Driver",
    "iconClass": "fas fa-leaf",
    "headerTitle": "Express入門（MongoDBの利用）",
    "headerDescription": "ExpressでMongoDBを使ってTodoアプリを作っていきます。MongoDBはNoSQLデータベースの１つでデータをJSON形式で扱うことができます。またデータベースの操作にはMongoDB Node.js Driverを使っていきます。"
  },
  "mongoose": {
    "linkPath": "/express/mongoose/",
    "title": "Mongooseの利用",
    "subTitle": "MongoDB / Mongoose",
    "iconClass": "fas fa-otter",
    "headerTitle": "Express入門（Mongooseの利用）",
    "headerDescription": "ExpressでMongooseを使ってみます。MongooseはNode.js用のMongoDBライブラリです。MongoDB Node.js Driverと違いモデルを定義することができ、ExpressでMVCモデルを構成することができる１つの方法です。"
  },
  "css_preprocessor": {
    "linkPath": "/express/css_preprocessor/",
    "title": "CSSプリプロセッサの利用",
    "subTitle": "Less / Sass(Scss) / Stylus",
    "iconClass": "fab fa-sass",
    "headerTitle": "ExpressでCSSプリプロセッサを利用する",
    "headerDescription": "ExpressでCSSプリプロセッサ(Less/Sass/Scss/Stylus)の導入してみます。express-generatorのプロジェクト作成時での導入する方法と既に作成されているプロジェクトの途中で組み込む方法を説明します。"
  },
  "pug_reference": {
    "linkPath": "/express/pug_reference/",
    "title": "Pugの書き方まとめ",
    "subTitle": "テンプレートエンジンPug",
    "iconClass": "fas fa-dog",
    "headerTitle": "Pug（HTMLテンプレートエンジン）の書き方まとめ",
    "headerDescription": "HTMLテンプレートエンジンの１つPugの書き方についてまとめました。PugはExpressなどNode.js環境で動かすことができます。記法はRailsでよく使われるHamlによく似ているので、Hamlを使ったことがある人には親しみやすいでしょう。"
  },
  "basic_auth": {
    "linkPath": "/express/basic_auth/",
    "title": "Basic認証",
    "subTitle": "WWW-Authenticate / basic-auth",
    "iconClass": "fas fa-key",
    "headerTitle": "ExpressでBasic認証を実装する",
    "headerDescription": "ExpressでBasic認証機能を実装してみます。Basic認証は認証方式の１つで簡単に導入できるので場面によってはとても有用です。ライブラリを使用しない実装方法とbasic-authというライブラリを使用する方法を説明します。"
  },
  "digest_auth": {
    "linkPath": "/express/digest_auth/",
    "title": "Digest認証",
    "subTitle": "WWW-Authenticate / express-session",
    "iconClass": "fas fa-lock",
    "headerTitle": "ExpressでDigest認証を実装する",
    "headerDescription": "ExpressでDigest認証機能を実装してみます。Basic認証ではセキュリティ面で脆弱性があります。そこで考えられたのがパスワードをハッシュ化(Digest)して通信する認証です。サーバーとクライアントはハッシュ化された値でやり取りされるのでセキュリティがより強固になります。"
  },
  "third_party": {
    "linkPath": "/express/third_party/",
    "title": "Express サードパーティ一覧",
    "subTitle": "body-parser / express-session / ...",
    "iconClass": "fas fa-box-open",
    "headerTitle": "Expressでよく使われるサードパーティ一覧",
    "headerDescription": "よく利用されるExpress ミドルウェア・モジュールの一覧です。"
  },
  "links": {
    "linkPath": "/express/links/",
    "title": "リンク集",
    "subTitle": "Expressの学習参考リンク集",
    "iconClass": "far fa-bookmark",
    "headerTitle": "Expressの学習参考リンク集",
    "headerDescription": ""
  }
}
