(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{246:function(e,t,n){var content=n(252);"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,n(11).default)("40aafe93",content,!0,{sourceMap:!1})},247:function(e,t,n){"use strict";var o={name:"SideMenu",props:["menuSections"],computed:{routePath:function(){return this.$route.path}}},r=n(9),component=Object(r.a)(o,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("aside",{attrs:{id:"sidebar"}},e._l(e.menuSections,function(t){return n("section",{key:t.linkPath},[n("nuxt-link",{class:e.routePath==t.linkPath?"access-now":"",attrs:{to:t.linkPath}},[e._v("\n        "+e._s(t.title)+"\n      ")])],1)}),0)])},[],!1,null,null,null);t.a=component.exports},248:function(e,t,n){var o=n(5),r=n(249)(!1);o(o.S,"Object",{values:function(e){return r(e)}})},249:function(e,t,n){var o=n(21),r=n(22),c=n(33).f;e.exports=function(e){return function(t){for(var n,d=r(t),l=o(d),h=l.length,i=0,m=[];h>i;)c.call(d,n=l[i++])&&m.push(e?[n,d[n]]:d[n]);return m}}},250:function(e,t){e.exports='<section><h1>はじめに / Expressの環境設定</h1>\n<p>ここでは簡易なTODOアプリを作りながらNodeJSのWebアプリケーションフレームワーク <a href="https://expressjs.com/">Express</a> の使い方を学んでいきます。</p>\n<p><strong>環境</strong></p>\n<ul>\n<li>NodeJS v8.15.0</li>\n<li>Express v4.16.0</li>\n</ul>\n<h2 id="setting">環境設定</h2>\n<p>プロジェクト作成から起動するまでの設定手順を説明していきます。</p>\n<h2 id="express-generator">express-generator のインストール</h2>\n<p>下記のコマンドで<code>express-generator</code>をグローバルインストールします。</p>\n<pre><code class="language-sh.prettyprint">$ yarn install express-generator -g\n</code></pre>\n<h2 id="init-project">プロジェクトの作成</h2>\n<p><code>express-generator</code>を使用すると簡単にWebアプリケーションプロジェクトを最小構成で生成できます。任意のフォルダで次のコマンドを実行してください。</p>\n<pre><code class="language-sh.prettyprint">$ express express-todo-tutorial --view=pug --git\n</code></pre>\n<p>実行すると<code>express-todo-tutorial</code>というフォルダが作成されます。このフォルダの中にWebアプリケーションを動かす最低限のファイルが用意されています。<br />\n先程実行した<code>express</code>コマンドでいくつかのオプションを使っているので説明しておきます。また、オプションにはここで使っていないものもあります。<code>express -h</code>を実行するとオプションの一覧が見れるので、興味があるものを使ってみてください。</p>\n<p><strong>--view=pug</strong></p>\n<p>このオプションは使用するテンプレートエンジンを指定します。ここでは <a href="https://pugjs.org/api/getting-started.html">Pug</a>(旧Jade) と呼ばれるテンプレートを指定しています。テンプレートエンジンは他にも色々あるので自分の好みにあったものを指定してください。</p>\n<p><strong>--git</strong></p>\n<p>このオプションをつけると<code>.gitignore</code>を最初に作成してくれます。最低限のGit管理外設定をしてくれるので、Git管理をする場合は指定しましょう。</p>\n<p>作成されたプロジェクトフォルダの初期構成は以下のようになっています。</p>\n<pre><code>.\n├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.pug\n    ├── index.pug\n    └── layout.pug\n</code></pre>\n<p>Webアプリケーションを作成したことがある方は大体の内容はわかるかと思います。初学者の方は作りながら説明していきますので、大まかで良いのでどのファイルがどこにあるかを覚えておけば良いでしょう。</p>\n<h2 id="running">起動確認</h2>\n<p>初期作成されたプロジェクトを起動して動作確認をしておきましょう。下記のコマンドで起動確認できます。プロジェクトフォルダ内に移動した後に<code>yarn install</code>でパッケージを取得しています。最後のコマンドが実際にExpressを起動するコマンドになります。</p>\n<pre><code>$ cd express-todo-tutorial\n$ yarn install\n$ DEBUG=express-todo-tutorial:* yarn start\n</code></pre>\n<p>コマンド実行後にブラウザから<a href="http://localhost:3000">http://localhost:3000</a>にアクセスしてみましょう。以下のように画面が表示されれば起動完了です。<br />\nまた、起動を終了するときは<code>Ctrl+c</code>で終了することができます。</p>\n<img src="images/express/gettingstarted/run-start.png" alt="起動確認" title="起動確認" style="max-height:400px;">\n<p>このままでも開発を進めることはできますが、ファイルを編集する度にサーバー停止・<code>yarn stat</code>実行をするのは手間になるので、<a href="https://github.com/remy/nodemon">nodemon</a> をインストールしておきましょう。<code>nodemon</code>を使うとファイル更新の度に自動でサーバーを再起動してくれます。</p>\n<pre><code>$ yarn add nodemon --dev\n</code></pre>\n<p>また、起動コマンドもスクリプトに定義しておきましょう。<code>package.json</code>に以下のようにスクリプトを追加します。</p>\n<pre><code class="language-json.prettyprint"># package.json\n  ...\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;node ./bin/www&quot;,\n    &quot;devstart&quot;: &quot;nodemon ./bin/www&quot;, # 追加\n    &quot;debugstart&quot;: &quot;DEBUG=express-todo-tutorial:* yarn run devstart&quot; # 追加\n  },\n</code></pre>\n<p>次のコマンドを実行して起動を確認しましょう。</p>\n<pre><code>$ yarn run debugstart\n</code></pre>\n<p><a href="http://localhost:3000">http://localhost:3000</a>で先程と同様に画面が表示されればOKです。<code>views/index.pug</code>を編集して<code>nodemon</code>の挙動を確認してみましょう。</p>\n<pre><code class="language-pug.prettyprint"># views/index.pug\n\nextends layout               \n                             \nblock content                \n  h1= title                  \n  p Welcome to #{title} !!!!!  # !!!!!を追加\n</code></pre>\n<p>サーバーが自動で再起動されて画面が変更されていることが確認できます。</p>\n</section>\n'},251:function(e,t,n){"use strict";var o=n(246);n.n(o).a},252:function(e,t,n){(e.exports=n(10)(!1)).push([e.i,".article-timestamp{margin-top:1.5rem;padding-top:.5rem;border-top:1px solid #aaa;color:#aaa;display:flex;flex-direction:row}.timestamp-container{display:flex;flex-direction:row;justify-content:center;align-items:center;padding-right:1rem}.timestamp-container i{margin-right:.4rem}",""])},253:function(e,t,n){"use strict";var o={name:"ArticleTimestamp",props:["createdAt","updatedAt"]},r=(n(251),n(9)),component=Object(r.a)(o,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"article-timestamp"},[n("div",{staticClass:"timestamp-container"},[n("i",{staticClass:"far fa-clock"}),e._v(" "),n("p",[e._v(e._s(e.createdAt))])]),e._v(" "),n("div",{staticClass:"timestamp-container"},[n("i",{staticClass:"fas fa-clock"}),e._v(" "),n("p",[e._v(e._s(e.updatedAt))])])])},[],!1,null,null,null);t.a=component.exports},254:function(e,t,n){"use strict";n(250);var o={name:"TableContent",props:["articleMd"],computed:{getInternalLinks:function(){if(!this||!this.$props||!this.$props.articleMd)return[];for(var e,t=/<h2 id="(.*)">(.*)<\/h2>/gm,n=[];null!=(e=t.exec(this.$props.articleMd));)e[1]&&e[2]&&n.push({id:e[1],title:e[2]});return n||[]}}},r=n(9),component=Object(r.a)(o,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{attrs:{id:"table-content"}},[n("aside",{attrs:{id:"table-content-list"}},e._l(e.getInternalLinks,function(t){return n("div",{key:t.id,staticClass:"link-container"},[n("nuxt-link",{directives:[{name:"scroll-to",rawName:"v-scroll-to",value:"#"+t.id,expression:"'#' + internalLink.id"}],attrs:{to:""}},[e._v("\n        "+e._s(t.title)+"\n      ")])],1)}),0)])},[],!1,null,null,null);t.a=component.exports},259:function(e,t){e.exports="<section><h1>Expressのルーティングの設定</h1>\n<p>ホーム画面を用意するためにルーティングを設定します。ルーティングとは、アクセスされたURIとそれに対するアプリケーションの挙動(画面の描画やデータの操作など)を決めることです。<br />\nここでは<code>/home/</code>というURIにアクセスした時の挙動を定義していきます。</p>\n<h2 id=\"create-home-router\">homeルートの追加</h2>\n<p>まずは<code>/home</code>のエンドポイント(URI)を開きます。とりあえず<code>/home</code>のアクセス時の挙動は<code>/</code>にアクセスした時の挙動と同じにしておきます。</p>\n<pre><code class=\"language-app.js.prettyprint\">...\napp.use('/', indexRouter);\napp.use('/users', usersRouter);\n// 下記を追加\napp.get('/home', function(req, res, next) {\n  res.render('index', { title: 'Express' });\n});\n...\n</code></pre>\n<p>ファイルを保存したら、<a href=\"http://localhost:3000/home\">http://localhost:3000/home</a>にアクセスしてみましょう。<a href=\"http://localhost:3000\">http://localhost:3000</a>と同じ画面が表示されているはずです。</p>\n<h2 id=\"use-middle-ware\">ミドルウェアの使用</h2>\n<p>Expressのミドルウェアはいくつかの種類のミドルウェアが使用できますが、ここではルーターレベルのミドルウェアを使用します。このミドルウェアを使ってルーティング処理をモジュール化することができます。これによってルーティングを細分化して定義したり処理の共通化を行うことができます。<br />\n今回は、<code>/home</code>および<code>/home</code>以下のURI（例えば<code>/home/help</code>や<code>/home/about</code>）の挙動を定義するモジュールを作成します。<br />\n基本的にルーターのモジュールは<code>routes</code>フォルダ配下に作成していきます。<br />\nまずは下記の内容で<code>routes/home.js</code>を作成してください。</p>\n<pre><code class=\"language-routes/home.js.prettyprint\">var express = require('express');\nvar router = express.Router();\n\nrouter.get('/', function(req, res, next) {\n  res.render('index', { title: 'Express' });\n});\n\nmodule.exports = router;\n</code></pre>\n<p><code>express.Router</code>クラスを使ってルーターレベルのミドルウェアを利用できます。ここでは<code>/home</code>のGETリクエストを定義するため<code>router.get()</code>を使っています。第一引数には<code>/home</code>以下のパス（<code>/home</code>自信を設定するため<code>/</code>）を指定し、また第二引数には<code>views/index.pug</code>を描画する処理を指定しています。<br />\nさて、このモジュールをメインアプリケーションに設定するため<code>app.js</code>を編集します。</p>\n<pre><code class=\"language-app.js.prettyprint\">...\nvar indexRouter = require('./routes/index');\nvar usersRouter = require('./routes/users');\nvar homeRouter = require('./routes/home'); // 追加 home.jsで定義した内容を取り込んでいます\n...\napp.use('/', indexRouter);\napp.use('/users', usersRouter);\n// 先程追加したapp.get('/homw', ...)は削除\napp.use('/home', homeRouter); // 追加 /home以下の処理をhome.jsに担わせています\n...\n</code></pre>\n<p><a href=\"http://localhost:3000/home\">http://localhost:3000/home</a>を確認すると先程と同じ挙動になっていることが確認できます。</p>\n<h2 id=\"redirect\">リダイレクト</h2>\n<p>最後に、<a href=\"http://localhost:3000\">http://localhost:3000</a>にアクセスされた場合はホーム画面<a href=\"http://localhost:3000/home\">http://localhost:3000/home</a>にリダイレクトするようにしましょう。<br />\n<code>routes/index.js</code>を下記のように編集するとリダイレクトするようになります。</p>\n<pre><code class=\"language-routes/index.js.prettyprint\">router.get('/', function(req, res, next) {\n  res.redirect('/home'); // 変更\n});\n</code></pre>\n<h2 id=\"add-controller\">コントローラーの作成</h2>\n<p>ルーティングファイルに処理を書いていっても良いのですが、ルーティングファイルにはアクセスパスの振分だけにしておきたいので、具体的な振る舞いはコントローラーとして分けておきましょう。<br />\n<code>controllers</code>フォルダを、その配下に<code>homeController.js</code>を作成し、ルーティングファイルに書いた内容を<code>homeController.js</code>に移しましょう。</p>\n<pre><code>$ mkdir controllers\n$ touch controllers/homeController.js\n</code></pre>\n<pre><code class=\"language-homeController.js.prettyprint\">// controllers/homeController.js\n\nexports.index = function(req, res) {\n  res.render('home/index');\n};\n\n</code></pre>\n<pre><code class=\"language-home.js.prettyprint\">// routes/home.js\n\nvar express = require('express');\nvar router = express.Router();\n\nvar homeController = require('../controllers/homeController'); // 追加\n\nrouter.get('/', homeController.index); // 変更\n</code></pre>\n</section>\n"},273:function(e,t,n){"use strict";n.r(t);n(20),n(248);var o=n(253),r=n(247),c=n(254),d=n(73),l=n(259),h=n.n(l),m={components:{ArticleTimestamp:o.a,SideMenu:r.a,TableContent:c.a},data:function(){return{menuSections:Object.values(d)}},computed:{EditRoutingMd:function(){return h.a}},head:function(){return{title:d.editrouting.headerTitle,meta:[{hid:"description",name:"description",content:d.editrouting.headerDescription}]}}},x=n(9),component=Object(x.a)(m,function(){var e=this.$createElement,t=this._self._c||e;return t("div",{attrs:{id:"wrapper"}},[t("article",{attrs:{id:"main"}},[t("section",[t("div",{domProps:{innerHTML:this._s(this.EditRoutingMd)}}),this._v(" "),t("article-timestamp",{attrs:{createdAt:"2019/03/09",updatedAt:"2019/03/12"}})],1)]),this._v(" "),t("side-menu",{attrs:{menuSections:this.menuSections}}),this._v(" "),t("table-content",{attrs:{articleMd:this.EditRoutingMd}})],1)},[],!1,null,null,null);t.default=component.exports}}]);