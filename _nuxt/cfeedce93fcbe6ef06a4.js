(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{249:function(e,t,n){var content=n(253);"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,n(11).default)("40aafe93",content,!0,{sourceMap:!1})},250:function(e,t,n){"use strict";var r={name:"SideMenu",props:["menuSections"],computed:{routePath:function(){return this.$route.path}}},o=n(9),component=Object(o.a)(r,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("aside",{attrs:{id:"sidebar"}},e._l(e.menuSections,function(t){return n("section",{key:t.category},[n("div",{staticClass:"menu-overview"},[e._v(e._s(t.category))]),e._v(" "),e._l(t.menus,function(t){return n("div",{key:t.linkPath,staticClass:"menu-item"},[n("nuxt-link",{class:e.routePath==t.linkPath?"access-now":"",attrs:{to:t.linkPath}},[e._v("\n          "+e._s(t.title)+"\n        ")])],1)})],2)}),0)])},[],!1,null,null,null);t.a=component.exports},251:function(e,t){e.exports='<section><h1>Express入門（環境設定）</h1>\n<p>ここでは簡易なTODOアプリを作りながらNodeJSのWebアプリケーションフレームワーク <a href="https://expressjs.com/">Express</a> の使い方を学んでいきます。<br />\n<a href="https://github.com/irisAsh/express-todo-tutorial/tree/master">こちら</a>に完成済みのサンプルを置いておきます。サンプルは後記事の<a href="https://irisash.github.io/express/editrouting/">Expressのルーティングの設定</a>、<a href="https://irisash.github.io/express/mongodb/">ExpressでMongoDBを使う</a>の内容を含んでいます。</p>\n<p><strong>環境</strong></p>\n<ul>\n<li>NodeJS v8.15.0</li>\n<li>Express v4.16.0</li>\n</ul>\n<h2 id="setting">環境設定</h2>\n<p>プロジェクト作成から起動するまでの設定手順を説明していきます。</p>\n<h2 id="express-generator">express-generator のインストール</h2>\n<p>下記のコマンドで<code>express-generator</code>をグローバルインストールします。</p>\n<pre><code class="language-sh.prettyprint">$ yarn install express-generator -g\n</code></pre>\n<h2 id="init-project">プロジェクトの作成</h2>\n<p><code>express-generator</code>を使用すると簡単にWebアプリケーションプロジェクトを最小構成で生成できます。任意のフォルダで次のコマンドを実行してください。</p>\n<pre><code class="language-sh.prettyprint">$ express express-todo-tutorial --view=pug --git\n</code></pre>\n<p>実行すると<code>express-todo-tutorial</code>というフォルダが作成されます。このフォルダの中にWebアプリケーションを動かす最低限のファイルが用意されています。<br />\n先程実行した<code>express</code>コマンドでいくつかのオプションを使っているので説明しておきます。また、オプションにはここで使っていないものもあります。<code>express -h</code>を実行するとオプションの一覧が見れるので、興味があるものを使ってみてください。</p>\n<p><strong>--view=pug</strong></p>\n<p>このオプションは使用するテンプレートエンジンを指定します。ここでは <a href="https://pugjs.org/api/getting-started.html">Pug</a>(旧Jade) と呼ばれるテンプレートを指定しています。テンプレートエンジンは他にも色々あるので自分の好みにあったものを指定してください。</p>\n<p><strong>--git</strong></p>\n<p>このオプションをつけると<code>.gitignore</code>を最初に作成してくれます。最低限のGit管理外設定をしてくれるので、Git管理をする場合は指定しましょう。</p>\n<p>作成されたプロジェクトフォルダの初期構成は以下のようになっています。</p>\n<pre><code>.\n├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.pug\n    ├── index.pug\n    └── layout.pug\n</code></pre>\n<p>Webアプリケーションを作成したことがある方は大体の内容はわかるかと思います。初学者の方は作りながら説明していきますので、大まかで良いのでどのファイルがどこにあるかを覚えておけば良いでしょう。</p>\n<h2 id="running">起動確認</h2>\n<p>初期作成されたプロジェクトを起動して動作確認をしておきましょう。下記のコマンドで起動確認できます。プロジェクトフォルダ内に移動した後に<code>yarn install</code>でパッケージを取得しています。最後のコマンドが実際にExpressを起動するコマンドになります。</p>\n<pre><code>$ cd express-todo-tutorial\n$ yarn install\n$ DEBUG=express-todo-tutorial:* yarn start\n</code></pre>\n<p>コマンド実行後にブラウザから<a href="http://localhost:3000">http://localhost:3000</a>にアクセスしてみましょう。以下のように画面が表示されれば起動完了です。<br />\nまた、起動を終了するときは<code>Ctrl+c</code>で終了することができます。</p>\n<img src="images/express/gettingstarted/run-start.png" alt="起動確認" title="起動確認" style="max-height:400px;">\n<p>このままでも開発を進めることはできますが、ファイルを編集する度にサーバー停止・<code>yarn stat</code>実行をするのは手間になるので、<a href="https://github.com/remy/nodemon">nodemon</a> をインストールしておきましょう。<code>nodemon</code>を使うとファイル更新の度に自動でサーバーを再起動してくれます。</p>\n<pre><code>$ yarn add nodemon --dev\n</code></pre>\n<p>また、起動コマンドもスクリプトに定義しておきましょう。<code>package.json</code>に以下のようにスクリプトを追加します。</p>\n<pre><code class="language-json.prettyprint"># package.json\n  ...\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;node ./bin/www&quot;,\n    &quot;devstart&quot;: &quot;nodemon ./bin/www&quot;, # 追加\n    &quot;debugstart&quot;: &quot;DEBUG=express-todo-tutorial:* yarn run devstart&quot; # 追加\n  },\n</code></pre>\n<p>次のコマンドを実行して起動を確認しましょう。</p>\n<pre><code>$ yarn run debugstart\n</code></pre>\n<p><a href="http://localhost:3000">http://localhost:3000</a>で先程と同様に画面が表示されればOKです。<code>views/index.pug</code>を編集して<code>nodemon</code>の挙動を確認してみましょう。</p>\n<pre><code class="language-pug.prettyprint"># views/index.pug\n\nextends layout               \n                             \nblock content                \n  h1= title                  \n  p Welcome to #{title} !!!!!  # !!!!!を追加\n</code></pre>\n<p>サーバーが自動で再起動されて画面が変更されていることが確認できます。</p>\n</section>\n'},252:function(e,t,n){"use strict";var r=n(249);n.n(r).a},253:function(e,t,n){(e.exports=n(10)(!1)).push([e.i,".article-timestamp{margin-top:1.5rem;padding-top:.5rem;border-top:1px solid #aaa;color:#aaa;display:flex;flex-direction:row}.timestamp-container{display:flex;flex-direction:row;justify-content:center;align-items:center;padding-right:1rem}.timestamp-container i{margin-right:.4rem}",""])},254:function(e,t,n){"use strict";n(251);var r={name:"TableContent",props:["articleMd"],computed:{getInternalLinks:function(){if(!this||!this.$props||!this.$props.articleMd)return[];for(var e,t=/<h2 id="(.*)">(.*)<\/h2>/gm,n=[];null!=(e=t.exec(this.$props.articleMd));)e[1]&&e[2]&&n.push({id:e[1],title:e[2]});return n||[]}}},o=n(9),component=Object(o.a)(r,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{attrs:{id:"table-content"}},[n("aside",{attrs:{id:"table-content-list"}},e._l(e.getInternalLinks,function(t){return n("div",{key:t.id,staticClass:"link-container"},[n("nuxt-link",{directives:[{name:"scroll-to",rawName:"v-scroll-to",value:"#"+t.id,expression:"'#' + internalLink.id"}],attrs:{to:""}},[e._v("\n        "+e._s(t.title)+"\n      ")])],1)}),0)])},[],!1,null,null,null);t.a=component.exports},255:function(e,t,n){"use strict";var r={name:"ArticleTimestamp",props:["createdAt","updatedAt"]},o=(n(252),n(9)),component=Object(o.a)(r,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"article-timestamp"},[n("div",{staticClass:"timestamp-container"},[n("i",{staticClass:"far fa-clock"}),e._v(" "),n("p",[e._v(e._s(e.createdAt))])]),e._v(" "),n("div",{staticClass:"timestamp-container"},[n("i",{staticClass:"fas fa-clock"}),e._v(" "),n("p",[e._v(e._s(e.updatedAt))])])])},[],!1,null,null,null);t.a=component.exports},279:function(e,t){e.exports='<section><h1>Expressルーティング詳細</h1>\n<p><a href="https://irisash.github.io/express/editrouting/">Express入門（ルーティング）</a>ではTODOアプリを作成して、Expressでの簡単なルーティング設定方法を学びました。<br />\nここでは様々なケースのルーティング設定方法を学びます。学習する手法は下記になります。</p>\n<ul>\n<li>文字列パターンや正規表現で一致するURLをエンドポイントにする方法</li>\n<li>URL構造から特定のパラメータ値を取得する方法</li>\n<li>レスポンスを段階的に処理する方法</li>\n</ul>\n<p>また、サンプル集は<a href="https://github.com/irisAsh/express-routing-tutorial">こちら</a>においていますのでご参考ください。</p>\n<h2 id="route-path">マッチングURL</h2>\n<p>文字列パターンと正規表現でマッチするURLに対してレスポンス処理を指定できます。</p>\n<h3>特定の文字と一致または文字無</h3>\n<p><code>?</code>は直前の１文字と一致するまたは文字がない場合と一致するパターンを作成します。<br />\n次のルーティングは<code>/rootone</code>または<code>/root_one</code>のエンドポイントのレスポンスを処理します。</p>\n<pre><code class="language-js.prettyprint">router.get(\'/root_?one\', function(req, res, next) {\n  res.send(\'root one\');\n});\n</code></pre>\n<h3>特定の文字が１個以上で一致</h3>\n<p><code>+</code>は直前の１文字が１個以上の場合と一致するパターンを作成します。<br />\n次のルーティングは<code>/root_two</code>, <code>/root__two</code>, <code>/root___two</code>, ..., のエンドポイントのレスポンスを処理します。</p>\n<pre><code class="language-js.prettyprint">router.get(\'/root_+two\', function(req, res, next) {\n  res.send(\'root two\');\n});\n</code></pre>\n<h3>任意の文字と一致</h3>\n<p><code>*</code>は任意の１文字と一致するパターンを作成します。<br />\n次のルーティングは<code>/root_three</code>, <code>/root_twenty_three</code>, <code>/root_thirty_three</code> などのエンドポイントのレスポンスを処理します。</p>\n<pre><code class="language-js.prettyprint">router.get(\'/root_*three\', function(req, res, next) {\n  res.send(\'root three\');\n});\n</code></pre>\n<h3>特定のワードと一致</h3>\n<p><code>()</code>はカッコで囲まれたワードと一致するパターンを作成します。<code>()</code>の後には<code>?</code>や<code>+</code>を指定して繰り返すワードの数を指定することができます。<br />\n次のルーティングは<code>/root_four</code>, <code>/root_twenty_four</code>のエンドポイントのレスポンスを処理します。</p>\n<pre><code class="language-js.prettyprint">router.get(\'/root_(twenty_)?four\', function(req, res, next) {\n  res.send(\'root four\');\n});\n</code></pre>\n<h3>正規表現</h3>\n<p><code>/</code>で正規表現を指定してパターンを作成します。<br />\n次のルーティングは<code>/root__five</code>, <code>root_a_five</code>, <code>/root_twenty_five</code>などのエンドポイントのレスポンスを処理します。</p>\n<pre><code class="language-js.prettyprint">router.get(/root_.*_five/, function(req, res, next) {\n  res.send(\'root five\');\n});\n</code></pre>\n<h2 id="route-params">URL内のパラメータを取得する</h2>\n<p>Webアプリケーションでは<code>/users/12/adress</code>, <code>/authors/33/books/2</code>のようにIDの値などをURLに含めてルーティングを構成することがよくあります。ExpressでもそのようなURLを扱うことができます。</p>\n<h3>URLに含まれるパラメータ値を取得する</h3>\n<p><code>/:パラメータ名</code>と指定することで、URLに該当する値を<code>req.params.パラメータ名</code>の形式で参照することができるようになります。</p>\n<p>次のルーティングでは、<code>/artists/1/musics</code>, <code>/artists/23/musics</code>のようなエンドポイントを処理し、<code>req.params.artistId</code>でパラメータの値を参照することができます。</p>\n<pre><code class="language-js.prettyprint">router.get(\'/artists/:artistId/musics\', function(req, res, next) {\n  res.send(req.params);\n});\n</code></pre>\n<img src="images/express/routing_detail/root_parameter.png" alt="ルートパラメータ" title="ルートパラメータ" style="max-height:400px;">\n<h3>パラメータ値を意味のある構成にする</h3>\n<p><code>-</code>, <code>.</code>は通常の文字として扱われるので、アプリケーションの仕様に意味付けられたURLを設定することができます。</p>\n<p>次のルーティングでは、<code>/artists/1/musics/2016-2019</code>のようなエンドポイントを処理し、<code>req.params.form</code>, <code>req.params.to</code>でパラメータの値を参照することができます。この例では2016年から2019年の曲を検索するようなURLとして構成することができます。</p>\n<pre><code class="language-js.prettyprint">router.get(\'/artists/:artistId/musics/:from-:to\', function(req, res, next) {\n  res.send(req.params);\n});\n</code></pre>\n<img src="images/express/routing_detail/root_parameter_from_to.png" alt="ルートパラメータFromTo" title="ルートパラメータFromTo" style="max-height:400px;">\n<p><code>.</code>を使った例も同様です。次のルーティングでは、<code>/artists/1/musics/album.rock</code>のようなエンドポイントを処理し、<code>req.params.unit</code>, <code>req.params.genru</code>でパラメータの値を参照することができます。例は曲をアルバムでロックのジャンルを検索するようなURLの例です。</p>\n<pre><code class="language-js.prettyprint">router.get(\'/artists/:artistId/musics/:unit.:genru\', function(req, res, next) {\n  res.send(req.params);\n});\n</code></pre>\n<img src="images/express/routing_detail/root_parameter_unit_genru.png" alt="ルートパラメータUnitGenru" title="ルートパラメータUnitGenru" style="max-height:400px;">\n<h3>パラメータ値を制限する</h3>\n<p>パラメータの値は正規表現を使って値を制限することができます。<code>()</code>の括弧内で正規表現を設定することで指定できます。<br />\n次のルーティングでは、<code>/artists/22/musics/4</code>のようなエンドポイントを処理することができ、<code>/artists/22/musics/abc</code>のようなエンドポイントを拾うことはありません。</p>\n<pre><code class="language-js.prettyprint">router.get(\'/artists/:artistId/musics/:musicId(\\\\d+)\', function(req, res, next) {\n  res.send(req.params);\n});\n</code></pre>\n<img src="images/express/routing_detail/root_parameter_reg.png" alt="ルートパラメータ正規表現" title="ルートパラメータ正規表現" style="max-height:400px;">\n<h2 id="route-handler">ルートハンドラー</h2>\n<p>クライアントからのリクエストに対して、複数のコールバックを用意して処理させることができます。用途としては、本処理の前にログイン状態をチェックするなどの処理を組み込む際に利用できるでしょう。</p>\n<p>複数のコールバックの実装は、METHOD関数の第２引数以降に可変的に渡すか、あるいは第２引数にコールバックの配列を渡すことで実現できます。また、途中のコールバックは<code>next()</code>を記述して次のコールバックの処理へ移るよう明示する必要があります。</p>\n<h3>可変長変数で渡す</h3>\n<pre><code class="language-js.prettyprint">router.get(\'/handlers/three_callback\',\n  function(req, res, next) {\n    console.log(\'callback 1\');\n    next();\n  },\n  function(req, res, next) {\n    console.log(\'callback 2\');\n    next();\n  },\n  function(req, res, next) {\n    console.log(\'callback 3\');\n    res.send(\'Three Callback\');\n  }\n);\n</code></pre>\n<pre><code class="language-shell.prettyprint"># 出力\n\ncallback 1\ncallback 2\ncallback 3\n</code></pre>\n<h3>配列で渡す</h3>\n<pre><code class="language-js.prettyprint">var callbackOne = function(req, res, next) {\n  console.log(\'array 1\');\n  next();\n};\n\nvar callbackTwo = function(req, res, next) {\n  console.log(\'array 2\');\n  next();\n};\n\nvar callbackThree = function(req, res, next) {\n  console.log(\'array 3\');\n  res.send(\'Array\');\n};\n\nrouter.get(\'/handlers/array\', [callbackOne, callbackTwo, callbackThree]);\n</code></pre>\n<pre><code class="language-shell.prettyprint"># 出力\n\narray 1\narray 2\narray 3\n</code></pre>\n<h3>途中でリダイレクトする</h3>\n<p>ログイン状態をチェックし、ログイン状態でなかったらログイン画面に飛ばすような処理の場合は、途中のコールバックから次のコールバックに渡さないようにしなければいけません。</p>\n<p>次のコードは途中でリダイレクトするような例です。</p>\n<pre><code class="language-js.prettyprint">router.get(\'/handlers/login_check\',\n  function(req, res, next) {\n    console.log(\'check\');\n    var loggedIn = false;\n    if (loggedIn) {\n      next();\n    } else {\n      res.redirect(\'/\');\n    }\n  },\n  function(req, res, next) {\n    console.log(\'passed\');\n    res.send(\'Login check\');\n  }\n);\n</code></pre>\n<h2 id="reference">参考サイト</h2>\n<ul>\n<li><a href="https://expressjs.com/ja/guide/routing.html">Express でのルーティング</a></li>\n</ul>\n</section>\n'},312:function(e,t,n){"use strict";n.r(t);var r=n(255),o=n(250),c=n(254),d=n(75),l=n(279),h=n.n(l),m={components:{ArticleTimestamp:r.a,SideMenu:o.a,TableContent:c.a},data:function(){return{menuSections:d}},computed:{RoutingDetailMd:function(){return h.a}},head:function(){var e=d.routing_view.menus;return{title:e.routing_detail.headerTitle,meta:[{hid:"description",name:"description",content:e.routing_detail.headerDescription}]}}},x=n(9),component=Object(x.a)(m,function(){var e=this.$createElement,t=this._self._c||e;return t("div",{attrs:{id:"wrapper"}},[t("article",{attrs:{id:"main"}},[t("section",[t("div",{domProps:{innerHTML:this._s(this.RoutingDetailMd)}}),this._v(" "),t("article-timestamp",{attrs:{createdAt:"2019/05/12",updatedAt:"2019/05/12"}})],1)]),this._v(" "),t("side-menu",{attrs:{menuSections:this.menuSections}}),this._v(" "),t("table-content",{attrs:{articleMd:this.RoutingDetailMd}})],1)},[],!1,null,null,null);t.default=component.exports}}]);