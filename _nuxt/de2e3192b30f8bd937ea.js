(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{239:function(e){e.exports=JSON.parse('{"tutorial":{"category":"入門","categoryLabel":"Rails","categoryPath":"/rails/","iconClass":"fas fa-home","menus":{"setup":{"linkPath":"/rails/setup/","ogpImage":"/images/rails/setup/ogp.png","title":"環境設定","subTitle":"Gem / Bundle","menuIcon":"fas fa-home","headerTitle":"Ruby on Rails 5 の環境設定","headerDescription":"Ruby on Rails 5 の環境設定について説明します。ここでは、Rails new は使わずプロジェクト内でGemを管理してプロジェクトを作成します。また今後の記事では入門としてToDoアプリを作成しながら解説を進めていきます。"},"use_mariadb":{"linkPath":"/rails/use_mariadb/","ogpImage":"/images/rails/use_mariadb/ogp.png","title":"MariaDBを利用する","subTitle":"MariaDB","menuIcon":"fas fa-coins","headerTitle":"Ruby on RailsでMariaDBを利用する","headerDescription":"Railsプロジェクト作成直後にMariaDBを導入する手順を説明します。Rails初期設定ではSQLite3を利用するようになっていますが、プロジェクト規模が多くなる場合は関係性のあるデータベースを利用する方が良いです。"},"scaffold":{"linkPath":"/rails/scaffold/","ogpImage":"/images/rails/scaffold/ogp.png","title":"scaffoldを使う","subTitle":"rails generate scaffold","menuIcon":"fas fa-folder","headerTitle":"rails generate scaffoldを使ってページを追加する","headerDescription":"rails generate scaffoldを使って新規ページを追加してみます。scaffoldを使用するとコントローラー、ビュー、モデル等の必要とするファイルが全て自動生成されます。config/application.rbを編集して任意の単位で自動生成の拒否設定をすることもできます。"},"use_hamlit":{"linkPath":"/rails/use_hamlit/","ogpImage":"/images/rails/use_hamlit/ogp.png","title":"Hamlitを使う","subTitle":"hamlit-rails","menuIcon":"fas fa-crown","headerTitle":"HTMLテンプレートHamlitを使う","headerDescription":"Rails標準のHTMLテンプレートはERBが使われています。他にもHamlやSlimといったものがありますが、今回はHamlitというHTMLテンプレートを使う方法を説明します。HamlitはHamlの拡張でHamlをより高速にしたものです。記法はHamlと同様なのでHamlユーザーも利用しやすいでしょう。"},"add_page":{"linkPath":"/rails/add_page/","ogpImage":"/images/rails/add_page/ogp.png","title":"画面作成の基本","subTitle":"rails generate controller","menuIcon":"far fa-newspaper","headerTitle":"Railsで新規画面を作成する基本な流れ","headerDescription":"Railsで新規画面を作成する基本的な流れを説明します。今回は自動生成を使います。rails generate controllerでビューとコントローラーの自動生成をし、適宜画面を編集し画面を作成していきます。"},"use_devise":{"linkPath":"/rails/use_devise/","ogpImage":"/images/rails/use_devise/ogp.png","title":"Deviseで認証を追加する","subTitle":"Devise","menuIcon":"fas fa-passport","headerTitle":"Deviseを利用して認証を追加する","headerDescription":"Deviseを使ってユーザー認証処理を追加して見ます。Deviseはサインアップやログインなど認証の処理を提供してくれる便利なGemです。Deviseは複雑で柔軟性はないですが多機能を提供しているので独自のカスタマイズがなければとても有効です。"}}},"support_tool":{"category":"開発支援ツール","categoryLabel":"Rails","categoryPath":"/rails/","iconClass":"fas fa-hands-helping","menus":{"use_rubocop":{"linkPath":"/rails/use_rubocop/","ogpImage":"/images/rails/use_rubocop/ogp.png","title":"RuboCopを使う","subTitle":"RuboCop","menuIcon":"fas fa-robot","headerTitle":"RuboCopを導入してコードを整理する","headerDescription":"RubocopはRubyコードのスタイルガイドに沿ってコード解析をしてくれるツールです。プロジェクトの開発で実装する人数が増えればソースコードの記述が統一されなくなっていきます。コード解析ツールを使えばスタイルガイドに順守していない場合に警告を表示して知らせてくれます。"}}}}')},308:function(e,n,t){"use strict";t.r(n);var r=t(234),o=t(235),l=t(239),_={components:{ArticlePage:r.a,CodeBox:o.a},data:function(){return{menuSections:l,categoryName:"tutorial",articleName:"use_devise",datePublished:new Date("2019/06/02 22:00:00 +0900"),dateModified:new Date("2020/01/03 01:00:00 +0900"),contents:[{id:"in-link-setup-devise",title:"Deviseの初期設定"},{id:"in-link-create-user",title:"Userの作成"},{id:"in-link-sign-up",title:"サインアップ処理の実装"},{id:"in-link-logout",title:"ログイン/ログアウト処理"},{id:"in-link-reference-links",title:"参考サイト"}]}}},d=t(12),component=Object(d.a)(_,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("article-page",{attrs:{menuSections:e.menuSections,contents:e.contents,categoryName:e.categoryName,articleName:e.articleName,datePublished:e.datePublished,dateModified:e.dateModified}},[t("h1",[e._v("Deviseを利用して認証を追加する")]),e._v(" "),t("div",{staticClass:"abstract"},[t("p",[e._v("\n        これまで作ってきたTodoアプリにユーザー認証を入れてみます。\n        Railsで認証を提供するGemではDeviseというGemが有名です。\n        Deviseを採用することには色々と議論がありますが、\n        セキュリティ面やそのコストを考えると基本的にはDeviseを利用するのが良いかと思います。\n      ")]),e._v(" "),t("p",[e._v("\n        今回のサンプルは\n        "),t("a",{attrs:{href:"https://github.com/irisAsh/rails-todo-tutorial/tree/ver-use-devise",target:"_blank"}},[e._v("こちら")]),e._v("\n        にあります。\n      ")])]),e._v(" "),t("h2",{attrs:{id:"in-link-setup-devise"}},[e._v("Deviseの初期設定")]),e._v(" "),t("p",[e._v("下記のようにGemfileに追記してBundlerでインストールしてください。")]),e._v(" "),t("code-box",{attrs:{fileName:"Gemfile"}},[e._v("\ngem 'devise' # 追加\n    ")]),e._v(" "),t("p",[t("code",[e._v("bundle install")]),e._v("でGemを追加したら、\n      "),t("code",[e._v("bin/rails generate devise:install")]),e._v("を実行してDeviseの初期ファイルを生成してください。\n    ")]),e._v(" "),t("code-box",[e._v('\n$ bin/rails generate devise:install\n      create  config/initializers/devise.rb\n      create  config/locales/devise.en.yml\n===============================================================================\n\nSome setup you must do manually if you haven\'t yet:\n\n  1. Ensure you have defined default url options in your environments files. Here\n     is an example of default_url_options appropriate for a development environment\n     in config/environments/development.rb:\n\n       config.action_mailer.default_url_options = { host: \'localhost\', port: 3000 }\n\n     In production, :host should be set to the actual host of your application.\n\n  2. Ensure you have defined root_url to *something* in your config/routes.rb.\n     For example:\n\n       root to: "home#index"\n\n  3. Ensure you have flash messages in app/views/layouts/application.html.erb.\n     For example:\n\n       <p class="notice"><%= notice %></p>\n       <p class="alert"><%= alert %></p>\n\n  4. You can copy Devise views (for customization) to your app by running:\n\n       rails g devise:views\n\n===============================================================================\n    ')]),e._v(" "),t("p",[e._v("実行結果に出力されているようにいくつか設定をする必要があります。")]),e._v(" "),t("h3",[e._v("1.config/environments/development.rb の編集")]),e._v(" "),t("p",[e._v("\n      下記のように"),t("code",[e._v("config/environments/development.rb")]),e._v("に設定を追加してください。\n    ")]),e._v(" "),t("code-box",[e._v("\n# config/environments/development.rb\n\n...\n\nconfig.action_mailer.perform_caching = false\n\n# 追加\nconfig.action_mailer.default_url_options = { host: 'localhost', port: 3000 }\n\n...\n    ")]),e._v(" "),t("h3",[e._v("2.ルートパスの追加")]),e._v(" "),t("p",[t("nuxt-link",{attrs:{to:"/rails/add_page/"}},[e._v("Railsで新規画面を作成する基本な流れ")]),e._v("\n      で`welcome#index`を追加したのでこの場合は不要です。\n    ")],1),e._v(" "),t("h3",[e._v("3.フラッシュメッセージの追加")]),e._v(" "),t("p",[t("code",[e._v("app/views/layouts/application.html.haml")]),e._v("にフラッシュメッセージを使いします。\n      バリデーションエラーがあった時にメッセージが表示されるようになります。\n    ")]),e._v(" "),t("code-box",{attrs:{fileName:"app/views/layouts/application.html.haml"}},[e._v("\n  %body\n    # 追加\n    .notice= notice\n    .alert= alert\n    = yield\n    ")]),e._v(" "),t("h3",[e._v("4.Deviseのフォームをカスタマイズする")]),e._v(" "),t("p",[e._v("\n      Deviseの標準フォームを自分好みにカスタマイズしたい場合の設定です。\n      普通はカタマイズすると思うので実行して良いでしょう。\n    ")]),e._v(" "),t("code-box",[e._v("\n$ bin/rails g devise:views\n      invoke  Devise::Generators::SharedViewsGenerator\n      create    app/views/devise/shared\n      create    app/views/devise/shared/_error_messages.html.erb\n      create    app/views/devise/shared/_links.html.erb\n      invoke  form_for\n      create    app/views/devise/confirmations\n      create    app/views/devise/confirmations/new.html.erb\n      create    app/views/devise/passwords\n      create    app/views/devise/passwords/edit.html.erb\n      create    app/views/devise/passwords/new.html.erb\n      create    app/views/devise/registrations\n      create    app/views/devise/registrations/edit.html.erb\n      create    app/views/devise/registrations/new.html.erb\n      create    app/views/devise/sessions\n      create    app/views/devise/sessions/new.html.erb\n      create    app/views/devise/unlocks\n      create    app/views/devise/unlocks/new.html.erb\n      invoke  erb\n      create    app/views/devise/mailer\n      create    app/views/devise/mailer/confirmation_instructions.html.erb\n      create    app/views/devise/mailer/email_changed.html.erb\n      create    app/views/devise/mailer/password_change.html.erb\n      create    app/views/devise/mailer/reset_password_instructions.html.erb\n      create    app/views/devise/mailer/unlock_instructions.html.erb\n    ")]),e._v(" "),t("p",[e._v("\n      ビューファイルがたくさんできますが使用する時に見るのでここでは置いておきましょう。\n      また自動生成されるビューはERBのテンプレートなるので、Haml(Hamlit)を利用する場合は、\n      "),t("nuxt-link",{attrs:{to:"/rails/use_hamlit/"}},[e._v("HTMLテンプレートHamlitを使う")]),e._v("\n      の変換処理をしてください。\n    ")],1),e._v(" "),t("h2",{attrs:{id:"in-link-create-user"}},[e._v("Userの作成")]),e._v(" "),t("p",[e._v("ユーザーのモデルとコントローラーを用意する必要があります。")]),e._v(" "),t("h3",[e._v("モデルの追加")]),e._v(" "),t("p",[t("nuxt-link",{attrs:{to:"/rails/scaffold/"}},[e._v("rails generate scaffoldを使ってページを追加する")]),e._v("\n      であったようにモデル追加にはマイグレーションファイルが必要となります。\n      ですが、Deviseには認証にいつようなカラムを持ったUserモデルを作成するコマンドが用意されていますので、\n      それを使ってマイグレーションを用意しましょう。\n    ")],1),e._v(" "),t("code-box",[e._v("\n$ bin/rails g devise User\n      invoke  active_record\n      create    db/migrate/20190526135251_devise_create_users.rb\n      create    app/models/user.rb\n      insert    app/models/user.rb\n       route  devise_for :users\n    ")]),e._v(" "),t("p",[t("code",[e._v("bin/rails g devise User")]),e._v("を実行するとマイグレーションファイルとUserモデルのファイルが生成されます。\n      "),t("code",[e._v("app/models/user.rb")]),e._v("にはDeviseの利用機能を設定するコードが記載されています。\n      "),t("code",[e._v("devise :database_authenticatable, ...")]),e._v("がその箇所です。\n      またコメントになっている"),t("code",[e._v(":confirmable, ...")]),e._v("も利用できる機能です。\n    ")]),e._v(" "),t("p",[e._v("\n      後で機能追加できますので、ここでは初期状態で設定されている機能のみ利用します。\n    ")]),e._v(" "),t("code-box",{attrs:{fileName:"app/models/user.rb"}},[e._v("\nclass User < ApplicationRecord\n  # Include default devise modules. Others available are:\n  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable\n  devise :database_authenticatable, :registerable,\n         :recoverable, :rememberable, :validatable\nend\n    ")]),e._v(" "),t("p",[e._v("\n      マイグレーションファイルは利用機能に対して必要なカラムが生成されるようになっています。\n      使用しない機能に対して必要なカラムはコメントアウトされています。\n    ")]),e._v(" "),t("code-box",{attrs:{fileName:"db/migrate/20190527152733_devise_create_users.rb"}},[e._v('\n# frozen_string_literal: true\n\nclass DeviseCreateUsers < ActiveRecord::Migration[5.2]\n  def change\n    create_table :users do |t|\n      ## Database authenticatable\n      t.string :email,              null: false, default: ""\n      t.string :encrypted_password, null: false, default: ""\n\n      ## Recoverable\n      t.string   :reset_password_token\n      t.datetime :reset_password_sent_at\n\n      ## Rememberable\n      t.datetime :remember_created_at\n\n      ## Trackable\n      # t.integer  :sign_in_count, default: 0, null: false\n      # t.datetime :current_sign_in_at\n      # t.datetime :last_sign_in_at\n      # t.string   :current_sign_in_ip\n      # t.string   :last_sign_in_ip\n\n      ## Confirmable\n      # t.string   :confirmation_token\n      # t.datetime :confirmed_at\n      # t.datetime :confirmation_sent_at\n      # t.string   :unconfirmed_email # Only if using reconfirmable\n\n      ## Lockable\n      # t.integer  :failed_attempts, default: 0, null: false # Only if lock strategy is :failed_attempts\n      # t.string   :unlock_token # Only if unlock strategy is :email or :both\n      # t.datetime :locked_at\n\n\n      t.timestamps null: false\n    end\n\n    add_index :users, :email,                unique: true\n    add_index :users, :reset_password_token, unique: true\n    # add_index :users, :confirmation_token,   unique: true\n    # add_index :users, :unlock_token,         unique: true\n  end\nend\n    ')]),e._v(" "),t("p",[e._v("また、同時にルーティングも追加されています。")]),e._v(" "),t("code-box",[e._v('\nRails.application.routes.draw do\n  devise_for :users # 追加されている\n  root "welcome#index"\n    ')]),e._v(" "),t("p",[e._v("\n      定義されているエンドポイントを確認してみるとDevise標準のものがいくつか追加されているのがわかります。\n    ")]),e._v(" "),t("code-box",[e._v("\n$ bin/rails routes\n                   Prefix Verb   URI Pattern                    Controller#Action\n         new_user_session GET    /users/sign_in(.:format)       devise/sessions#new\n             user_session POST   /users/sign_in(.:format)       devise/sessions#create\n     destroy_user_session DELETE /users/sign_out(.:format)      devise/sessions#destroy\n        new_user_password GET    /users/password/new(.:format)  devise/passwords#new\n       edit_user_password GET    /users/password/edit(.:format) devise/passwords#edit\n            user_password PATCH  /users/password(.:format)      devise/passwords#update\n                          PUT    /users/password(.:format)      devise/passwords#update\n                          POST   /users/password(.:format)      devise/passwords#create\n cancel_user_registration GET    /users/cancel(.:format)        devise/registrations#cancel\n    new_user_registration GET    /users/sign_up(.:format)       devise/registrations#new\n   edit_user_registration GET    /users/edit(.:format)          devise/registrations#edit\n        user_registration PATCH  /users(.:format)               devise/registrations#update\n                          PUT    /users(.:format)               devise/registrations#update\n                          DELETE /users(.:format)               devise/registrations#destroy\n                          POST   /users(.:format)               devise/registrations#create\n    ")]),e._v(" "),t("p",[e._v("\n      それぞれのルーティングも使用する時に見てみましょう。\n      とりあえずマイグレーションを実行します。\n    ")]),e._v(" "),t("code-box",[e._v("\n$ bin/rails db:migrate\n    ")]),e._v(" "),t("p"),e._v(" "),t("code-box",{attrs:{fileName:"db/scheme.rb"}},[e._v('\n  # 追加される\n  create_table "users", options: "ENGINE=InnoDB DEFAULT CHARSET=utf8", force: :cascade do |t|\n    t.string "email", default: "", null: false\n    t.string "encrypted_password", default: "", null: false\n    t.string "reset_password_token"\n    t.datetime "reset_password_sent_at"\n    t.datetime "remember_created_at"\n    t.datetime "created_at", null: false\n    t.datetime "updated_at", null: false\n    t.index ["email"], name: "index_users_on_email", unique: true\n    t.index ["reset_password_token"], name: "index_users_on_reset_password_token", unique: true\n  end\n    ')]),e._v(" "),t("h3",[e._v("コントローラーの追加")]),e._v(" "),t("p",[e._v("\n      コントローラーも基本的にカスタマイズするので追加しましょう。\n      Devise用にコントローラーを追加するコマンドもあります。\n    ")]),e._v(" "),t("code-box",[e._v("\n$ bin/rails g devise:controllers users\n      create  app/controllers/users/confirmations_controller.rb\n      create  app/controllers/users/passwords_controller.rb\n      create  app/controllers/users/registrations_controller.rb\n      create  app/controllers/users/sessions_controller.rb\n      create  app/controllers/users/unlocks_controller.rb\n      create  app/controllers/users/omniauth_callbacks_controller.rb\n===============================================================================\n\nSome setup you must do manually if you haven't yet:\n\n  Ensure you have overridden routes for generated controllers in your routes.rb.\n  For example:\n\n    Rails.application.routes.draw do\n      devise_for :users, controllers: {\n        sessions: 'users/sessions'\n      }\n    end\n\n===============================================================================\n    ")]),e._v(" "),t("p",[e._v("\n      ルーティングに対して作成したコントローラーが呼ばれるように設定する必要があると出力結果にありますが、\n      実際に編集を加えていく段階で設定しましょう。\n    ")]),e._v(" "),t("h2",{attrs:{id:"in-link-sign-up"}},[e._v("サインアップ処理の実装")]),e._v(" "),t("p",[e._v("\n      Todo画面に認証チェックを入れて見ましょう。\n      ログインしていない状態の場合はTodo画面を表示できましようにします。\n    ")]),e._v(" "),t("p",[e._v("\n      Deviseで認証チェックするには"),t("code",[e._v("authenticate_user!")]),e._v("を使います。\n      Todoのコントローラー処理が走る前にこれを呼び出してチェックしておくと、\n      ログインしていない場合にサインイン画面へリダイレクトしてくれます。\n    ")]),e._v(" "),t("code-box",{attrs:{fileName:"app/controllers/todos_controller.rb"}},[e._v("\nclass TodosController < ApplicationController\n  before_action :set_todo, only: [:show, :edit, :update, :destroy]\n  before_action :authenticate_user! # 追加\n\n  ...\n    ")]),e._v(" "),t("amp-img",{attrs:{src:"/images/rails/use_devise/default-devise-sign-in.png",alt:"Devise初期サインイン画面",title:"Devise初期サインイン画面",width:"640",height:"509",layout:"responsive"}}),e._v(" "),t("p",[e._v("\n        サインインの画面も直す必要がありますが、\n        ユーザー作成する必要があるのでまずはサインアップ画面を作成します。\n      ")]),e._v(" "),t("p",[e._v("\n        ここでは"),t("code",[e._v("/users/sign_up")]),e._v("にアクセスすると、\n        Devise標準のアクション"),t("code",[e._v("devise/sessions#new")]),e._v("が呼ばれるようになっていますが、\n        先程カスタマイズ用に追加したコントローラーが呼ばれるように修正しましょう。\n      ")]),e._v(" "),t("code-box",{attrs:{fileName:"config/routes.rb"}},[e._v("\nRails.application.routes.draw do\n  # 編集\n  devise_for :users, controllers: {\n    registrations: 'users/registrations'\n  }\n  ...\n    ")]),e._v(" "),t("p",[e._v("すると、"),t("code",[e._v("/users/sign_up")]),e._v("アクセス時に呼ばれるコントローラーが変わります。")]),e._v(" "),t("code-box",[e._v("\n$ bin/rails routes\n                   Prefix Verb   URI Pattern                    Controller#Action\n         new_user_session GET    /users/sign_in(.:format)       devise/sessions#new\n             user_session POST   /users/sign_in(.:format)       devise/sessions#create\n     destroy_user_session DELETE /users/sign_out(.:format)      devise/sessions#destroy\n        new_user_password GET    /users/password/new(.:format)  devise/passwords#new\n       edit_user_password GET    /users/password/edit(.:format) devise/passwords#edit\n            user_password PATCH  /users/password(.:format)      devise/passwords#update\n                          PUT    /users/password(.:format)      devise/passwords#update\n                          POST   /users/password(.:format)      devise/passwords#create\n cancel_user_registration GET    /users/cancel(.:format)        users/registrations#cancel\n    new_user_registration GET    /users/sign_up(.:format)       users/registrations#new\n   edit_user_registration GET    /users/edit(.:format)          users/registrations#edit\n        user_registration PATCH  /users(.:format)               users/registrations#update\n                          PUT    /users(.:format)               users/registrations#update\n                          DELETE /users(.:format)               users/registrations#destroy\n                          POST   /users(.:format)               users/registrations#create\n    ")]),e._v(" "),t("p",[e._v("\n      最後にサインインした後の遷移先を指定しましょう。\n    ")]),e._v(" "),t("p",[t("code",[e._v("app/controllers/users/registrations_controller.rb")]),e._v("\n      にある"),t("code",[e._v("protected")]),e._v("と"),t("code",[e._v("after_sign_up_path_for")]),e._v("のコメントアウトを外して\n      "),t("code",[e._v("after_sign_up_path_for")]),e._v("に遷移先のパスを追加します。\n    ")]),e._v(" "),t("p",[e._v("\n      ここではTodo一覧画面へ飛ばすようにしています。\n    ")]),e._v(" "),t("code-box",{attrs:{fileName:"app/controllers/users/registrations_controller.rb"}},[e._v("\n  ...\n\n  # コメントアウトを消す\n  protected\n\n    ...\n\n    # The path used after sign up.\n    # コメントアウトを消す\n    def after_sign_up_path_for(resource)\n      todos_path\n    end\n\n    ...\n    ")]),e._v(" "),t("p",[t("code",[e._v("/user/sign_up")]),e._v("にアクセスし\n      実際にメールアドレスとパスワードを入れてサインアップして見ましょう。\n      認証が進んでTodo一覧画面が表示できれば成功です。\n    ")]),e._v(" "),t("amp-img",{attrs:{src:"/images/rails/use_devise/sign-up.png",alt:"サインアップ画面",title:"サインアップ画面",width:"640",height:"509",layout:"responsive"}}),e._v(" "),t("h2",{attrs:{id:"in-link-logout"}},[e._v("ログイン/ログアウト処理")]),e._v(" "),t("p",[e._v("\n      ログイン/ログアウトの機能を追加します。\n    ")]),e._v(" "),t("p",[e._v("\n      機能追加の前にログインしていない場合にサインアップとログインのリンクを、\n      ログインしている場合にログアウトのリンクを画面上部に表示するようにします。\n      "),t("code",[e._v("app/views/layouts/application.html.haml")]),e._v("を編集します。\n    ")]),e._v(" "),t("code-box",{attrs:{fileName:"app/views/layouts/application.html.haml"}},[e._v('\n  %body\n    - if user_signed_in?\n      = link_to "ログアウト", destroy_user_session_path, method: :delete\n    - else\n      = link_to "サインアップ", new_user_registration_path\n      = link_to "ログイン", new_user_session_path\n    .notice= notice\n    .alert= alert\n    ')]),e._v(" "),t("p",[t("code",[e._v("user_signed_in?")]),e._v("関数はDevise組み込みのメソッドでログイン状態かどうかを判別して、\n      ログインしていると"),t("code",[e._v("true")]),e._v("の値を返してくれます。\n    ")]),e._v(" "),t("p",[e._v("\n      次にDevise標準のSessionControllerではなく、\n      カスタマイズ用に用意したUser::SessionControllerを使うようにしましょう。\n    ")]),e._v(" "),t("code-box",{attrs:{fileName:"config/routes.rb"}},[e._v('\nRails.application.routes.draw do\n  devise_for :users, controllers: {\n    registrations: "users/registrations",\n    sessions: "users/sessions" # 追加\n  }\n    ')]),e._v(" "),t("p",[e._v("\n      最後にログイン/ログアウト後の遷移先を設定します。\n    ")]),e._v(" "),t("p",[e._v("\n      ログインは"),t("code",[e._v("after_sign_in_path_for")]),e._v("で、\n      ログアウトは"),t("code",[e._v("after_sign_out_path_for")]),e._v("で遷移先のパスを返すように設定します。\n    ")]),e._v(" "),t("p",[e._v("\n      ここではログイン後にTodo一覧画面へ遷移し、ログアウト後にホーム画面へ遷移するようにしています。\n    ")]),e._v(" "),t("code-box",{attrs:{fileName:"app/controllers/application_controller.rb"}},[e._v("\n  # 下記を追加\n  private\n\n    def after_sign_in_path_for(resource)\n      todos_path\n    end\n\n    def after_sign_out_path_for(resource_or_scope)\n      root_path\n    end\n    ")]),e._v(" "),t("h2",{attrs:{id:"in-link-reference-links"}},[e._v("参考サイト")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/plataformatec/devise",target:"_blank"}},[e._v("Devise")])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/plataformatec/devise/wiki/How-To:-Redirect-to-a-specific-page-on-successful-sign-in,-sign-up,-or-sign-out",target:"_blank"}},[e._v("How To: Redirect to a specific page on successful sign in, sign up, or sign out")])])])],1)}),[],!1,null,null,null);n.default=component.exports}}]);