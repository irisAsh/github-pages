(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{249:function(e,t,n){var content=n(253);"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,n(11).default)("40aafe93",content,!0,{sourceMap:!1})},250:function(e,t,n){"use strict";var r={name:"SideMenu",props:["menuSections"],computed:{routePath:function(){return this.$route.path}}},o=n(9),component=Object(o.a)(r,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("aside",{attrs:{id:"sidebar"}},e._l(e.menuSections,function(t){return n("section",{key:t.category},[n("div",{staticClass:"menu-overview"},[e._v(e._s(t.category))]),e._v(" "),e._l(t.menus,function(t){return n("div",{key:t.linkPath,staticClass:"menu-item"},[n("nuxt-link",{class:e.routePath==t.linkPath?"access-now":"",attrs:{to:t.linkPath}},[e._v("\n          "+e._s(t.title)+"\n        ")])],1)})],2)}),0)])},[],!1,null,null,null);t.a=component.exports},251:function(e,t){e.exports='<section><h1>Express入門（環境設定）</h1>\n<p>ここでは簡易なTODOアプリを作りながらNodeJSのWebアプリケーションフレームワーク <a href="https://expressjs.com/">Express</a> の使い方を学んでいきます。<br />\n<a href="https://github.com/irisAsh/express-todo-tutorial/tree/master">こちら</a>に完成済みのサンプルを置いておきます。サンプルは後記事の<a href="https://irisash.github.io/express/editrouting/">Expressのルーティングの設定</a>、<a href="https://irisash.github.io/express/mongodb/">ExpressでMongoDBを使う</a>の内容を含んでいます。</p>\n<p><strong>環境</strong></p>\n<ul>\n<li>NodeJS v8.15.0</li>\n<li>Express v4.16.0</li>\n</ul>\n<h2 id="setting">環境設定</h2>\n<p>プロジェクト作成から起動するまでの設定手順を説明していきます。</p>\n<h2 id="express-generator">express-generator のインストール</h2>\n<p>下記のコマンドで<code>express-generator</code>をグローバルインストールします。</p>\n<pre><code class="language-sh.prettyprint">$ yarn install express-generator -g\n</code></pre>\n<h2 id="init-project">プロジェクトの作成</h2>\n<p><code>express-generator</code>を使用すると簡単にWebアプリケーションプロジェクトを最小構成で生成できます。任意のフォルダで次のコマンドを実行してください。</p>\n<pre><code class="language-sh.prettyprint">$ express express-todo-tutorial --view=pug --git\n</code></pre>\n<p>実行すると<code>express-todo-tutorial</code>というフォルダが作成されます。このフォルダの中にWebアプリケーションを動かす最低限のファイルが用意されています。<br />\n先程実行した<code>express</code>コマンドでいくつかのオプションを使っているので説明しておきます。また、オプションにはここで使っていないものもあります。<code>express -h</code>を実行するとオプションの一覧が見れるので、興味があるものを使ってみてください。</p>\n<p><strong>--view=pug</strong></p>\n<p>このオプションは使用するテンプレートエンジンを指定します。ここでは <a href="https://pugjs.org/api/getting-started.html">Pug</a>(旧Jade) と呼ばれるテンプレートを指定しています。テンプレートエンジンは他にも色々あるので自分の好みにあったものを指定してください。</p>\n<p><strong>--git</strong></p>\n<p>このオプションをつけると<code>.gitignore</code>を最初に作成してくれます。最低限のGit管理外設定をしてくれるので、Git管理をする場合は指定しましょう。</p>\n<p>作成されたプロジェクトフォルダの初期構成は以下のようになっています。</p>\n<pre><code>.\n├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.pug\n    ├── index.pug\n    └── layout.pug\n</code></pre>\n<p>Webアプリケーションを作成したことがある方は大体の内容はわかるかと思います。初学者の方は作りながら説明していきますので、大まかで良いのでどのファイルがどこにあるかを覚えておけば良いでしょう。</p>\n<h2 id="running">起動確認</h2>\n<p>初期作成されたプロジェクトを起動して動作確認をしておきましょう。下記のコマンドで起動確認できます。プロジェクトフォルダ内に移動した後に<code>yarn install</code>でパッケージを取得しています。最後のコマンドが実際にExpressを起動するコマンドになります。</p>\n<pre><code>$ cd express-todo-tutorial\n$ yarn install\n$ DEBUG=express-todo-tutorial:* yarn start\n</code></pre>\n<p>コマンド実行後にブラウザから<a href="http://localhost:3000">http://localhost:3000</a>にアクセスしてみましょう。以下のように画面が表示されれば起動完了です。<br />\nまた、起動を終了するときは<code>Ctrl+c</code>で終了することができます。</p>\n<img src="images/express/gettingstarted/run-start.png" alt="起動確認" title="起動確認" style="max-height:400px;">\n<p>このままでも開発を進めることはできますが、ファイルを編集する度にサーバー停止・<code>yarn stat</code>実行をするのは手間になるので、<a href="https://github.com/remy/nodemon">nodemon</a> をインストールしておきましょう。<code>nodemon</code>を使うとファイル更新の度に自動でサーバーを再起動してくれます。</p>\n<pre><code>$ yarn add nodemon --dev\n</code></pre>\n<p>また、起動コマンドもスクリプトに定義しておきましょう。<code>package.json</code>に以下のようにスクリプトを追加します。</p>\n<pre><code class="language-json.prettyprint"># package.json\n  ...\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;node ./bin/www&quot;,\n    &quot;devstart&quot;: &quot;nodemon ./bin/www&quot;, # 追加\n    &quot;debugstart&quot;: &quot;DEBUG=express-todo-tutorial:* yarn run devstart&quot; # 追加\n  },\n</code></pre>\n<p>次のコマンドを実行して起動を確認しましょう。</p>\n<pre><code>$ yarn run debugstart\n</code></pre>\n<p><a href="http://localhost:3000">http://localhost:3000</a>で先程と同様に画面が表示されればOKです。<code>views/index.pug</code>を編集して<code>nodemon</code>の挙動を確認してみましょう。</p>\n<pre><code class="language-pug.prettyprint"># views/index.pug\n\nextends layout               \n                             \nblock content                \n  h1= title                  \n  p Welcome to #{title} !!!!!  # !!!!!を追加\n</code></pre>\n<p>サーバーが自動で再起動されて画面が変更されていることが確認できます。</p>\n</section>\n'},252:function(e,t,n){"use strict";var r=n(249);n.n(r).a},253:function(e,t,n){(e.exports=n(10)(!1)).push([e.i,".article-timestamp{margin-top:1.5rem;padding-top:.5rem;border-top:1px solid #aaa;color:#aaa;display:flex;flex-direction:row}.timestamp-container{display:flex;flex-direction:row;justify-content:center;align-items:center;padding-right:1rem}.timestamp-container i{margin-right:.4rem}",""])},254:function(e,t,n){"use strict";var r={name:"ArticleTimestamp",props:["createdAt","updatedAt"]},o=(n(252),n(9)),component=Object(o.a)(r,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"article-timestamp"},[n("div",{staticClass:"timestamp-container"},[n("i",{staticClass:"far fa-clock"}),e._v(" "),n("p",[e._v(e._s(e.createdAt))])]),e._v(" "),n("div",{staticClass:"timestamp-container"},[n("i",{staticClass:"fas fa-clock"}),e._v(" "),n("p",[e._v(e._s(e.updatedAt))])])])},[],!1,null,null,null);t.a=component.exports},255:function(e,t,n){"use strict";n(251);var r={name:"TableContent",props:["articleMd"],computed:{getInternalLinks:function(){if(!this||!this.$props||!this.$props.articleMd)return[];for(var e,t=/<h2 id="(.*)">(.*)<\/h2>/gm,n=[];null!=(e=t.exec(this.$props.articleMd));)e[1]&&e[2]&&n.push({id:e[1],title:e[2]});return n||[]}}},o=n(9),component=Object(o.a)(r,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{attrs:{id:"table-content"}},[n("aside",{attrs:{id:"table-content-list"}},e._l(e.getInternalLinks,function(t){return n("div",{key:t.id,staticClass:"link-container"},[n("nuxt-link",{directives:[{name:"scroll-to",rawName:"v-scroll-to",value:"#"+t.id,expression:"'#' + internalLink.id"}],attrs:{to:""}},[e._v("\n        "+e._s(t.title)+"\n      ")])],1)}),0)])},[],!1,null,null,null);t.a=component.exports},268:function(e,t){e.exports='<section><h1>ExpressでCSSプリプロセッサを利用する</h1>\n<p>ここではExpressでCSSプリプロセッサを導入します。CSSプリプロセッサはCSSメタ言語とも呼ばれCSSを記述するための言語です。このメタ言語を使うことによってどういったメリットがあるかと言いますと、CSSコード内で変数を定義して利用したり、少ないコードで記述できたり、構造的にコードを記述できたりします。</p>\n<p>CSSプリプロセッサにはいくつか種類がありますが、今回はLess, Sass/Scss, Stylusを説明します。</p>\n<h2 id="less-overview">Lessについて</h2>\n<p><a href="http://lesscss.org/">Less</a>はLeaner CSSの略で、Javascript製のCSSメタ言語です。現在のところ他のメタ言語と比べて<a href="https://github.com/less/less.js">Github</a>は一番多くなっています。しかし、現在は利用は減少傾向にありSassの利用が多くなっています。<br />\nLessの記法はCSS記法にかなり近いので、既存のCSSコードをLessコードとして利用することができます。また、Lessファイルは拡張子<code>.less</code>です。</p>\n<h2 id="less-generate">プロジェクト生成時にLessを導入する</h2>\n<p><code>express-generator</code>でプロジェクトを作成する際に、Lessを利用するように設定することができます。<br />\n下記のようにプロジェクトを作成します。</p>\n<pre><code class="language-shell.prettyprint">$ express --css=less プロジェクト名\n</code></pre>\n<h2 id="less-including">開発途中でLessを導入する</h2>\n<p>既に生成済みのプロジェクトにLessを導入してみます。手元に既に作成済みのプロジェクトがない場合は<a href="https://github.com/irisAsh/express-todo-tutorial/tree/initial-template">こちら</a>にサンプルプロジェクトがあるので利用してください。</p>\n<p>先ずはExpressでLessファイルをコンパイルするためのモジュール<a href="https://github.com/emberfeather/less.js-middleware">less-middleware</a>をインストールします。</p>\n<pre><code class="language-shell.prettyprint">$ yarn add less-middleware\n</code></pre>\n<p><code>less-middleware</code>をコードに組み込みます。下記のように<code>app.js</code>を編集してみましょう。</p>\n<pre><code class="language-app.js.prettyprint">// app.js\n省略\n...\nvar logger = require(\'morgan\');\nvar lessMiddleware = require(\'less-middleware\'); // 追加\n...\n\n...\napp.use(lessMiddleware(path.join(__dirname, \'public\'))); // 追加\napp.use(express.static(path.join(__dirname, \'public\')));\n</code></pre>\n<p>後は<code>public/stylesheets/</code>以下のCSSファイルを<code>.less</code>に拡張子を変えて適宜Lessの記法に変更するだけです。<br />\nLess導入後のサンプルは<a href="https://github.com/irisAsh/express-todo-tutorial/tree/tutorial-ver-less">こちら</a>です。</p>\n<h2 id="sass-overview">Sass/Scssについて</h2>\n<p><a href="https://sass-lang.com/">Sass</a>はSyntactically Awesome Style Sheetsの略で、Ruby製のCSSメタ言語です。元々はRubyでの実装ですが、現在は他言語の実装も用意されています。現在Sassは最も多く利用されているようで、Sassを利用したCSSフレームワークもあります。<br />\nExpressで利用する場合は<a href="https://github.com/sass/node-sass">node-sass</a>（実際にはその拡張<a href="https://github.com/sass/node-sass-middleware">node-sass-middleware</a>）を使って組み込むことができます。<br />\nまたScssはSassの別構文でCSS記法に近い形で記述することができる。Sassの場合は<code>.sass</code>の拡張子を、Scssの場合は<code>.scss</code>の拡張子を使います。</p>\n<h2 id="sass-generate">プロジェクト生成時にSassを導入する</h2>\n<p>Less同様で<code>express-generator</code>でプロジェクトを作成する際に、Sassを利用するように設定することができます。<br />\n下記のようにプロジェクトを作成します。</p>\n<pre><code class="language-shell.prettyprint">$ express --css=sass プロジェクト名\n</code></pre>\n<h2 id="change-scss">SassをScssに切り替える</h2>\n<p>Scss記法を使うためには、プロジェクト生成でSassを指定した後に設定をScss用に変更する必要があります。</p>\n<p><strong>ファイル拡張子の変更する</strong></p>\n<p>ファイルの拡張子は<code>.scss</code>に変えてください。</p>\n<pre><code class="language-shell.prettyprint">$ mv public/stylesheets/style.sass public/stylesheets/style.scss\n</code></pre>\n<p><strong>構文設定を変更する</strong></p>\n<p><code>node-sass-middleware</code>の構文設定を変更します。デフォルトでは設定はapp.jsに記述されています。<br />\n<code>node-saas-middleware</code>の<code>indentedSyntax</code>を<code>true</code>にするとSass、<code>false</code>にするとScssに設定が変更できます。</p>\n<pre><code class="language-app.js.prettyprint">// app.js\n省略\n...\napp.use(cookieParser());\napp.use(sassMiddleware({\n  src: path.join(__dirname, \'public\'),\n  dest: path.join(__dirname, \'public\'),\n  indentedSyntax: false, // falseにするとScssになります\n  sourceMap: true\n}));\n</code></pre>\n<p>後はファイルのSass記法をScss記法へ書き換えるだけです。</p>\n<h2 id="sass-including">開発途中でSassを導入する</h2>\n<p>次に生成済みのプロジェクトにSassを導入します。先程と同様既存プロジェクトがない場合はサンプルプロジェクトは<a href="https://github.com/irisAsh/express-todo-tutorial/tree/initial-template">こちら</a>をご利用ください。</p>\n<p>先程説明した通りExpressでSassを利用するには<a href="https://github.com/sass/node-sass-middleware">node-sass-middleware</a>を利用します。</p>\n<pre><code class="language-shell.prettyprint">$ yarn add node-sass-middleware\n</code></pre>\n<p><code>app.js</code>でSassのコンパイル実装を追加します。</p>\n<pre><code class="language-app.js.prettyprint">// app.js\n省略\n...\nvar logger = require(\'morgan\');\nvar sassMiddleware = require(\'node-sass-middleware\'); // 追加\n...\n\n...\n// 追加\napp.use(sassMiddleware({\n  src: path.join(__dirname, \'public\'),\n  dest: path.join(__dirname, \'public\'),\n  indentedSyntax: true,\n  sourceMap: true\n}));\napp.use(express.static(path.join(__dirname, \'public\')));\n</code></pre>\n<p><code>public/stylesheets/</code>以下のCSSファイルの拡張子を<code>.sass</code>に変更してください。Scss利用の場合は先程の通り<code>indentedSyntax</code>を<code>false</code>にし拡張子を<code>.scss</code>にしてください。<br />\nSass導入後のサンプルは<a href="https://github.com/irisAsh/express-todo-tutorial/tree/tutorial-ver-sass">こちら</a>です。</p>\n<h2 id="stylus-overview">Stylusについて</h2>\n<p><a href="http://stylus-lang.com/">Stylus</a>はNode.js環境で利用できるCSSメタ言語です。LessやSassより後に作られた言語で、両方の記法を使うことができ、拡張機能も他に比べて豊富です。またJavascriptコードのような記法で変数定義や制御構文を記述することが出来ます。<br />\nただ現在のところは他の言語に比べて<a href="https://github.com/stylus/stylus/">github</a>のスターが少なく、参考記事なども少ないです。<br />\nファイルの拡張子は<code>.styl</code>を使います。</p>\n<h2 id="stylus-generate">プロジェクト生成時にStylusを導入する</h2>\n<p>他同様で<code>express-generator</code>でプロジェクトを作成する際に設定することができます。<br />\n下記のようにプロジェクトを作成します。</p>\n<pre><code class="language-shell.prettyprint">$ express --css=stylus プロジェクト名\n</code></pre>\n<h2 id="stylus-including">開発途中でStylusを導入する</h2>\n<p>さて生成済みのプロジェクトにStylusを導入します。サンプルプロジェクトは<a href="https://github.com/irisAsh/express-todo-tutorial/tree/initial-template">こちら</a>をご利用ください。</p>\n<p>StylusはNode.js環境で利用できるので、他のようにミドルウェアではなく<a href="https://github.com/stylus/stylus/">stylus</a>そのままのインストールになります。</p>\n<pre><code class="language-shell.prettyprint">$ yarn add stylus\n</code></pre>\n<p>Stylusコンパルのために<code>app.js</code>を編集しましょう。</p>\n<pre><code class="language-app.js.prettyprint">// app.js\n省略\n...\nvar logger = require(\'morgan\');\nvar stylus = require(\'stylus\'); // 追加\n...\n\n...\napp.use(stylus.middleware(path.join(__dirname, \'public\'))); // 追加\napp.use(express.static(path.join(__dirname, \'public\')));\n</code></pre>\n<p>最後に<code>public/stylesheets/</code>以下のCSSファイルを<code>.styl</code>に拡張子を変更してください。<br />\nStylus導入後のサンプルは<a href="https://github.com/irisAsh/express-todo-tutorial/tree/tutorial-ver-stylus">こちら</a>です。</p>\n</section>\n'},306:function(e,t,n){"use strict";n.r(t);var r=n(254),o=n(250),c=n(255),d=n(75),l=n(268),h=n.n(l),m={components:{ArticleTimestamp:r.a,SideMenu:o.a,TableContent:c.a},data:function(){return{menuSections:d}},computed:{CssPreprocessorMd:function(){return h.a}},head:function(){var e=d.routing_view.menus;return{title:e.css_preprocessor.headerTitle,meta:[{hid:"description",name:"description",content:e.css_preprocessor.headerDescription}]}}},S=n(9),component=Object(S.a)(m,function(){var e=this.$createElement,t=this._self._c||e;return t("div",{attrs:{id:"wrapper"}},[t("article",{attrs:{id:"main"}},[t("section",[t("div",{domProps:{innerHTML:this._s(this.CssPreprocessorMd)}}),this._v(" "),t("article-timestamp",{attrs:{createdAt:"2019/04/14",updatedAt:"2019/04/14"}})],1)]),this._v(" "),t("side-menu",{attrs:{menuSections:this.menuSections}}),this._v(" "),t("table-content",{attrs:{articleMd:this.CssPreprocessorMd}})],1)},[],!1,null,null,null);t.default=component.exports}}]);