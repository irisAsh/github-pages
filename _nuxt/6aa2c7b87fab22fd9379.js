(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{238:function(e){e.exports=JSON.parse('{"tutorial":{"category":"入門","categoryLabel":"Rails","categoryPath":"/rails/","iconClass":"fas fa-home","menus":{"setup":{"linkPath":"/rails/setup/","ogpImage":"/images/rails/setup/ogp.png","title":"環境設定","subTitle":"Gem / Bundle","menuIcon":"fas fa-home","headerTitle":"Ruby on Rails 5 の環境設定","headerDescription":"Ruby on Rails 5 の環境設定について説明します。ここでは、Rails new は使わずプロジェクト内でGemを管理してプロジェクトを作成します。また今後の記事では入門としてToDoアプリを作成しながら解説を進めていきます。"},"use_mariadb":{"linkPath":"/rails/use_mariadb/","ogpImage":"/images/rails/use_mariadb/ogp.png","title":"MariaDBを利用する","subTitle":"MariaDB","menuIcon":"fas fa-coins","headerTitle":"Ruby on RailsでMariaDBを利用する","headerDescription":"Railsプロジェクト作成直後にMariaDBを導入する手順を説明します。Rails初期設定ではSQLite3を利用するようになっていますが、プロジェクト規模が多くなる場合は関係性のあるデータベースを利用する方が良いです。"},"scaffold":{"linkPath":"/rails/scaffold/","ogpImage":"/images/rails/scaffold/ogp.png","title":"scaffoldを使う","subTitle":"rails generate scaffold","menuIcon":"fas fa-folder","headerTitle":"rails generate scaffoldを使ってページを追加する","headerDescription":"rails generate scaffoldを使って新規ページを追加してみます。scaffoldを使用するとコントローラー、ビュー、モデル等の必要とするファイルが全て自動生成されます。config/application.rbを編集して任意の単位で自動生成の拒否設定をすることもできます。"},"use_hamlit":{"linkPath":"/rails/use_hamlit/","ogpImage":"/images/rails/use_hamlit/ogp.png","title":"Hamlitを使う","subTitle":"hamlit-rails","menuIcon":"fas fa-crown","headerTitle":"HTMLテンプレートHamlitを使う","headerDescription":"Rails標準のHTMLテンプレートはERBが使われています。他にもHamlやSlimといったものがありますが、今回はHamlitというHTMLテンプレートを使う方法を説明します。HamlitはHamlの拡張でHamlをより高速にしたものです。記法はHamlと同様なのでHamlユーザーも利用しやすいでしょう。"},"add_page":{"linkPath":"/rails/add_page/","ogpImage":"/images/rails/add_page/ogp.png","title":"画面作成の基本","subTitle":"rails generate controller","menuIcon":"far fa-newspaper","headerTitle":"Railsで新規画面を作成する基本な流れ","headerDescription":"Railsで新規画面を作成する基本的な流れを説明します。今回は自動生成を使います。rails generate controllerでビューとコントローラーの自動生成をし、適宜画面を編集し画面を作成していきます。"},"use_devise":{"linkPath":"/rails/use_devise/","ogpImage":"/images/rails/use_devise/ogp.png","title":"Deviseで認証を追加する","subTitle":"Devise","menuIcon":"fas fa-passport","headerTitle":"Deviseを利用して認証を追加する","headerDescription":"Deviseを使ってユーザー認証処理を追加して見ます。Deviseはサインアップやログインなど認証の処理を提供してくれる便利なGemです。Deviseは複雑で柔軟性はないですが多機能を提供しているので独自のカスタマイズがなければとても有効です。"}}},"support_tool":{"category":"開発支援ツール","categoryLabel":"Rails","categoryPath":"/rails/","iconClass":"fas fa-hands-helping","menus":{"use_rubocop":{"linkPath":"/rails/use_rubocop/","ogpImage":"/images/rails/use_rubocop/ogp.png","title":"RuboCopを使う","subTitle":"RuboCop","menuIcon":"fas fa-robot","headerTitle":"RuboCopを導入してコードを整理する","headerDescription":"RubocopはRubyコードのスタイルガイドに沿ってコード解析をしてくれるツールです。プロジェクトの開発で実装する人数が増えればソースコードの記述が統一されなくなっていきます。コード解析ツールを使えばスタイルガイドに順守していない場合に警告を表示して知らせてくれます。"}}}}')},303:function(e,o,n){"use strict";n.r(o);var t=n(234),l=n(235),r=n(238),d={components:{ArticlePage:t.a,CodeBox:l.a},data:function(){return{menuSections:r,categoryName:"tutorial",articleName:"add_page",datePublished:new Date("2019/06/02 22:00:00 +0900"),dateModified:new Date("2020/01/02 01:00:00 +0900"),contents:[{id:"in-link-add-page",title:"画面の追加"},{id:"in-link-edit-page",title:"画面の編集"},{id:"in-link-reference-links",title:"参考サイト"}]}}},c=n(12),component=Object(c.a)(d,(function(){var e=this,o=e.$createElement,n=e._self._c||o;return n("article-page",{attrs:{menuSections:e.menuSections,contents:e.contents,categoryName:e.categoryName,articleName:e.articleName,datePublished:e.datePublished,dateModified:e.dateModified}},[n("h1",[e._v("Railsで新規画面を作成する基本な流れ")]),e._v(" "),n("div",{staticClass:"abstract"},[n("p",[e._v("\n        Railsで新規画面を作成する基本的な流れを説明します。\n        今回は自動生成を使います。\n        rails generate controllerでビューとコントローラーの自動生成をし、\n        適宜画面を編集し画面を作成していきます。\n      ")]),e._v(" "),n("p",[e._v("\n        今回実装のサンプルは\n        "),n("a",{attrs:{href:"https://github.com/irisAsh/rails-todo-tutorial/tree/ver-add-page",target:"_blank"}},[e._v("Github")]),e._v("\n        においていますのでご参考ください。\n      ")])]),e._v(" "),n("h2",{attrs:{id:"in-link-add-page"}},[e._v("画面の追加")]),e._v(" "),n("p",[e._v("\n      画面の追加には、ルーティングの追加、コントローラーの追加、ビューの追加が必要となります。\n      "),n("code",[e._v("rails generate controller")]),e._v("を使うとこの３つの操作を自動でしてくれます。\n    ")]),e._v(" "),n("code-box",[e._v("\n$ bin/rails g controller Welcome index\n      create  app/controllers/welcome_controller.rb\n       route  get 'welcome/index'\n      invoke  haml\n      create    app/views/welcome\n      create    app/views/welcome/index.html.haml\n      invoke  assets\n      invoke    coffee\n      invoke    scss\n    ")]),e._v(" "),n("p",[e._v("\n      ルーティングを見てみると"),n("code",[e._v("get 'welcome/index'")]),e._v("が追加されています。\n      これは"),n("code",[e._v("/welcome/index")]),e._v("のGETレスポンスを追加した意味になります。\n      これを追加するとWelcomeControllerとコントローラー内に"),n("code",[e._v("index")]),e._v("アクション\n      （"),n("code",[e._v("def index")]),e._v("と宣言させるメソッドです）が必要になり、また"),n("code",[e._v("index.html.haml")]),e._v("のビューファイルが必要になります。\n    ")]),e._v(" "),n("code-box",{attrs:{fileName:"config/routes.rb"}},[e._v("\nRails.application.routes.draw do\n  get 'welcome/index' # 追加される\n  resources :todos\nend\n    ")]),e._v(" "),n("p",[e._v("続いて、ビューとコントローラーです。")]),e._v(" "),n("code-box",{attrs:{fileName:"app/views/welcome/index.html.haml"}},[e._v("\n%h1 Welcome#index\n%p Find me in app/views/welcome/index.html.haml\n    ")]),e._v(" "),n("p"),e._v(" "),n("code-box",{attrs:{fileName:"app/controllers/welcome_controller.rb"}},[e._v("\nclass WelcomeController < ApplicationController\n  def index\n  end\nend\n    ")]),e._v(" "),n("p",[e._v("\n      ビューには"),n("code",[e._v("/welcome/index")]),e._v("に表示されている内容が書かれています。\n      コントローラーには今は"),n("code",[e._v("index")]),e._v("アクションの処理は何も書かれていません。\n    ")]),e._v(" "),n("h2",{attrs:{id:"in-link-edit-page"}},[e._v("画面の編集")]),e._v(" "),n("p",[e._v("\n      最初に、ルートパス("),n("code",[e._v("http://localhost:3000/")]),e._v(")で\n      "),n("code",[e._v("/welcome/index")]),e._v("と同じ画面が表示されるようにしておきましょう。\n    ")]),e._v(" "),n("code-box",[e._v('\nRails.application.routes.draw do\n  root "welcome#index" # 追加\n  get "welcome/index"\n  resources :todos\nend\n    ')]),e._v(" "),n("p",[n("code",[e._v('root "コントローラ名/アクション名"')]),e._v("\n      でルートパスを任意のアクション処理に割り当てることができます。\n    ")]),e._v(" "),n("amp-img",{attrs:{src:"/images/rails/add_page/welcome-index.png",alt:"ルート画面",title:"ルート画面",width:"640",height:"509",layout:"responsive"}}),e._v(" "),n("p",[e._v("\n      次に画面を編集してみましょう。\n      下記のようにコードを編集してルートパスにアクセスしてみてください。\n    ")]),e._v(" "),n("code-box",{attrs:{fileName:"app/views/welcome/index.html.haml"}},[e._v('\n%h1 Todoアプリ\n%p= "残りタスク：1個"\n= link_to "一覧へ", todos_path\n    ')]),e._v(" "),n("amp-img",{attrs:{src:"/images/rails/add_page/show-task-count.png",alt:"Todo件数表示",title:"Todo件数表示",width:"640",height:"509",layout:"responsive"}}),e._v(" "),n("p",[n("code",[e._v("link_to")]),e._v("というメソッドはRailsでよく使われるメソッドでaタグを生成してくれるメソッドです。\n      第１引数にリンクの文字列、第２引数にリンク先のパスを指定します。\n      "),n("code",[e._v("todos_path")]),e._v("は_pathヘルパーというRailsのメソッドでルーティングに定義されているパスを生成してくれます。\n      "),n("code",[e._v("bin/rails routes")]),e._v("で表示されるPrefixの文字に_pathをつけたメソッドが用意される_pathヘルパーとなります。\n    ")]),e._v(" "),n("code-box",[e._v("\n$ bin/rails routes\n         Prefix Verb   URI Pattern                 Controller#Action\n           root GET    /                           welcome#index\n  welcome_index GET    /welcome/index(.:format)    welcome#index\n          todos GET    /todos(.:format)            todos#index\n                POST   /todos(.:format)            todos#create\n       new_todo GET    /todos/new(.:format)        todos#new\n      edit_todo GET    /todos/:id/edit(.:format)   todos#edit\n           todo GET    /todos/:id(.:format)        todos#show\n                PATCH  /todos/:id(.:format)        todos#update\n                PUT    /todos/:id(.:format)        todos#update\n                DELETE /todos/:id(.:format)        todos#destroy\n    ")]),e._v(" "),n("p",[e._v("\n      さて、コントローラーも編集してみましょう。\n      コントローラーで定義した値をビュー側へ受け渡すようにしてみます。\n      これにはコントローラー側でインスタンス変数を用意する必要があります。\n      これでコントローラー側で宣言したインスタンス変数はビュー側で利用できるようになります。\n    ")]),e._v(" "),n("code-box",{attrs:{fileName:"app/controllers/welcome_controller.rb"}},[e._v("\nclass WelcomeController < ApplicationController\n  def index\n    @remaining_count = 1\n  end\nend\n    ")]),e._v(" "),n("p"),e._v(" "),n("code-box",{attrs:{fileName:"app/views/welcome/index.html.haml"}},[e._v('\n%h1 Todoアプリ\n%p= "残りタスク：#{@remaining_count}個"\n= link_to "一覧へ", todos_path\n    ')]),e._v(" "),n("p",[e._v("最後に少しだけデータベースとのアクセス処理を追加してみましょう。")]),e._v(" "),n("code-box",{attrs:{fileName:"app/controllers/welcome_controller.rb"}},[e._v("\nclass WelcomeController < ApplicationController\n  def index\n    @remaining_count = Todo.all.count\n  end\nend\n    ")]),e._v(" "),n("p",[n("code",[e._v("@remaining_count = Todo.all.count")]),e._v("としました。\n      これは"),n("code",[e._v("モデル名.all")]),e._v("で該当モデルの全データを取得し、\n      さらに"),n("code",[e._v("モデル名.all.count")]),e._v("として全データの件数を取るようにしています。\n      (Todoモデルは\n      "),n("nuxt-link",{attrs:{to:"/rails/scaffold/"}},[e._v("scaffoldを使う")]),e._v("\n      で作成したのでそちらを参考）\n    ")],1),e._v(" "),n("p",[e._v("\n      試しにTodoを作成してみてください。\n      件数がTodoデータの件数になることが確認できるはずです。\n    ")]),e._v(" "),n("p",[e._v("\n      次のステップ：\n      "),n("nuxt-link",{attrs:{to:"/rails/use_devise/"}},[e._v("Deviseを利用して認証を追加する")])],1),e._v(" "),n("h2",{attrs:{id:"in-link-reference-links"}},[e._v("参考サイト")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://railsguides.jp/routing.html",target:"_blank"}},[e._v("Rails のルーティング")])])])],1)}),[],!1,null,null,null);o.default=component.exports}}]);