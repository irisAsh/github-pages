(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{237:function(e,t,n){var content=n(241);"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,n(29).default)("2c1f7920",content,!0,{sourceMap:!1})},238:function(e,t,n){"use strict";var o={name:"SideMenu",props:["menuSections"],computed:{routePath:function(){return this.$route.path}}},r=n(12),component=Object(r.a)(o,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("aside",{attrs:{id:"sidebar"}},e._l(e.menuSections,(function(t){return n("section",{key:t.category},[n("div",{staticClass:"menu-overview"},[e._v(e._s(t.category))]),e._v(" "),e._l(t.menus,(function(t){return n("div",{key:t.linkPath,staticClass:"menu-item"},[n("nuxt-link",{class:e.routePath==t.linkPath?"access-now":"",attrs:{to:t.linkPath}},[e._v("\n          "+e._s(t.title)+"\n        ")])],1)}))],2)})),0)])}),[],!1,null,null,null);t.a=component.exports},239:function(e,t,n){"use strict";t.a='<section><h1>Express入門（環境設定）</h1>\n<p>ここでは簡易なTODOアプリを作りながらNodeJSのWebアプリケーションフレームワーク <a href="https://expressjs.com/">Express</a> の使い方を学んでいきます。<br />\n<a href="https://github.com/irisAsh/express-todo-tutorial/tree/master">こちら</a>に完成済みのサンプルを置いておきます。サンプルは後記事の<a href="https://irisash.github.io/express/editrouting/">Expressのルーティングの設定</a>、<a href="https://irisash.github.io/express/mongodb/">ExpressでMongoDBを使う</a>の内容を含んでいます。</p>\n<p><strong>環境</strong></p>\n<ul>\n<li>NodeJS v8.15.0</li>\n<li>Express v4.16.0</li>\n</ul>\n<h2 id="setting">環境設定</h2>\n<p>プロジェクト作成から起動するまでの設定手順を説明していきます。</p>\n<h2 id="express-generator">express-generator のインストール</h2>\n<p>下記のコマンドで<code>express-generator</code>をグローバルインストールします。</p>\n<pre><code class="language-sh.prettyprint">$ yarn install express-generator -g\n</code></pre>\n<h2 id="init-project">プロジェクトの作成</h2>\n<p><code>express-generator</code>を使用すると簡単にWebアプリケーションプロジェクトを最小構成で生成できます。任意のフォルダで次のコマンドを実行してください。</p>\n<pre><code class="language-sh.prettyprint">$ express express-todo-tutorial --view=pug --git\n</code></pre>\n<p>実行すると<code>express-todo-tutorial</code>というフォルダが作成されます。このフォルダの中にWebアプリケーションを動かす最低限のファイルが用意されています。<br />\n先程実行した<code>express</code>コマンドでいくつかのオプションを使っているので説明しておきます。また、オプションにはここで使っていないものもあります。<code>express -h</code>を実行するとオプションの一覧が見れるので、興味があるものを使ってみてください。</p>\n<p><strong>--view=pug</strong></p>\n<p>このオプションは使用するテンプレートエンジンを指定します。ここでは <a href="https://pugjs.org/api/getting-started.html">Pug</a>(旧Jade) と呼ばれるテンプレートを指定しています。テンプレートエンジンは他にも色々あるので自分の好みにあったものを指定してください。</p>\n<p><strong>--git</strong></p>\n<p>このオプションをつけると<code>.gitignore</code>を最初に作成してくれます。最低限のGit管理外設定をしてくれるので、Git管理をする場合は指定しましょう。</p>\n<p>作成されたプロジェクトフォルダの初期構成は以下のようになっています。</p>\n<pre><code>.\n├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.pug\n    ├── index.pug\n    └── layout.pug\n</code></pre>\n<p>Webアプリケーションを作成したことがある方は大体の内容はわかるかと思います。初学者の方は作りながら説明していきますので、大まかで良いのでどのファイルがどこにあるかを覚えておけば良いでしょう。</p>\n<h2 id="running">起動確認</h2>\n<p>初期作成されたプロジェクトを起動して動作確認をしておきましょう。下記のコマンドで起動確認できます。プロジェクトフォルダ内に移動した後に<code>yarn install</code>でパッケージを取得しています。最後のコマンドが実際にExpressを起動するコマンドになります。</p>\n<pre><code>$ cd express-todo-tutorial\n$ yarn install\n$ DEBUG=express-todo-tutorial:* yarn start\n</code></pre>\n<p>コマンド実行後にブラウザから<a href="http://localhost:3000">http://localhost:3000</a>にアクセスしてみましょう。以下のように画面が表示されれば起動完了です。<br />\nまた、起動を終了するときは<code>Ctrl+c</code>で終了することができます。</p>\n<img src="images/express/gettingstarted/run-start.png" alt="起動確認" title="起動確認" style="max-height:400px;">\n<p>このままでも開発を進めることはできますが、ファイルを編集する度にサーバー停止・<code>yarn stat</code>実行をするのは手間になるので、<a href="https://github.com/remy/nodemon">nodemon</a> をインストールしておきましょう。<code>nodemon</code>を使うとファイル更新の度に自動でサーバーを再起動してくれます。</p>\n<pre><code>$ yarn add nodemon --dev\n</code></pre>\n<p>また、起動コマンドもスクリプトに定義しておきましょう。<code>package.json</code>に以下のようにスクリプトを追加します。</p>\n<pre><code class="language-json.prettyprint"># package.json\n  ...\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;node ./bin/www&quot;,\n    &quot;devstart&quot;: &quot;nodemon ./bin/www&quot;, # 追加\n    &quot;debugstart&quot;: &quot;DEBUG=express-todo-tutorial:* yarn run devstart&quot; # 追加\n  },\n</code></pre>\n<p>次のコマンドを実行して起動を確認しましょう。</p>\n<pre><code>$ yarn run debugstart\n</code></pre>\n<p><a href="http://localhost:3000">http://localhost:3000</a>で先程と同様に画面が表示されればOKです。<code>views/index.pug</code>を編集して<code>nodemon</code>の挙動を確認してみましょう。</p>\n<pre><code class="language-pug.prettyprint"># views/index.pug\n\nextends layout               \n                             \nblock content                \n  h1= title                  \n  p Welcome to #{title} !!!!!  # !!!!!を追加\n</code></pre>\n<p>サーバーが自動で再起動されて画面が変更されていることが確認できます。</p>\n</section>\n'},240:function(e,t,n){"use strict";var o=n(237);n.n(o).a},241:function(e,t,n){(t=n(28)(!1)).push([e.i,".article-timestamp{margin-top:1.5rem;padding-top:.5rem;border-top:1px solid #aaa;color:#aaa}.article-timestamp,.timestamp-container{display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row}.timestamp-container{-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;padding-right:1rem}.timestamp-container i{margin-right:.4rem}",""]),e.exports=t},242:function(e,t,n){"use strict";var o={name:"ArticleTimestamp",props:["createdAt","updatedAt"]},r=(n(240),n(12)),component=Object(r.a)(o,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"article-timestamp"},[n("div",{staticClass:"timestamp-container"},[n("i",{staticClass:"far fa-clock"}),e._v(" "),n("p",[e._v(e._s(e.createdAt))])]),e._v(" "),n("div",{staticClass:"timestamp-container"},[n("i",{staticClass:"fas fa-clock"}),e._v(" "),n("p",[e._v(e._s(e.updatedAt))])])])}),[],!1,null,null,null);t.a=component.exports},243:function(e,t,n){"use strict";n(239);var o={name:"TableContent",props:["articleMd"],computed:{getInternalLinks:function(){if(!this||!this.$props||!this.$props.articleMd)return[];for(var e,t=/<h2 id="(.*)">(.*)<\/h2>/gm,n=[];null!=(e=t.exec(this.$props.articleMd));)e[1]&&e[2]&&n.push({id:e[1],title:e[2]});return n||[]}}},r=n(12),component=Object(r.a)(o,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{attrs:{id:"table-content"}},[n("aside",{attrs:{id:"table-content-list"}},e._l(e.getInternalLinks,(function(t){return n("div",{key:t.id,staticClass:"link-container"},[n("nuxt-link",{directives:[{name:"scroll-to",rawName:"v-scroll-to",value:"#"+t.id,expression:"'#' + internalLink.id"}],attrs:{to:""}},[e._v("\n        "+e._s(t.title)+"\n      ")])],1)})),0)])}),[],!1,null,null,null);t.a=component.exports},244:function(e){e.exports=JSON.parse('{"tutorial":{"category":"入門","iconClass":"fas fa-home","menus":{"setup":{"linkPath":"/rails/setup/","title":"環境設定","subTitle":"Gem / Bundle","menuIcon":"fas fa-home","headerTitle":"Ruby on Rails 5 の環境設定","headerDescription":"Ruby on Rails 5 の環境設定について説明します。ここでは、Rails new は使わずプロジェクト内でGemを管理してプロジェクトを作成します。また今後の記事では入門としてToDoアプリを作成しながら解説を進めていきます。"},"use_mariadb":{"linkPath":"/rails/use_mariadb/","title":"MariaDBを利用する","subTitle":"MariaDB","menuIcon":"fas fa-coins","headerTitle":"Ruby on RailsでMariaDBを利用する","headerDescription":"Railsプロジェクト作成直後にMariaDBを導入する手順を説明します。Rails初期設定ではSQLite3を利用するようになっていますが、プロジェクト規模が多くなる場合は関係性のあるデータベースを利用する方が良いです。"},"scaffold":{"linkPath":"/rails/scaffold/","title":"scaffoldを使う","subTitle":"rails generate scaffold","menuIcon":"fas fa-folder","headerTitle":"rails generate scaffoldを使ってページを追加する","headerDescription":"rails generate scaffoldを使って新規ページを追加してみます。scaffoldを使用するとコントローラー、ビュー、モデル等の必要とするファイルが全て自動生成されます。config/application.rbを編集して任意の単位で自動生成の拒否設定をすることもできます。"},"use_hamlit":{"linkPath":"/rails/use_hamlit/","title":"Hamlitを使う","subTitle":"hamlit-rails","menuIcon":"fas fa-crown","headerTitle":"HTMLテンプレートHamlitを使う","headerDescription":"Rails標準のHTMLテンプレートはERBが使われています。他にもHamlやSlimといったものがありますが、今回はHamlitというHTMLテンプレートを使う方法を説明します。HamlitはHamlの拡張でHamlをより高速にしたものです。記法はHamlと同様なのでHamlユーザーも利用しやすいでしょう。"},"add_page":{"linkPath":"/rails/add_page/","title":"画面作成の基本","subTitle":"rails generate controller","menuIcon":"far fa-newspaper","headerTitle":"Railsで新規画面を作成する基本な流れ","headerDescription":"Railsで新規画面を作成する基本的な流れを説明します。今回は自動生成を使います。rails generate controllerでビューとコントローラーの自動生成をし、適宜画面を編集し画面を作成していきます。"},"use_devise":{"linkPath":"/rails/use_devise/","title":"Deviseで認証を追加する","subTitle":"Devise","menuIcon":"fas fa-passport","headerTitle":"Deviseを利用して認証を追加する","headerDescription":"Deviseを使ってユーザー認証処理を追加して見ます。Deviseはサインアップやログインなど認証の処理を提供してくれる便利なGemです。Deviseは複雑で柔軟性はないですが多機能を提供しているので独自のカスタマイズがなければとても有効です。"}}},"support_tool":{"category":"開発支援ツール","iconClass":"fas fa-hands-helping","menus":{"use_rubocop":{"linkPath":"/rails/use_rubocop/","title":"RuboCopを使う","subTitle":"RuboCop","menuIcon":"fas fa-robot","headerTitle":"RuboCopを導入してコードを整理する","headerDescription":"RubocopはRubyコードのスタイルガイドに沿ってコード解析をしてくれるツールです。プロジェクトの開発で実装する人数が増えればソースコードの記述が統一されなくなっていきます。コード解析ツールを使えばスタイルガイドに順守していない場合に警告を表示して知らせてくれます。"}}}}')},279:function(e,t,n){"use strict";n.r(t);var o=n(242),r=n(238),l=n(243),d=n(244),c={components:{ArticleTimestamp:o.a,SideMenu:r.a,TableContent:l.a},data:function(){return{menuSections:d,datePublished:new Date(2019,5,2,22,0),dateModified:new Date(2019,5,2,22,0)}},computed:{ArticleMd:function(){return'<section><h1>Railsで新規画面を作成する基本な流れ</h1>\n<p>Railsで新規画面を作成する基本的な流れを説明します。今回は自動生成を使います。rails generate controllerでビューとコントローラーの自動生成をし、適宜画面を編集し画面を作成していきます。</p>\n<p>今回実装のサンプルは<a href="https://github.com/irisAsh/rails-todo-tutorial/tree/ver-add-page">Github</a>においていますのでご参考ください。</p>\n<h2 id="add-page">画面の追加</h2>\n<p>画面の追加には、ルーティングの追加、コントローラーの追加、ビューの追加が必要となります。<code>rails generate controller</code>を使うとこの３つの操作を自動でしてくれます。</p>\n<pre><code class="language-shell.prettyprint">$ bin/rails g controller Welcome index\n      create  app/controllers/welcome_controller.rb\n       route  get \'welcome/index\'\n      invoke  haml\n      create    app/views/welcome\n      create    app/views/welcome/index.html.haml\n      invoke  assets\n      invoke    coffee\n      invoke    scss\n</code></pre>\n<p>まずルーティングを見てみると<code>get \'welcome/index\'</code>が追加されています。<br />\nこれは<code>/welcome/index</code>のGETレスポンスを追加した意味になります。これを追加するとWelcomeControllerとコントローラー内に<code>index</code>アクション（<code>def index</code>と宣言させるメソッドです）が必要になり、また<code>index.html.haml</code>のビューファイルが必要になります。</p>\n<pre><code class="language-ruby.prettyprint"># config/routes.rb\n\nRails.application.routes.draw do\n  get \'welcome/index\' # 追加される\n  resources :todos\nend\n</code></pre>\n<p>続いて、ビューとコントローラーです。</p>\n<pre><code class="language-haml.prettyprint"># app/views/welcome/index.html.haml\n\n%h1 Welcome#index\n%p Find me in app/views/welcome/index.html.haml\n</code></pre>\n<pre><code class="language-ruby.prettyprint"># app/controllers/welcome_controller.rb\n\nclass WelcomeController &lt; ApplicationController\n  def index\n  end\nend\n</code></pre>\n<p>ビューには<code>/welcome/index</code>に表示されている内容が書かれています。コントローラーには今は<code>index</code>アクションの処理は何も書かれていません。</p>\n<h2 id="edit-page">画面の編集</h2>\n<p>最初に、ルートパス(<code>http://localhost:3000/</code>)で<code>/welcome/index</code>と同じ画面が表示されるようにしておきましょう。</p>\n<pre><code class="language-ruby.prettyprint">Rails.application.routes.draw do\n  root &quot;welcome#index&quot; # 追加\n  get &quot;welcome/index&quot;\n  resources :todos\nend\n</code></pre>\n<p><code>root &quot;コントローラ名/アクション名&quot;</code>でルートパスを任意のアクション処理に割り当てることができます。</p>\n<img src="images/rails/add_page/welcome-index.png" alt="ルート画面" title="ルート画面" style="max-height:400px;">\n<p>次に画面を編集してみましょう。下記のようにコードを編集してルートパスにアクセスしてみてください。</p>\n<pre><code class="language-haml.prettyprint"># app/views/welcome/index.html.haml\n\n%h1 Todoアプリ\n%p= &quot;残りタスク：1個&quot;\n= link_to &quot;一覧へ&quot;, todos_path\n</code></pre>\n<img src="images/rails/add_page/show-task-count.png" alt="Todo件数表示" title="Todo件数表示" style="max-height:400px;">\n<p><code>link_to</code>というメソッドはRailsでよく使われるメソッドでaタグを生成してくれるメソッドです。第１引数にリンクの文字列、第２引数にリンク先のパスを指定します。<br />\n<code>todos_path</code>は_pathヘルパーというRailsのメソッドでルーティングに定義されているパスを生成してくれます。<br />\n<code>bin/rails routes</code>で表示されるPrefixの文字に_pathをつけたメソッドが用意される_pathヘルパーとなります。</p>\n<pre><code class="language-shell.prettyprint">$ bin/rails routes\n         Prefix Verb   URI Pattern                 Controller#Action\n           root GET    /                           welcome#index\n  welcome_index GET    /welcome/index(.:format)    welcome#index\n          todos GET    /todos(.:format)            todos#index\n                POST   /todos(.:format)            todos#create\n       new_todo GET    /todos/new(.:format)        todos#new\n      edit_todo GET    /todos/:id/edit(.:format)   todos#edit\n           todo GET    /todos/:id(.:format)        todos#show\n                PATCH  /todos/:id(.:format)        todos#update\n                PUT    /todos/:id(.:format)        todos#update\n                DELETE /todos/:id(.:format)        todos#destroy\n</code></pre>\n<p>さて、コントローラーも編集してみましょう。コントローラーで定義した値をビュー側へ受け渡すようにしてみます。これにはコントローラー側でインスタンス変数を用意する必要があります。<br />\nすると、コントローラー側で宣言したインスタンス変数はビュー側で利用できるようになります。</p>\n<pre><code class="language-ruby.prettyprint"># app/controllers/welcome_controller.rb\n\nclass WelcomeController &lt; ApplicationController\n  def index\n    @remaining_count = 1\n  end\nend\n</code></pre>\n<pre><code class="language-haml.prettyprint"># app/views/welcome/index.html.haml\n\n%h1 Todoアプリ\n%p= &quot;残りタスク：#{@remaining_count}個&quot;\n= link_to &quot;一覧へ&quot;, todos_path\n</code></pre>\n<p>最後に少しだけデータベースとのアクセス処理を追加してみましょう。</p>\n<pre><code class="language-ruby.prettyprint"># app/controllers/welcome_controller.rb\n\nclass WelcomeController &lt; ApplicationController\n  def index\n    @remaining_count = Todo.all.count\n  end\nend\n</code></pre>\n<p><code>@remaining_count = Todo.all.count</code>としました。これは<code>モデル名.all</code>で該当モデルの全データを取得し、さらに<code>モデル名.all.count</code>として全データの件数を取るようにしています。(Todoモデルは<a href="https://irisash.github.io/rails/scaffold/">scaffoldを使う</a>で作成したのでそちらを参考）<br />\n試しにTodoを作成してみてください。件数がTodoデータの件数になることが確認できるはずです。</p>\n<p>次のステップ：<a href="https://irisash.github.io/rails/use_devise/">Deviseを利用して認証を追加する</a></p>\n<h2 id="reference-links">参考サイト</h2>\n<ul>\n<li><a href="https://railsguides.jp/routing.html">Rails のルーティング</a></li>\n</ul>\n</section>\n'}},head:function(){var e=d.tutorial.menus.add_page,article=this.$createArticleStructuredData({headline:e.headerTitle,datePublished:this.$moment(this.datePublished).format(),dateModified:this.$moment(this.dateModified).format()}),t=this.$createBreadcrumbListStructuredData({itemList:[{name:this.$constants.siteName,url:this.$constants.domain},{name:"Rails",url:this.$constants.domain+"rails/"},{name:e.headerTitle,url:this.$constants.domain+"rails/add_page/"}]});return{title:e.headerTitle,meta:[{hid:"description",name:"description",content:e.headerDescription}],__dangerouslyDisableSanitizers:["script"],script:[article,t]}}},m=n(12),component=Object(m.a)(c,(function(){var e=this.$createElement,t=this._self._c||e;return t("div",{attrs:{id:"wrapper"}},[t("article",{attrs:{id:"main"}},[t("section",[t("div",{domProps:{innerHTML:this._s(this.ArticleMd)}}),this._v(" "),t("article-timestamp",{attrs:{createdAt:this.$moment(this.datePublished).format("l"),updatedAt:this.$moment(this.dateModified).format("l")}})],1)]),this._v(" "),t("side-menu",{attrs:{menuSections:this.menuSections}}),this._v(" "),t("table-content",{attrs:{articleMd:this.ArticleMd}})],1)}),[],!1,null,null,null);t.default=component.exports}}]);