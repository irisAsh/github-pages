(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{298:function(e,t,n){"use strict";n.r(t);var r=n(235),o=n(236),v=n(85),_={components:{ArticlePage:r.a,CodeBox:o.a},data:function(){return{menuSections:v,categoryName:"tutorial",articleName:"gettingstarted",datePublished:new Date("2019/03/09 22:00:00 +0900"),dateModified:new Date("2019/12/22 20:00:00 +0900"),contents:[{id:"in-link-express-generator",title:"express-generator のインストール"},{id:"in-link-create-project",title:"プロジェクトの作成"},{id:"in-link-run",title:"起動確認"}]}}},d=n(12),component=Object(d.a)(_,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("article-page",{attrs:{menuSections:e.menuSections,contents:e.contents,categoryName:e.categoryName,articleName:e.articleName,datePublished:e.datePublished,dateModified:e.dateModified}},[n("h1",[e._v("Express入門（環境設定）")]),e._v(" "),n("div",{staticClass:"abstract"},[n("p",[e._v("\n        ここでは簡易なTODOアプリを作りながらNodeJSのWebアプリケーションフレームワーク\n        "),n("a",{attrs:{href:"https://expressjs.com/",target:"_blank"}},[e._v("Express")]),e._v("\n        の使い方を学んでいきます。\n      ")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/irisAsh/express-todo-tutorial/tree/master",target:"_blank"}},[e._v("こちら")]),e._v("\n        に完成済みのサンプルを置いておきます。サンプルは後記事の\n        "),n("nuxt-link",{attrs:{to:"/express/editrouting"}},[e._v("Expressのルーティングの設定")]),e._v("\n        、\n        "),n("nuxt-link",{attrs:{to:"/express/mongodb"}},[e._v("ExpressでMongoDBを使う")]),e._v("\n        の内容を含んでいます。\n      ")],1)]),e._v(" "),n("strong",[e._v("環境")]),e._v(" "),n("ul",[n("li",[e._v("NodeJS v8.15.0")]),e._v(" "),n("li",[e._v("Express v4.16.0")])]),e._v(" "),n("h2",{attrs:{id:"in-link-express-generator"}},[e._v("express-generator のインストール")]),e._v(" "),n("p",[n("code",[e._v("express-generator")]),e._v("\n      を使用すると簡単にWebアプリケーションプロジェクトを最小構成で生成できます。\n    ")]),e._v(" "),n("code-box",[e._v("\n$ yarn install express-generator -g\n    ")]),e._v(" "),n("h2",{attrs:{id:"in-link-create-project"}},[e._v("プロジェクトの作成")]),e._v(" "),n("p",[e._v("先程インストールした"),n("code",[e._v("express-generator")]),e._v("を使ってプロジェクトを作成します。任意のフォルダで次のコマンドを実行してください。")]),e._v(" "),n("code-box",[e._v("\n$ express express-todo-tutorial --view=pug --git\n    ")]),e._v(" "),n("p",[e._v("実行すると"),n("code",[e._v("express-todo-tutorial")]),e._v("というフォルダが作成されます。このフォルダの中にWebアプリケーションを動かす最低限のファイルが用意されています。")]),e._v(" "),n("p",[n("code",[e._v("express")]),e._v("コマンドではいくつかのオプションがあり、初期設定を指定できるので説明しておきます。ここでは全てのオプションを説明しないのでより詳しく知りたい方は、"),n("code",[e._v("express -h")]),e._v("でオプションの一覧が見れるので、興味があるものを調べてみてください。")]),e._v(" "),n("strong",[e._v("--view=pug")]),e._v(" "),n("p",[e._v("\n      このオプションは使用するテンプレートエンジンを指定します。ここでは\n      "),n("a",{attrs:{href:"https://pugjs.org/api/getting-started.html",target:"_blank"}},[e._v("Pug(旧Jade)")]),e._v("\n      と呼ばれるテンプレートを指定しています。テンプレートエンジンは他にも色々あるので自分の好みにあったものを指定してください。\n    ")]),e._v(" "),n("strong",[e._v("--git")]),e._v(" "),n("p",[e._v("\n      このオプションをつけると"),n("code",[e._v(".gitignore")]),e._v("を最初に作成してくれます。\n      最低限のGit管理外設定をしてくれるので、Git管理をする場合は指定しましょう。\n    ")]),e._v(" "),n("br"),e._v(" "),n("p",[e._v("作成されたプロジェクトフォルダの初期構成は以下のようになっています。")]),e._v(" "),n("code-box",[e._v("\n  .\n  ├── app.js\n  ├── bin\n  │   └── www\n  ├── package.json\n  ├── public\n  │   ├── images\n  │   ├── javascripts\n  │   └── stylesheets\n  │       └── style.css\n  ├── routes\n  │   ├── index.js\n  │   └── users.js\n  └── views\n      ├── error.pug\n      ├── index.pug\n      └── layout.pug\n    ")]),e._v(" "),n("p",[e._v("\n      Webアプリケーションを作成したことがある方は大体の内容はわかるかと思います。初学者の方は作りながら説明していきますので、大まかで良いのでどのファイルがどこにあるかを覚えておけば良いでしょう。\n    ")]),e._v(" "),n("h2",{attrs:{id:"in-link-run"}},[e._v("起動確認")]),e._v(" "),n("p",[e._v("\n      初期作成されたプロジェクトを起動して動作確認をしましょう。\n      まずはプロジェクトフォルダ内に移動し、パッケージをインストールします。\n    ")]),e._v(" "),n("code-box",[e._v("\n$ cd express-todo-tutorial\n$ yarn install\n    ")]),e._v(" "),n("p",[e._v("\n      パッケージの取得が完了したら、次のコマンドでExpressを起動することができます。\n    ")]),e._v(" "),n("code-box",[e._v("\n$ DEBUG=express-todo-tutorial:* yarn start\n    ")]),e._v(" "),n("p",[e._v("\n      コマンド実行後にブラウザから"),n("code",[e._v("http://localhost:3000")]),e._v("にアクセスしてみましょう。以下のように画面が表示されれば起動完了です。\n    ")]),e._v(" "),n("p",[e._v("また、起動を終了するときは"),n("code",[e._v("Ctrl+c")]),e._v("で終了することができます。")]),e._v(" "),n("amp-img",{attrs:{src:"/images/express/gettingstarted/run-start.png",alt:"起動確認",title:"起動確認",width:"512",height:"359",layout:"responsive"}}),e._v(" "),n("p",[e._v("\n      このままでも開発を進めることはできますが、ファイルを編集する度にサーバー停止と"),n("code",[e._v("yarn stat")]),e._v("実行をするのは手間なので、\n      "),n("a",{attrs:{href:"https://github.com/remy/nodemon",target:"_blank"}},[e._v("nodemon")]),e._v("\n      をインストールしておきましょう。\n      "),n("code",[e._v("nodemon")]),e._v("を使うとファイル更新の度に自動でサーバーを再起動してくれます。\n    ")]),e._v(" "),n("code-box",[e._v("\n$ yarn add nodemon --dev\n    ")]),e._v(" "),n("p",[e._v("\n      また、起動コマンドもスクリプトに定義しておきましょう。\n      "),n("code",[e._v("package.json")]),e._v("に以下のようにスクリプトを追加します。\n    ")]),e._v(" "),n("code-box",{attrs:{fileName:"package.json"}},[e._v('\n...\n"scripts": {\n  "start": "node ./bin/www",\n  "devstart": "nodemon ./bin/www", # 追加\n  "debugstart": "DEBUG=express-todo-tutorial:* yarn run devstart" # 追加\n},\n    ')]),e._v(" "),n("p",[e._v("次のコマンドを実行して起動を確認しましょう。")]),e._v(" "),n("code-box",[e._v("\n$ yarn run debugstart\n    ")]),e._v(" "),n("p",[n("code",[e._v("http://localhost:3000")]),e._v("で先程と同様に画面が表示されればOKです。\n      "),n("code",[e._v("views/index.pug")]),e._v("を編集して自動で画面が更新されるかを確認してみましょう。\n    ")]),e._v(" "),n("code-box",{attrs:{fileName:"views/index.pug"}},[e._v("\nextends layout\n\nblock content\n  h1= title\n  p Welcome to #{title} !!!!!  # !!!!!を追加\n    ")]),e._v(" "),n("p",[e._v("サーバーが自動で再起動されて画面が変更されていれば完了です。")])],1)}),[],!1,null,null,null);t.default=component.exports}}]);