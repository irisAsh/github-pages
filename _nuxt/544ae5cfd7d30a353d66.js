(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{300:function(n,e,o){"use strict";o.r(e);var t=o(235),r=o(236),d=o(85),v={components:{ArticlePage:t.a,CodeBox:r.a},data:function(){return{menuSections:d,categoryName:"routing_view",articleName:"express_session",datePublished:new Date("2019/03/24 22:00:00 +0900"),dateModified:new Date("2020/01/02 01:00:00 +0900"),contents:[{id:"in-link-install-mongodb",title:"MongoDBのインストール"},{id:"in-link-mongodb-nodejs-driver",title:"MongoDB Node.JS Driverを使う"},{id:"in-link-select-mongodb",title:"MongoDBからデータ数を取得する"},{id:"in-link-insert-mongodb",title:"MongoDBにデータを書き込む"},{id:"in-link-find-mongodb",title:"MongoDBでデータ詳細を取得する"},{id:"in-link-where-mongodb",title:"MongoDBで検索条件を指定する"},{id:"in-link-delete-mongodb",title:"MongoDBでデータを削除する"},{id:"in-link-update-mongodb",title:"MongoDBでデータを更新する"},{id:"in-link-summary-mongodb",title:"まとめ"}]}}},_=o(12),component=Object(_.a)(v,(function(){var n=this,e=n.$createElement,o=n._self._c||e;return o("article-page",{attrs:{menuSections:n.menuSections,contents:n.contents,categoryName:n.categoryName,articleName:n.articleName,datePublished:n.datePublished,dateModified:n.dateModified}},[o("h1",[n._v("Express入門（MongoDBの利用）")]),n._v(" "),o("div",{staticClass:"abstract"},[o("p",[n._v("\n        Expressでデーターベースを使ってデータ管理をします。\n        データベースといえばオープンソースではPostgreSQLやMySQL、\n        商用ではOracle Database、Microsoft SQL ServerなどのRDB(リレーショナルデータベース)が一般的に利用されています。\n      ")]),n._v(" "),o("p",[n._v("\n        ですが、ここではNoSQLと呼ばれるデータベースの１つMongoDBを使っていきます。\n        MongoDBを使うメリットとしては、「大量のデータを高速で扱うことができる（扱うデータの構造には依ります）」\n        「スキーマレスなデータ（ログ、スキーマ構造の変更が多いデータなど）をJSONで扱うことができる」などです。\n        JSON形式でデータを扱えるのでJavascriptとも親和性が良いです。\n      ")]),n._v(" "),o("p",[n._v("\n        逆にスキーマ間の複雑な関係性が必要な場合やデータ整合性を重視する場合、\n        トランザクションを頻繁に必要とする場合はRDBの方が向いています。\n      ")]),n._v(" "),o("p",[n._v("\n        またこの記事の完成済みのサンプルを\n        "),o("a",{attrs:{href:"https://github.com/irisAsh/express-todo-tutorial/tree/master",target:"_blank"}},[n._v("こちら")]),n._v("\n        に置いています。ソースコード全体を確認したい場合はご参照ください。\n      ")])]),n._v(" "),o("h2",{attrs:{id:"in-link-install-mongodb"}},[n._v("MongoDBのインストール")]),n._v(" "),o("p",[n._v("\n      MacOSでのインストールを説明します。\n      その他の環境では\n      "),o("a",{attrs:{href:"https://www.mongodb.com/download-center/community",target:"_blank"}},[n._v("公式サイト")]),n._v("\n      等を参照ください。\n      インストールは簡単で\n      "),o("a",{attrs:{href:"https://brew.sh/index_ja",target:"_blank"}},[n._v("Homebrew")]),n._v("\n      を使うとワンライナーで済みます。\n      下記のコマンドを実行するだけです。\n    ")]),n._v(" "),o("code-box",[n._v("\n$ brew install mongodb\n    ")]),n._v(" "),o("p",[n._v("\n      次のコマンドでインストールの確認ができます。\n      MongoDBのバージョンが確認できればインストール完了です。\n    ")]),n._v(" "),o("code-box",[n._v("\n$ mongo\nMongoDB shell version v4.0.3\n    ")]),n._v(" "),o("p",[n._v("MongoDBの起動は次のコマンドで起動できます。")]),n._v(" "),o("code-box",[n._v("\n$ mongod\n    ")]),n._v(" "),o("p",[n._v("\n      設定ファイルを参照しない場合はデフォルトで"),o("code",[n._v("/data")]),n._v("以下にデータが作成されていきます。\n      変更する場合は"),o("code",[n._v("--dbpath パス")]),n._v("で指定できます。また、ログファイルの出力先も"),o("code",[n._v("--logpath パス")]),n._v("で変更できます。\n    ")]),n._v(" "),o("p",[n._v("\n      Homebrewを使ってMongoDBをインストールした場合は"),o("code",[n._v("/usr/local/etc/mongod.conf")]),n._v("に設定ファイルが作成されています。\n      この設定ファイルを使ってデータとログの書き込み先を変更する場合は下記のように起動時に"),o("code",[n._v("--config")]),n._v("オプションを使います。\n    ")]),n._v(" "),o("code-box",[n._v("\n$ mongod --config /usr/local/etc/mongod.conf\n    ")]),n._v(" "),o("p",[n._v("\n      MongoDBをコンソール上で操作する場合は、\n      MongoDB起動後に"),o("code",[n._v("mongo")]),n._v("コマンドを実行するとコンソールが立ち上がります。\n      下記では"),o("code",[n._v("use DB名")]),n._v("コマンドを使ってDBを作成しています。\n      他DBに切り替える時もこのコマンドを使います。\n      コンソールから抜ける時は"),o("code",[n._v("quite()")]),n._v("を使います。\n    ")]),n._v(" "),o("code-box",[n._v("\n$ mongo\nMongoDB shell version v4.0.3\nconnecting to: mongodb://127.0.0.1:27017\n...\n...\n>\n> use express-todo-tutorial\nswitched to db express-todo-tutorial\n> quite()\n    ")]),n._v(" "),o("h2",{attrs:{id:"in-link-mongodb-nodejs-driver"}},[n._v("MongoDB Node.JS Driverを使う")]),n._v(" "),o("p",[n._v("\n      Node.jsでMongoDBを扱うためのライブラリがあります。\n      "),o("a",{attrs:{href:"http://mongodb.github.io/node-mongodb-native/",target:"_blank"}},[n._v("MongoDB Node.JS Driver")]),n._v("\n      や\n      "),o("a",{attrs:{href:"https://mongoosejs.com/",target:"_blank"}},[n._v("Mongoose")]),n._v("\n      が有名です。\n    ")]),n._v(" "),o("p",[n._v("\n      それぞれの特徴を比較してみると、MongoDB Driverはより高速に処理を行うことができます。\n      しかし、ライブラリ自体にスキーマ構造を作成するような機能はないので、\n      もし必要な場合は自前で用意する必要があります。\n      単にDBへ読み描きするだけであればMongoDB Driverを使うのが良いでしょう。\n    ")]),n._v(" "),o("p",[n._v("\n      対してMongooseの方は使用上でスキーマの構造を定義するので、\n      MVCモデルでWebアプリを作成するのであればMongooseを使う方が後々楽になります。\n    ")]),n._v(" "),o("p",[n._v("\n      ここではMongoDB Driverの使い方を説明します。\n      Mongooseの使い方は\n      "),o("nuxt-link",{attrs:{to:"/express/mongoose/"}},[n._v("Express入門（Mongooseの利用）")]),n._v("\n      で説明します。\n    ")],1),n._v(" "),o("h3",[n._v("インストール")]),n._v(" "),o("p",[n._v("\n      プロジェクトフォルダのトップに移って下記のコマンドを実行しましょう。\n      これだけでライブラリのインストールは完了です。\n    ")]),n._v(" "),o("code-box",[n._v("\n$ yarn add bson-ext kerberos node-gyp mongodb\n    ")]),n._v(" "),o("h3",[n._v("接続確認")]),n._v(" "),o("p",[o("code",[n._v("app.js")]),n._v("でMongoDBの接続確認を行う処理を追加しましょう。")]),n._v(" "),o("code-box",{attrs:{fileName:"app.js"}},[n._v("\nvar app = express();\n\n// 以下を追加\nvar MongoClient = require('mongodb').MongoClient;\nMongoClient.connect(\n  'mongodb://127.0.0.1:27017/express-todo-tutorial',\n  { useNewUrlParser: true },\n  function(err, client) {\n    console.log(\"Connected successfully to DB\");\n    client.close();\n  }\n);\n    ")]),n._v(" "),o("p",[n._v("\n      ブラウザからlocalhostにアクセスして、\n      Nodeサーバー上で「Connected successfully to DB」が出力されていれば成功です。\n      （アプリ起動前には"),o("code",[n._v("mongod")]),n._v("でMongoDBを起動しておく事を忘れないでください。）\n    ")]),n._v(" "),o("p",[n._v("\n      まず、"),o("code",[n._v("require('mongodb').MongoClient")]),n._v("でMongoDBのクライアントクラスをロードしています。\n    ")]),n._v(" "),o("p",[n._v("\n      次に、"),o("code",[n._v("MongoClient")]),n._v("の"),o("code",[n._v("connect")]),n._v("を使って実際にMongoDBにアクセスします。\n      第１引数には接続先のMongoDBのURLを指定します。\n      デフォルトのままであれば"),o("code",[n._v("mongodb://127.0.0.1:27017/スキーマ名")]),n._v("でアクセスできます。\n    ")]),n._v(" "),o("p",[n._v("\n      第２引数にはオプションを指定します。\n      ここでは"),o("code",[n._v("{useNewUrlParser true}")]),n._v("を指定して新しいURL解析を利用するようにしています。\n      今後のMongoDBの接続URL形式更新に伴い指定する必要があります。\n    ")]),n._v(" "),o("p",[n._v("\n      指定しない場合は以下のような警告が表示されます。\n    ")]),n._v(" "),o("code-box",[n._v("\n(node:32386) DeprecationWarning: current URL string parser is deprecated, and will be removed in a future version. To use the new parser, pass option { useNewUrlParser: true } to MongoClient.connect.\n    ")]),n._v(" "),o("p",[n._v("\n      そして"),o("code",[n._v("connect")]),n._v("の第３引数には接続後に実行されるコールバックを指定します。\n      今回は接続確認なのでログ出力後に接続を切断する処理を書いています。\n    ")]),n._v(" "),o("h2",{attrs:{id:"in-link-select-mongodb"}},[n._v("MongoDBからデータ数を取得する")]),n._v(" "),o("p",[n._v("\n      MongoDBからデータを取得し、TODOの件数を画面に表示します。\n      表示内容の詳細については\n      "),o("nuxt-link",{attrs:{to:"/express/editrouting/"}},[n._v("Expressのルーティングの設定")]),n._v("\n      をご参照ください。\n    ")],1),n._v(" "),o("h3",[n._v("DBアクセス部品の作成")]),n._v(" "),o("p",[n._v("\n      MongoDBにアクセスする処理はデータ取得以外にも追加や削除などでも度々行うので、\n      共通化して部品にしておきましょう。\n      プロジェクト直下に"),o("code",[n._v("lib")]),n._v("フォルダを作成して、\n      "),o("code",[n._v("constants.js")]),n._v(", "),o("code",[n._v("dbUtils.js")]),n._v("を用意しましょう。\n    ")]),n._v(" "),o("h3",[n._v("フォルダ構造")]),n._v(" "),o("code-box",[n._v("\n.\n├── app.js\n├── bin\n│   └── www\n├── controllers\n│   ├── homeController.js\n│   └── todoController.js\n└── lib\n    ├── constants.js\n    └── dbUtils.js\n    ")]),n._v(" "),o("h3",[n._v("constants.js")]),n._v(" "),o("p",[n._v("\n      アプリケーション定数の定義をまとめておくために"),o("code",[n._v("constants.js")]),n._v("を用意しています。\n      "),o("a",{attrs:{href:"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze",target:"_blank"}},[n._v("Object.freeze()")]),n._v("\n      を使うとオブジェクトの値変更などを禁止してくれます。\n    ")]),n._v(" "),o("code-box",{attrs:{fileName:"lib/constants.js"}},[n._v("\nmodule.exports = Object.freeze({\n  DB_URL: 'mongodb://127.0.0.1:27017/',\n  DB_NAME: 'express-todo-tutorial'\n});\n    ")]),n._v(" "),o("h3",[n._v("dbUtils.js")]),n._v(" "),o("code-box",{attrs:{fileName:"lib/dbUtils.js"}},[n._v("\nvar constants = require('./constants');\nvar mongodb = require('mongodb');\nvar MongoClient = mongodb.MongoClient;\n\nexports.connectionToDB = function() {\n  return new Promise(function(resolve, reject) {\n    MongoClient.connect(\n      constants.DB_URL + constants.DB_NAME,\n      { useNewUrlParser: true },\n      function(error, client) {\n        if (error) {\n          reject(error);\n        } else {\n          var db = client.db(constants.DB_NAME);\n          resolve({ client, db });\n        }\n      }\n    );\n  });\n};\n    ")]),n._v(" "),o("p",[n._v("\n      MongoDB Driverの"),o("code",[n._v("mongodb.MongoClient")]),n._v("を使ってMongoDBにアクセスします。\n      アクセスする関数"),o("code",[n._v("connectionToDB")]),n._v("は戻り値にPromiseを返すようにしています。\n    ")]),n._v(" "),o("p",[n._v("\n      ExpressではDBの接続などが非同期処理になっているので、\n      Promiseを使わないとMongoDBからデータの件数を取得を呼び出してから、\n      画面描画を行なっても基本的には画面描画の方が先に終わるので、\n      画面に表示される件数は0件となってしまいます。\n    ")]),n._v(" "),o("p",[n._v("\n      そこでPromiseを使ってデータが取得が完了した後に画面の描画を開始するように実装していく必要があります。\n    ")]),n._v(" "),o("p",[n._v("\n      MongoDBのアクセスについては先程の内容と同じです。\n      接続後の処理は"),o("code",[n._v("client.db(constants.DB_NAME)")]),n._v("でDBインスタンスを取得し、\n      接続成功時として"),o("code",[n._v("{ clien, db }")]),n._v("でMongoClientとDBのインスタンを返すようにしています。\n      この"),o("code",[n._v("db")]),n._v("の持つDB操作関数を使ってデータの取得などを実装できます。\n    ")]),n._v(" "),o("h3",[n._v("件数の取得")]),n._v(" "),o("p",[n._v("\n      さて作成したDBアクセス部品を"),o("code",[n._v("controllers/homeController.js")]),n._v("に組み込みましょう。\n      まずはコードから。\n    ")]),n._v(" "),o("code-box",{attrs:{fileName:"controllers/homeController.js"}},[n._v("\nvar dbUtils = require('../lib/dbUtils');\n\nexports.index = function(req, res) {\n  var dbClient;\n\n  var countTodos = function(db) {\n    return new Promise(function(resolve, reject) {\n      db.collection('todos')\n      .countDocuments(\n        function(error, count) {\n          if (error) {\n            reject(error);\n          } else {\n            resolve(count);\n          }\n        }\n      );\n    });\n  }\n\n  dbUtils.connectionToDB()\n  .then(function({ client, db }) {\n    dbClient = client;\n    return countTodos(db);\n  })\n  .then(function(result) {\n    res.render('home/index', {\n      remainingTodoCount: result,\n      todayTodoCount: 2,\n      completedTodoCount: 1\n    });\n  })\n  .catch(function(err) {\n    console.log(err);\n    next(err);\n  })\n  .then(function() {\n    if (dbClient) {\n      dbClient.close();\n    }\n  });\n};\n    ")]),n._v(" "),o("p",[n._v("\n      まずTodoデータ全体の件数を取得する"),o("code",[n._v("countTodos")]),n._v("を定義しています。\n      こちらもアクセス部品と同様Promiseを返すようにしています。\n      引数ではDBインスタンスを受け取るようにし、\n      受け取ったDBインスタンスを使って"),o("code",[n._v("db.collection('todos')")]),n._v("で\n      Todoコレクション("),o("code",[n._v("todos")]),n._v("と名付けました)のインスタンスを取得できます。\n    ")]),n._v(" "),o("p",[n._v("\n      また、コレクション関数の"),o("code",[n._v("countDocuments")]),n._v("でコレクションのデータ件数が取得できます。\n      "),o("code",[n._v("countDocuments")]),n._v("の引数には検索条件を渡すことができます。ここでは一旦全件の件数を取得するようにします。\n      検索条件は後ほど設定します。\n    ")]),n._v(" "),o("p",[n._v("\n      さて、実際に処理の開始は"),o("code",[n._v("dbUtils.connectionToDB()")]),n._v("のアクセスから始まります。\n      アクセス後に取得したDBインスタンスを使って"),o("code",[n._v("countTodos(db)")]),n._v("の呼び出しをします。\n      "),o("code",[n._v("dbClient = client;")]),n._v("としてMongoClientを一時的に保存していますが、\n      これは処理の最後で"),o("code",[n._v("dbClient.close();")]),n._v("としてDB接続を閉じるために保存しています。\n    ")]),n._v(" "),o("p",[n._v("\n      最後に取得した件数を"),o("code",[n._v("remainingTodoCount")]),n._v("の値として設定すれば件数取得の完了です。\n      現在はデータがないので画面には0件と表示されるでしょう。\n    ")]),n._v(" "),o("amp-img",{attrs:{src:"/images/express/mongodb/get_data_count.png",alt:"Todo件数取得",title:"Todo件数取得",width:"640",height:"550",layout:"responsive"}}),n._v(" "),o("h2",{attrs:{id:"in-link-insert-mongodb"}},[n._v("MongoDBにデータを書き込む")]),n._v(" "),o("p",[n._v("\n      データ件数を取得できるようになりましたが、\n      今のままではデータを追加できないので一覧は0件のままです。\n      データ追加を実装して正しく件数が表示されることを確認していきましょう。\n    ")]),n._v(" "),o("p",[n._v("\n      Todoのフォーム画面は\n      "),o("nuxt-link",{attrs:{to:"/express/editrouting/"}},[n._v("Expressのルーティングの設定")]),n._v("\n      で既に用意しています。\n      残りは「submit」ボタンを押した後の処理の実装です。\n    ")],1),n._v(" "),o("h3",[n._v("body-parser")]),n._v(" "),o("p",[n._v("\n      POSTのリクエストボディからパラメータを解析し必要データを取り出す必要があるのですが、\n      この取り出しを簡単にできる\n      "),o("a",{attrs:{href:"https://github.com/expressjs/body-parser",target:"_blank"}},[n._v("body-parser")]),n._v("\n      という外部ミドルウェアが用意されています。\n      body-parserを使うと"),o("code",[n._v("req.body")]),n._v("というプロパティで参照できるようになります。\n    ")]),n._v(" "),o("code-box",[n._v("\n$ yarn add body-parser\n    ")]),n._v(" "),o("p",[o("code",[n._v("app.js")]),n._v("を編集してミドルウェアを組み込みましょう。")]),n._v(" "),o("code-box",{attrs:{fileName:"app.js"}},[n._v("\n省略\n...\n// ミドルウェアをインポート\nvar bodyParser = require('body-parser');\n...\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\n// body-parserの設定\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.use('/', indexRouter);\n...\n    ")]),n._v(" "),o("h3",[n._v("routes/todo.js")]),n._v(" "),o("p",[n._v("\n      データの追加処理はPOSTリクエストなので\n      "),o("code",[n._v("routes/todo.js")]),n._v("では"),o("code",[n._v("router.post")]),n._v("を使って\n      "),o("code",[n._v("/create")]),n._v("のPOST処理を登録しましょう。\n    ")]),n._v(" "),o("code-box",{attrs:{fileName:"routes/todo.js"}},[n._v("\n省略\n...\nrouter.get('/create', todoController.createGet);\nrouter.post('/create', todoController.createPost);\n    ")]),n._v(" "),o("h3",[n._v("controllers/todoController.js")]),n._v(" "),o("p",[n._v("\n      MongoDBへの接続はこれまでの通りです。\n      先程の件数取得と異なるのはデータ追加関数の定義箇所となります。\n    ")]),n._v(" "),o("code-box",{attrs:{fileName:"controllers/todoController.js"}},[n._v("\n省略\n...\nexports.createPost = function(req, res) {\n  var dbClient;\n  var createOneTodo = function(db, data) {\n    return new Promise(function(resolve, reject) {\n      db.collection('todos')\n      .insertOne(data, function(error, r) {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(r);\n        }\n      });\n    });\n  };\n\n  dbUtils.connectionToDB()\n  .then(function({ client, db }) {\n    dbClient = client;\n    var { title, description, status, estimatedDate } = req.body;\n    return createOneTodo(db, {\n      title,\n      description,\n      status,\n      estimatedDate: new Date(estimatedDate)\n    });\n  })\n  .then(function(result) {\n    res.redirect('/todo');\n  })\n  .catch(function(err) {\n    console.log(err);\n    next(err);\n  })\n  .then(function() {\n    if (dbClient) {\n      dbClient.close();\n    }\n  });\n};\n    ")]),n._v(" "),o("p",[n._v("\n      データ追加関数"),o("code",[n._v("createOneTodo")]),n._v("はDBインスタンスと挿入データとしています。\n      データを1件追加するにはコレクションの関数"),o("code",[n._v("insertOne")]),n._v("を利用します。\n      第１引数に挿入データを第２引数には追加後のコールバックです。\n      コールバックには追加した結果が渡されます。\n      追加の成功件数や追加データなどが参照できます。\n      ここではPromiseで結果情報を参照できるようにしていますが特には使用していません。\n      "),o("code",[n._v("createOneTodo")]),n._v("に渡すデータは"),o("code",[n._v("req.body")]),n._v("から拾って、適宜加工してから渡します。\n    ")]),n._v(" "),o("p",[n._v("\n      最後にPOST処理なのでデータ登録完了後は"),o("code",[n._v("res.redirect('/todo');")]),n._v("でTodoの一覧画面にリダイレクトしておきましょう。\n    ")]),n._v(" "),o("p",[n._v("\n      さて、実際にTodoを追加してみましょう。\n      追加して行く度に「残りのTODO」の件数がカウントされていくのが確認できます。\n    ")]),n._v(" "),o("h2",{attrs:{id:"in-link-find-mongodb"}},[n._v("MongoDBでデータ詳細を取得する")]),n._v(" "),o("p",[n._v("\n      データ追加ができるようになりました。\n      今度は「残りのTODO」の一覧画面にTODOの詳細が表示されるようにしましょう。\n    ")]),n._v(" "),o("h3",[n._v("controllers/todoController.js")]),n._v(" "),o("code-box",{attrs:{fileName:"controllers/todoController.js"}},[n._v("\n省略\n...\nexports.index = function(req, res, next) {\n  var dbClient;\n\n  var getTodos = function(db) {\n    return new Promise(function(resolve, reject) {\n      db.collection('todos')\n      .find({})\n      .toArray(function(error, docs) {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(docs);\n        }\n      });\n    });\n  }\n\n  dbUtils.connectionToDB()\n  .then(function({ client, db }) {\n   dbClient = client;\n   return getTodos(db);\n  })\n  .then(function(result) {\n    res.render('todo/index', {\n      todos: result\n    });\n  })\n  .catch(function(err) {\n    console.log(err);\n    next(err);\n  })\n  .then(function() {\n    if (dbClient) {\n      dbClient.close();\n    }\n  });\n};\n    ")]),n._v(" "),o("p",[n._v("\n      データ検索はコレクションの"),o("code",[n._v("find")]),n._v("関数でできます。\n      引数には検索条件を設定します。\n      空オブジェクトを指定あるいは何も指定しない場合は全件検索になります。\n      検索後は検索結果をそのままビュー側に渡しています。\n    ")]),n._v(" "),o("p",[n._v("\n      「残りのTODO」を取得する場合は検索条件を指定する必要がありますが、\n      ここでは一旦全件検索しておきます。検索条件は後で設定します。\n    ")]),n._v(" "),o("h3",[n._v("views/todo/index.pug")]),n._v(" "),o("p",[o("nuxt-link",{attrs:{to:"/express/editrouting/"}},[n._v("Expressのルーティングの設定")]),n._v("では、\n      画面は固定の文字を表示していたので、データの中身を表示するように編集しましょう。\n    ")],1),n._v(" "),o("code-box",{attrs:{fileName:"views/todo/index.pug"}},[n._v("\n省略\n...\n  h1 残りのTODO\n  if !!todos\n    ul\n      each todo in todos\n        li\n        p #{todo.title}\n        p #{todo.description}\n        p #{todo.status}\n        p #{todo.estimatedDate}\n        p\n          | [\n          a(href='') 編集\n          | ]\n        p\n          | [\n          a(href='') 削除\n          | ]\n    ")]),n._v(" "),o("p",[n._v("追加画面で登録した内容が表示されれば成功です。")]),n._v(" "),o("amp-img",{attrs:{src:"/images/express/mongodb/get_todo_list.png",alt:"Todo件数取得",title:"Todo件数取得",width:"640",height:"820",layout:"responsive"}}),n._v(" "),o("h2",{attrs:{id:"in-link-where-mongodb"}},[n._v("MongoDBで検索条件を指定する")]),n._v(" "),o("p",[n._v("\n      さて、データ取得・追加まで一通りできるようになりました。\n      次は検索条件を指定して必要とするデータのみ取得するようにしてみましょう。\n      検索条件は様々な箇所で使い回しをする可能性があるので、\n      クエリ作成の処理は共通化しておきましょう。\n      lib配下に"),o("code",[n._v("todoQueries.js")]),n._v("を作成します。\n    ")]),n._v(" "),o("h3",[n._v("lib/todoQueries.js")]),n._v(" "),o("code-box",{attrs:{fileName:"lib/todoQueries.js"}},[n._v("\nexports.completed = function() {\n  return { status: { $eq: 'completed' } };\n};\nexports.notCompleted = function() {\n  return { status: { $ne: 'completed' } };\n};\nexports.today = function() {\n  var now = new Date();\n  var start = new Date(new Date(now).setHours(0,0,0,0));\n  var end = new Date(new Date(now).setHours(23,59,59,999));\n  return {\n    estimatedDate: {\n      $gte: start,\n      $lte: end\n    }\n  };\n};\n    ")]),n._v(" "),o("p",[n._v("\n      MongoDB Driverでは、MongoDBコンソールで扱うクエリと同様の書き方で条件を指定できます。\n      基本的に条件は"),o("code",[n._v("{ プロパティ: 値 }")]),n._v("の形式か"),o("code",[n._v("{ プロパティ: { 比較文字: 値 } }")]),n._v("の形式で指定できます。\n      以下に一部ですが比較文字の一覧を記載しておきます。\n    ")]),n._v(" "),o("table",[o("tr",[o("th",[n._v("比較文字")]),n._v(" "),o("th",[n._v("詳細")])]),n._v(" "),o("tr",[o("td",[n._v("$eq")]),n._v(" "),o("td",[n._v("値と同値のデータを条件に検索します")])]),n._v(" "),o("tr",[o("td",[n._v("$nq")]),n._v(" "),o("td",[n._v("値と異なるデータを条件に検索します")])]),n._v(" "),o("tr",[o("td",[n._v("$gt")]),n._v(" "),o("td",[n._v("値より大きいデータを条件に検索します")])]),n._v(" "),o("tr",[o("td",[n._v("$gte")]),n._v(" "),o("td",[n._v("値と同値または値より大きいデータを条件に検索します")])]),n._v(" "),o("tr",[o("td",[n._v("$lt")]),n._v(" "),o("td",[n._v("値より小さいデータを条件に検索します")])]),n._v(" "),o("tr",[o("td",[n._v("$lte")]),n._v(" "),o("td",[n._v("値と同値または値より小さいデータを条件に検索します")])])]),n._v(" "),o("p",[n._v("\n      「残りのTODO」を検索する条件はステータスが"),o("code",[n._v("completed")]),n._v("でないとするので、\n      その条件"),o("code",[n._v("{ status: { $ne: 'completed' } }")]),n._v("を返す"),o("code",[n._v("notCompleted")]),n._v("関数を定義しています。\n    ")]),n._v(" "),o("p",[n._v("\n      同様に「今日のTODO」の条件として"),o("code",[n._v("today")]),n._v("関数を、\n      「完了済TODO」の条件として"),o("code",[n._v("completed")]),n._v("関数をそれぞれ用意しています。\n    ")]),n._v(" "),o("h3",[n._v("controllers/todoController.js")]),n._v(" "),o("p",[n._v("条件作成部品は用意できたので、実際に検索時に条件を指定してみましょう。")]),n._v(" "),o("code-box",{attrs:{fileName:"controllers/todoController.js"}},[n._v("\n省略\n...\n// クエリ作成部品をインポート\nvar todoQueries = require('../lib/todoQueries');\n\n// 変更\nvar getTodos = function(db, condition) {\n  return new Promise(function(resolve, reject) {\n    db.collection('todos')\n    .find(condition)\n    .toArray(function(error, docs) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(docs);\n      }\n    });\n  });\n}\n\nexports.index = function(req, res, next) {\n  var dbClient;\n\n  dbUtils.connectionToDB()\n  .then(function({ client, db }) {\n    dbClient = client;\n    // 変更\n    return getTodos(db, todoQueries.notCompleted());\n  })\n  .then(function(result) {\n    res.render('todo/index', {\n...\n\n    ")]),n._v(" "),o("p",[n._v("\n      条件検索の方法はコレクション関数"),o("code",[n._v("find")]),n._v("の引数に条件のオブジェクトを渡すことで実行できます。\n      Todoを取得する関数は「残りのTODO」「今日のTODO」「完了済TODO」と使いまわせるようにファイル内でグローバルに定義し直します。\n      さらに、第２引数には条件を指定できるようにしておきます。指定した条件を"),o("code",[n._v("find")]),n._v("関数に渡せば完了です。\n      あとは、"),o("code",[n._v("getTodos")]),n._v("の呼び出し時にクエリ作成部品で指定するクエリを渡せば検索できます。\n    ")]),n._v(" "),o("p",[n._v("\n      データ追加でステータスが"),o("code",[n._v("completed")]),n._v("とそれ以外のデータを作成してみてください。\n      "),o("code",[n._v("/todo")]),n._v("では"),o("code",[n._v("completed")]),n._v("以外のTodoしか表示されていないことが確認できます。\n    ")]),n._v(" "),o("p",[n._v("同様にして「今日のTODO」「完了済TODO」も実装してみてください。")]),n._v(" "),o("h3",[n._v("件数一覧画面に検索条件を追加する")]),n._v(" "),o("p",[n._v("\n      件数一覧画面にも検索条件を組み込みましょう。\n      実装方法は"),o("code",[n._v("find")]),n._v("の時と同様です。\n      "),o("code",[n._v("countDocuments")]),n._v("の関数にクエリを渡すだけです。\n    ")]),n._v(" "),o("code-box",{attrs:{fileName:"controllers/homeController.js"}},[n._v("\n省略\n...\nexports.index = function(req, res) {\n  var dbClient;\n\n  // 条件を設定できるように変更\n  var countTodos = function(db, condition) {\n    return new Promise(function(resolve, reject) {\n      db.collection('todos')\n      .countDocuments(\n        // 条件を渡す\n        condition,\n        function(error, count) {\n          if (error) {\n            reject(error);\n          } else {\n            resolve(count);\n          }\n        }\n      );\n    });\n  }\n\n  dbUtils.connectionToDB()\n  .then(function({ client, db }) {\n    dbClient = client;\n    // ３つの検索が全て終わるまで待つようにする\n    return Promise.all([\n      countTodos(db, todoQueries.notCompleted()),\n      countTodos(db, todoQueries.today()),\n      countTodos(db, todoQueries.completed()),\n    ]);\n  })\n  .then(function(result) {\n    res.render('home/index', {\n      // 取得した件数をそれぞれ設定\n      remainingTodoCount: result[0],\n      todayTodoCount: result[1],\n      completedTodoCount: result[2]\n    });\n  })\n...\n\n    ")]),n._v(" "),o("p",[o("code",[n._v("countTodos")]),n._v("の変更は先程の"),o("code",[n._v("getTodos")]),n._v("と同様です。\n      注意するのは"),o("code",[n._v("countTodos")]),n._v("を呼び出す際に３つの検索が全て終わってから、\n      次の画面描画処理に移るようにしないといけないことです。\n    ")]),n._v(" "),o("p",[n._v("\n      そこで"),o("code",[n._v("Promise.all")]),n._v("を使ってこれを実装しています。\n      "),o("code",[n._v("all")]),n._v("には実行するPromiseの配列を指定します。\n      すると実行結果として指定したPromiseの結果が配列で取得できます\n      （結果の配列の中身は"),o("code",[n._v("all")]),n._v("で渡したPromiseの順で返ってきます）\n    ")]),n._v(" "),o("p",[o("code",[n._v("/home")]),n._v("の件数が期待どうりに取得できていれば成功です。")]),o("p"),o("h2",{attrs:{id:"in-link-delete-mongodb"}},[n._v("MongoDBでデータを削除する")]),n._v(" "),o("p",[n._v("\n      続いてはTodoの削除機能を追加します。\n      MongoDBでデータを1件削除するには"),o("code",[n._v("deleteOne")]),n._v("を使います。\n      引数に削除データに合致する条件と削除後のコールバックを指定します。\n    ")]),n._v(" "),o("p",[n._v("\n      ここでは条件としてデータのIDを使用します。\n      このIDはデータを追加した際にMongoDBが自動で生成するものです。\n      データ取得で参照されるIDは文字列となっていますが、\n      検索条件に指定する場合は、MongoDBのObjectIDのクラスに直さないといけません。\n      DB部品に文字列IDをObjectIDに変換する関数を追加しておきましょう。\n    ")]),n._v(" "),o("h3",[n._v("lib/dbUtils.js")]),n._v(" "),o("code-box",{attrs:{fileName:"lib/dbUtils.js"}},[n._v("\n省略\n...\nexports.createObjectID = function(id) {\n  return new mongodb.ObjectID(id);\n}\n    ")]),n._v(" "),o("h3",[n._v("controllers/todoController.js")]),n._v(" "),o("p",[n._v("データ追加・取得同様に削除機能のコントローラーを追加しましょう。")]),n._v(" "),o("code-box",{attrs:{fileName:"controllers/todoController.js"}},[n._v("\n省略\n...\nexports.delete = function(req, res) {\n  var dbClient;\n  var deleteOneTodo = function(db, id) {\n    return new Promise(function(resolve, reject) {\n      db.collection('todos')\n      // IDを検索条件にデータを削除\n      .deleteOne({ _id: dbUtils.createObjectID(id) }, function(error, r) {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(r);\n        }\n      });\n    });\n  };\n\n  dbUtils.connectionToDB()\n  .then(function({ client, db }) {\n    dbClient = client;\n    // アクセスURLno「/todo/ID文字列」からID文字列を取得しています\n    var { id } = req.params;\n    return deleteOneTodo(db, id);\n  })\n  .then(function(result) {\n    res.redirect('/todo');\n  })\n  .catch(function(err) {\n    console.log(err);\n    next(err);\n  })\n  .then(function() {\n    if (dbClient) {\n      dbClient.close();\n    }\n  });\n};\n    ")]),n._v(" "),o("h3",[n._v("routes/todo.js")]),n._v(" "),o("p",[n._v("\n      削除のためのリクエストは「/todo/ID文字列」のDELETEリクエストとします。\n      "),o("code",[n._v("/:id")]),n._v("とすることで「/todo/xxxxx」形式のDELETEリクエストで来た時にxxxxxをパラメータ（パラメータ名はid）として拾えるようになります。\n    ")]),n._v(" "),o("code-box",{attrs:{fileName:"routes/todo.js"}},[n._v("\n省略\n...\nrouter.delete('/:id', todoController.delete);\n    ")]),n._v(" "),o("p",[n._v("\n      さて、あとは画面側の削除ボタンを作成するだけですが、HTMLのformはDELETEリクエストを発行することができません。\n      そのためformから送信した時点ではPOSTとして送信し、受け取り時にDELETEリクエストに変換するようにしなければなりません。\n    ")]),n._v(" "),o("p",[o("a",{attrs:{href:"https://github.com/expressjs/method-override",target:"_blank"}},[n._v("method-override")]),n._v("\n      というパッケージを利用することで実装することができます。\n    ")]),n._v(" "),o("h3",[n._v("インストール")]),n._v(" "),o("code-box",[n._v("\n$ yarn add method-override\n    ")]),n._v(" "),o("h3",[n._v("app.js")]),n._v(" "),o("code-box",{attrs:{fileName:"app.js"}},[n._v("\n省略\n...\n// 追加\nvar methodOverride = require('method-override')\n...\n...\n// 追加\napp.use(methodOverride('_method'))\n\napp.use('/', indexRouter);\n    ")]),n._v(" "),o("h3",[n._v("views/todo/index.pug")]),n._v(" "),o("code-box",{attrs:{fileName:"views/todo/index.pug"}},[n._v("\n省略\n...\n    p\n      | [\n      a(href='') 編集\n      | ]\n      form(method='POST' action=`/todo/${todo._id}?_method=DELETE`)\n        div\n          span [\n          input(\n            type='submit'\n            value='削除'\n            style={\n              'border': 'none',\n              'padding': 0,\n              'font-size': '14px',\n              'text-decoration': 'underline',\n              'color': '#00B7FF'\n            })\n          span ]\n    ")]),n._v(" "),o("p",[n._v("\n      formのaction属性には"),o("code",[n._v("/todo/TodoのID?_method=DELETE")]),n._v("と指定しています。\n      パラメータの"),o("code",[n._v("?_method=DELETE")]),n._v("を付けることで受け取った後にPOSTリクエストをDELETEリクエストに変換されるようになっています。\n    ")]),n._v(" "),o("p",[n._v("以上で完了です。削除ボタンを押して画面から削除対象のTodoが消えればOKです。")]),n._v(" "),o("h2",{attrs:{id:"in-link-update-mongodb"}},[n._v("MongoDBでデータを更新する")]),n._v(" "),o("p",[n._v("\n      残りの機能はTODOの編集機能です。基本的には他のDB操作と同じです。\n      更新のフォーム画面(GET)と更新処理(PATCH)を用意する必要があります。\n      それぞれ"),o("code",[n._v("updateGet")]),n._v(", "),o("code",[n._v("updatePatch")]),n._v("としてコントローラーを用意します。\n    ")]),n._v(" "),o("h3",[n._v("routes/todo.js")]),n._v(" "),o("code-box",{attrs:{fileName:"routes/todo.js"}},[n._v("\nrouter.get('/update/:id', todoController.updateGet);\nrouter.patch('/update/:id', todoController.updatePatch);\n    ")]),n._v(" "),o("h3",[n._v("views/todo/update.pug")]),n._v(" "),o("p",[n._v("\n      基本的にはコントローラーからtodoデータをもらってそれぞれinputタグのvalueに設定するだけです。\n      但し、予定時刻だけ"),o("code",[n._v("estimatedDateISOS")]),n._v("となっています。\n      これは日付データの値をそのまま"),o("code",[n._v("datetime-local")]),n._v("型のinputに設定することができないため、\n      コントローラー側で値を加工してから渡してきています。\n      加工値のプロパティ名は"),o("code",[n._v("estimatedDateISOS")]),n._v("と名付けています。\n    ")]),n._v(" "),o("p",[n._v("\n      また、削除の時と同様にフォームからPATCHリクエストを送信するために一度メソッドをPOSTにした上で、PATCHに書き換えるようにしています。\n    ")]),n._v(" "),o("code-box",{attrs:{fileName:"views/todo/update.pug"}},[n._v("\nextends ../layout\n\nblock content\n  h1 TODO 作成\n\n  form(method='POST' action=`/todo/update/${todo._id}?_method=PATCH`)\n  div\n    label(for='title') タイトル：\n    input#title(\n      type='text'\n      placeholder='やること'\n      name='title'\n      required='true'\n      value=todo.title\n    )\n  div\n    label(for='description') 詳細説明：\n    input#description(\n      type='text'\n      placeholder='買い物に行く'\n      name='description'\n      value=todo.description\n    )\n  div\n    label(for='status') ステータス：\n    select#status(name='status')\n      option(\n        value='backlog'\n        selected= 'backlog' === todo.status\n      ) 未着手\n      option(\n        value='progress'\n        selected= 'progress' === todo.status\n      ) 着手中\n      option(\n        value='completed'\n        selected= 'completed' === todo.status\n      ) 完了済\n  div\n    label(for='estimatedDate') 予定時刻：\n    input#estimatedDate(\n      type='datetime-local'\n      name='estimatedDate'\n      value=todo.estimatedDateISOS\n    )\n  div\n    input(type='submit')\n\n  br\n  a(href='/') 戻る\n    ")]),n._v(" "),o("h3",[n._v("lib/dateUtils.js")]),n._v(" "),o("p",[n._v("\n      コントローラーの作成前に先程説明した日付データの値を加工するヘルパーを用意します。\n      データのままでは"),o("code",[n._v("YYYY-MM-DDThh:mm:ss.sssZ")]),n._v("となっているのですが、\n      フォームでは"),o("code",[n._v("YYYY-MM-DDThh:mm:ss")]),n._v("という形式である必要があります。\n      形式変換は後ろの"),o("code",[n._v(".sssZ")]),n._v("を省くだけで良いのですが、\n      共通部品なので渡された引数が時刻として正しいか一度確認しています。\n    ")]),n._v(" "),o("code-box",{attrs:{fileName:"lib/dateUtils.js"}},[n._v("\nexports.date2ISOS = function (dateStr) {\n  var dateObj = new Date(dateStr);\n  if (!dateObj || dateObj.toString() === 'Invalid Date') {\n    return '';\n  }\n  return dateObj.toISOString().substr(0,19);\n}\n    ")]),n._v(" "),o("h3",[n._v("controllers/todoController.js")]),n._v(" "),o("p",[n._v("\n      さてフォームのためのコントローラーですが、編集対象のデータを１つ取得する必要があります。\n      そのためMongoDBの"),o("code",[n._v("findOne")]),n._v("を使っています。引数には検索条件が必要です。\n      ここではMongoDBのデータIDを指定しています。\n      描画関数には先程作成した部品で日付変換をしてからTodoデータを渡しています。\n    ")]),n._v(" "),o("code-box",{attrs:{fileName:"controllers/todoController.js"}},[n._v("\n省略\n...\nvar dateUtils = require('../lib/dateUtils');\n...\n// 更新フォームのコントローラー\nexports.updateGet = function(req, res, next) {\n  var dbClient;\n  var findOne = function(db, id) {\n    return new Promise(function(resolve, reject) {\n      db.collection('todos')\n      .findOne(\n        { _id: dbUtils.createObjectID(id) },\n        function(error, docs) {\n          if (error) {\n            reject(error);\n          } else {\n            resolve(docs);\n          }\n        }\n      );\n    });\n  }\n\n  dbUtils.connectionToDB()\n  .then(function({ client, db }) {\n    dbClient = client;\n    var { id } = req.params;\n    return findOne(db, id);\n  })\n  .then(function(result) {\n    res.render('todo/update', {\n      todo: {\n        ...result,\n        estimatedDateISOS: dateUtils.date2ISOS(result.estimatedDate)\n      }\n    });\n  })\n  .catch(function(err) {\n    console.log(err);\n    next(err);\n  })\n  .then(function() {\n    if (dbClient) {\n      dbClient.close();\n    }\n  });\n}\n    ")]),n._v(" "),o("h3",[n._v("データ更新処理")]),n._v(" "),o("p",[n._v("\n      MongoDBで１つのデータを更新するにはコレクション関数の"),o("code",[n._v("updateOne")]),n._v("を使います。\n      引数には検索条件、更新値、更新後のコールバックを指定します。\n      ここでは検索条件は削除の時と同様データのIDを使っています。MongoDBのObjectIDに注意です。\n      更新値の書き方は"),o("code",[n._v("{ $set: データのオブジェクト }")]),n._v("となります。\n    ")]),n._v(" "),o("h3",[n._v("controllers/todoController.js")]),n._v(" "),o("code-box",{attrs:{fileName:"controllers/todoController.js"}},[n._v("\n省略\n...\n// 更新処理のコントローラー\nexports.updatePatch = function(req, res, next) {\n  var dbClient;\n  var updateOne = function(db, id, data) {\n    return new Promise(function(resolve, reject) {\n      db.collection('todos')\n      // コレクションのupdateOneを使う\n      .updateOne(\n        { _id: dbUtils.createObjectID(id) },\n        { $set: data },\n        function(error, docs) {\n          if (error) {\n            reject(error);\n          } else {\n            resolve(docs);\n          }\n        }\n      );\n    });\n  }\n\n  dbUtils.connectionToDB()\n  .then(function({ client, db }) {\n    dbClient = client;\n    var { id } = req.params;\n    var { title, description, status, estimatedDate } = req.body;\n    return updateOne(db, id, {\n      title,\n      description,\n      status,\n      estimatedDate: new Date(estimatedDate)\n    });\n  })\n  .then(function(result) {\n    res.redirect('/todo');\n  })\n  .catch(function(err) {\n    console.log(err);\n    next(err);\n  })\n  .then(function() {\n    if (dbClient) {\n      dbClient.close();\n    }\n  });\n    ")]),n._v(" "),o("h2",{attrs:{id:"in-link-summary-mongodb"}},[n._v("まとめ")]),n._v(" "),o("p",[n._v("\n      以上でMongoDBを使ったTodo機能の実装が完了です。\n      最低限の機能となっていますが、MongoDBの基本的な使い方が確認できたのではないでしょうか。\n      紹介したものはMongoDBの一部ですので、機能を拡張していくと必要になる実装がでてくるかと思います。\n      その場合はMongoDB Driverの\n      "),o("a",{attrs:{href:"http://mongodb.github.io/node-mongodb-native/",target:"_blank"}},[n._v("公式サイト")]),n._v("\n      を適宜参照していくのが良いでしょう。\n    ")])],1)}),[],!1,null,null,null);e.default=component.exports}}]);