(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{247:function(e){e.exports=JSON.parse('{"tutorial":{"category":"入門","categoryLabel":"React Native","categoryPath":"/react_native/","iconClass":"fab fa-react","menus":{"initialize":{"linkPath":"/react_native/initialize/","ogpImage":"/images/react_native/initialize/ogp.png","title":"プロジェクトの作成（ Expo ）","subTitle":"expo init","menuIcon":"fab fa-react","headerTitle":"React Native チュートリアル（プロジェクトの作成 Expo ）","headerDescription":"React Native でのプロジェクト作成を説明していきます。React Nativeで開発を始めるには、Expo利用とReact Native CLI利用の２通りの方法があります。ここではExpo利用の開発を説明していきます。"},"form_screen":{"linkPath":"/react_native/form_screen/","ogpImage":"/images/react_native/form_screen/ogp.png","title":"フォーム画面の作成","subTitle":"State, Style","menuIcon":"fas fa-tasks","headerTitle":"React Native チュートリアル（TODOアプリのフォーム画面作成 ）","headerDescription":"React Native でTODOアプリで必要事項を入力するフォーム画面作成する方法を説明します。主に React Native での state や style、いくつかのAPIの使い方を説明していきます。"},"use_props":{"linkPath":"/react_native/use_props/","ogpImage":"/images/react_native/use_props/ogp.png","title":"コンポーネント化","subTitle":"Props","menuIcon":"fas fa-tools","headerTitle":"コンポーネントを作って共通化する（ React Native ）","headerDescription":"React の重要な機能の１つコンポーネントを利用して、重複している描画処理を共通化してコードの整理をしてみましょう。コンポーネントを作成して再利用することで重複するコードをなくすことができます。"},"use_react_navigation":{"linkPath":"/react_native/use_react_navigation/","ogpImage":"/images/react_native/use_react_navigation/ogp.png","title":"画面遷移の利用","subTitle":"React Navitation","menuIcon":"fas fa-chevron-circle-right","headerTitle":"React Navigation を使って画面遷移を実装する（Expo）","headerDescription":"前回作成したTODOアプリのフォーム画面と一覧表示画面を分けて画面移動ができるように改良してみます。画面遷移には React Navigation というパッケージを利用することで簡単に作ることができます。"}}}}')},312:function(e,t,n){"use strict";n.r(t);var o=n(234),r=n(235),l=n(247),c={components:{ArticlePage:o.a,CodeBox:r.a},data:function(){return{menuSections:l,categoryName:"tutorial",articleName:"form_screen",datePublished:new Date("2020/01/12 22:00:00 +0900"),dateModified:new Date("2020/02/11 22:50:00 +0900"),contents:[{id:"in-link-how-to-use-api",title:"APIの使い方"},{id:"in-link-use-state",title:"Stateの使い方"}]}}},v=n(12),component=Object(v.a)(c,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("article-page",{attrs:{menuSections:e.menuSections,contents:e.contents,categoryName:e.categoryName,articleName:e.articleName,datePublished:e.datePublished,dateModified:e.dateModified}},[n("h1",[e._v("React Native チュートリアル（TODOアプリのフォーム画面作成 ）")]),e._v(" "),n("div",{staticClass:"abstract"},[n("p",[n("nuxt-link",{attrs:{to:"/react_native/initialize/"}},[e._v("前回Expoでのプロジェクト作成")]),e._v("\n        を説明しました。\n        今回はReact Native でTODOアプリの作成をしてみます。\n        TODOアプリにある必要事項を入力するフォーム画面作成する方法を説明していきます。\n      ")],1),e._v(" "),n("p",[e._v("\n        今回の実装内容は、\n        "),n("a",{attrs:{href:"https://github.com/irisAsh/react-native-todo-tutorial/tree/form-screen",target:"_blank"}},[e._v("Github")]),e._v("\n        の方に用意しておきましたのでご活用ください。\n      ")])]),e._v(" "),n("h2",{attrs:{id:"in-link-how-to-use-api"}},[e._v("APIの使い方")]),e._v(" "),n("p",[e._v("\n      React Native では用意されているAPIを使用して画面作成していきます。\n      よく使うのは、"),n("code",[e._v("View")]),e._v(", "),n("code",[e._v("Text")]),e._v(", "),n("code",[e._v("Button")]),e._v(" あたり。\n      作成するアプリに応じて適宜覚えていけば良いかと思います。\n    ")]),e._v(" "),n("p",[e._v("\n      用意されているAPIは\n      "),n("a",{attrs:{href:"https://facebook.github.io/react-native/docs/activityindicator",target:"_blank"}},[e._v("公式サイト")]),e._v("\n      で確認できます。\n    ")]),e._v(" "),n("p",[e._v("\n      では実際に、フォーム画面の作成を見て使い方を学んでみましょう。\n      "),n("code",[e._v("App.js")]),e._v("を次のように編集してみてください。\n    ")]),e._v(" "),n("code-box",{attrs:{fileName:"App.js"}},[e._v("\nimport React from 'react';\nimport { StyleSheet, Text, View, TextInput } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.formGroup}>\n        <Text style={styles.formLabel}>やること</Text>\n        <TextInput\n          style={styles.formControl}\n          value=\"\"\n          placeholder=\"何かやること\"\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  formGroup: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  formLabel: {\n    paddingRight: 16,\n  },\n  formControl: {\n    height: 40,\n    width: 160,\n    padding: 8,\n    borderColor: 'gray',\n    borderWidth: 1\n  }\n});\n    ")]),e._v(" "),n("amp-img",{attrs:{src:"/images/react_native/form_screen/text_input.png",alt:"テキスト入力",title:"テキスト入力",width:"360",height:"635"}}),e._v(" "),n("p",[n("code",[e._v("App.js")]),e._v("の関数を見てみるとView\n      で囲まれたHTMLのような構造を返しています。\n      基本的にReactではこのような実装をしていくので、\n      Reactを使ったことのない人でもフロントエンジニアであればモバイルアプリの開発をしていくことができます。\n    ")]),e._v(" "),n("p",[e._v("\n      一番外側のViewを見てみると"),n("code",[e._v("style={styles.container}")]),e._v("とStyle属性が指定されています。\n      Web開発のスタイルシートと同様の書き方でデザインしていきます。\n      スタイルの項目は基本的にはCSSの項目と同様で、\n      名称はケバブケース("),n("code",[e._v("background-color")]),e._v(")から、\n      キャメルケース("),n("code",[e._v("backgroundColor")]),e._v(")に変更したもので用意されています。\n    ")]),e._v(" "),n("p",[e._v("\n      また、使用するAPIは"),n("code",[e._v("import { StyleSheet, Text, View, TextInput } from 'react-native';")]),e._v("\n      のようにインポートして宣言しておく必要があります。\n    ")]),e._v(" "),n("h2",{attrs:{id:"in-link-use-state"}},[e._v("Stateの使い方")]),e._v(" "),n("p",[e._v("\n      さて、今テキスト入力に文字を入力してみても表示されません。\n      TextInputを使う時は文字を入力した際に発生するイベントの処理を定義する必要があります。\n      これにはTextInputの"),n("code",[e._v("onChangeText")]),e._v("コールバックを設定することで実装できます。\n      このコールバックは入力された文字が変化する度に呼ばれ、入力された文字を引数として渡してくれます。\n    ")]),e._v(" "),n("p",[e._v("\n      また入力された値を一時的に保存しておく必要があります。これにはReactのStateという機能を利用します。\n      Stateはコンポーネントのプロパティとして用意されていますが、今Appは関数の形式（関数コンポーネントと言います）なので、\n      これをコンポーネントの形式に直す必要があります。\n    ")]),e._v(" "),n("p",[e._v("\n      下記のようにApp関数を修正してみてください。\n    ")]),e._v(" "),n("code-box",{attrs:{fileName:"App.js"}},[e._v('\nimport React, { Component } from \'react\';\nimport { StyleSheet, Text, View, TextInput } from \'react-native\';\n\n...\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoValue: ""\n    };\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={styles.formGroup}>\n          <Text style={styles.formLabel}>やること</Text>\n          <TextInput\n            style={styles.formControl}\n            value=""\n            placeholder="何かやること"\n          />\n        </View>\n      </View>\n    );\n  }\n}\n    ')]),e._v(" "),n("p",[n("code",[e._v("import React, { Component } from 'react';")]),e._v("でライブラリからComponentをインポートしておきます。\n      そして"),n("code",[e._v("export default class App extends Component {")]),e._v("関数AppをComponentを継承したクラスに変更します。\n    ")]),e._v(" "),n("p",[e._v("\n      またコンポーネントにした場合は、関数コンポーネントで返していた値を、\n      Appクラスの"),n("code",[e._v("render")]),e._v("という関数プロパティの返却値にしておく必要があります。\n    ")]),e._v(" "),n("p",[e._v("\n      Stateの初期設定ですが、これはコンポーネントの"),n("code",[e._v("constructor")]),e._v("\n      （コンポーネントが作成されるときに一度だけ呼び出されます）で指定することができます。\n      "),n("code",[e._v("this.state = { ... }")]),e._v("がその箇所に当たります。\n    ")]),e._v(" "),n("p",[e._v("\n      ReactではこのStateが変更される度にrenderによる画面の再描画が行われます。\n      その際最新のStateの値を画面に表示しておくことで、テキスト入力に入力されている文字列を表示することができます。\n    ")]),e._v(" "),n("p",[e._v("\n      renderの中身を次のように変えてみて下さい。\n    ")]),e._v(" "),n("code-box",{attrs:{fileName:"App.js"}},[e._v('\nrender() {\n  const { todoValue } = this.state;\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.formGroup}>\n        <Text style={styles.formLabel}>やること</Text>\n        <TextInput\n          style={styles.formControl}\n          value={todoValue}\n          placeholder="何かやること"\n          onChangeText={v => this.setState({ todoValue: v })}\n        />\n      </View>\n    </View>\n  );\n}\n    ')]),e._v(" "),n("p",[n("code",[e._v("const { todoValue } = this.state;")]),e._v("とすることでStateに保存してある値を取得し、\n      TextInputのvalue属性に渡しています。\n      また、onChangeTextコールバックでStateのtodoValueの値を変更しています。\n      変更は"),n("code",[e._v("setState")]),e._v("を使用して変更します。\n    ")]),e._v(" "),n("h2",{attrs:{id:"in-link-complete-screen"}},[e._v("フォームの完成")]),e._v(" "),n("p",[e._v("\n      では最後に「メモ」という項目をもう１つ用意し、\n      「登録」というボタンを押すと入力の内容が一覧に表示されるようにしましょう。\n    ")]),e._v(" "),n("amp-img",{attrs:{src:"/images/react_native/form_screen/add_button.png",alt:"ボタンの設置",title:"ボタンの設置",width:"360",height:"635"}}),e._v(" "),n("code-box",{attrs:{fileName:"App.js"}},[e._v("\nimport React, { Component } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TextInput,\n  Button,\n  FlatList,\n  SafeAreaView\n} from 'react-native';\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoValue: \"\",\n      memoValue: \"\",\n      todoList: [],\n    };\n  }\n\n  render() {\n    const { todoValue, memoValue, todoList } = this.state;\n\n    return (\n      <SafeAreaView style={styles.container}>\n        <View style={styles.formGroup}>\n          <Text style={styles.formLabel}>やること</Text>\n          <TextInput\n            style={styles.formControl}\n            value={todoValue}\n            placeholder=\"何かやること\"\n            onChangeText={v => this.setState({ todoValue: v })}\n          />\n        </View>\n        <View style={styles.formGroup}>\n          <Text style={styles.formLabel}>メモ</Text>\n          <TextInput\n            style={styles.formControl}\n            value={memoValue}\n            placeholder=\"何かメモ\"\n            onChangeText={v => this.setState({ memoValue: v })}\n          />\n        </View>\n        <Button\n          title=\"登録\"\n          onPress={() => {\n            const newList = todoList.concat({ todo: todoValue, memo: memoValue });\n            this.setState({\n              todoValue: \"\",\n              memoValue: \"\",\n              todoList: newList\n            });\n          }}\n        />\n        <FlatList\n          style={styles.listBox}\n          data={todoList}\n          renderItem={({ item }) => {\n            return (\n              <View style={styles.listItem}>\n                <Text>{item.todo}</Text>\n                <Text>{item.memo}</Text>\n              </View>\n            );\n          }}\n          keyExtractor={item => item.todo}\n        />\n      </SafeAreaView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  formGroup: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 16,\n  },\n  formLabel: {\n    paddingRight: 16,\n  },\n  formControl: {\n    height: 40,\n    width: 160,\n    padding: 8,\n    borderColor: 'gray',\n    borderWidth: 1\n  },\n  listItem: {\n    height: 64,\n    width: 200,\n    marginBottom: 16,\n    padding: 16,\n    borderColor: 'gray',\n    borderWidth: 1,\n  }\n});\n    ")]),e._v(" "),n("p",[e._v("\n      「メモ」のテキスト入力は「やること」と同じようにしてTextInputとStateを使って作成します。\n    ")]),e._v(" "),n("p",[e._v("\n      ボタンはButtonを使います。title属性とonPress属性を指定すれば機能します。\n      ボタンが押された際には、StateのtodoValueとmemoValueを初期化し、\n      todoListの配列に入力されていた値を追加します。\n    ")]),e._v(" "),n("p",[e._v("\n      この時todoListの配列に"),n("code",[e._v("push")]),e._v("を使って値を変更しせずに、\n      "),n("code",[e._v("concat")]),e._v("で配列をコピーした上で"),n("code",[e._v("setState")]),e._v("で値を変更してください。\n    ")]),e._v(" "),n("p",[e._v("\n      次のステップ：\n      "),n("nuxt-link",{attrs:{to:"/react_native/use_props/"}},[e._v("コンポーネント化")])],1)],1)}),[],!1,null,null,null);t.default=component.exports}}]);