(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{234:function(e,t,n){var content=n(242);"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,n(34).default)("dad36f06",content,!0,{sourceMap:!1})},238:function(e,t,n){var content=n(248);"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,n(34).default)("2c1f7920",content,!0,{sourceMap:!1})},239:function(e,t,n){var content=n(250);"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,n(34).default)("5e6f4ba6",content,!0,{sourceMap:!1})},240:function(e){e.exports=JSON.parse('{"tutorial":{"category":"入門","categoryLabel":"Rails","categoryPath":"/rails/","iconClass":"fas fa-home","menus":{"setup":{"linkPath":"/rails/setup/","ogpImage":"/images/rails/setup/ogp.png","title":"環境設定","subTitle":"Gem / Bundle","menuIcon":"fas fa-home","headerTitle":"Ruby on Rails 5 の環境設定","headerDescription":"Ruby on Rails 5 の環境設定について説明します。ここでは、Rails new は使わずプロジェクト内でGemを管理してプロジェクトを作成します。また今後の記事では入門としてToDoアプリを作成しながら解説を進めていきます。"},"use_mariadb":{"linkPath":"/rails/use_mariadb/","ogpImage":"/images/rails/use_mariadb/ogp.png","title":"MariaDBを利用する","subTitle":"MariaDB","menuIcon":"fas fa-coins","headerTitle":"Ruby on RailsでMariaDBを利用する","headerDescription":"Railsプロジェクト作成直後にMariaDBを導入する手順を説明します。Rails初期設定ではSQLite3を利用するようになっていますが、プロジェクト規模が多くなる場合は関係性のあるデータベースを利用する方が良いです。"},"scaffold":{"linkPath":"/rails/scaffold/","ogpImage":"/images/rails/scaffold/ogp.png","title":"scaffoldを使う","subTitle":"rails generate scaffold","menuIcon":"fas fa-folder","headerTitle":"rails generate scaffoldを使ってページを追加する","headerDescription":"rails generate scaffoldを使って新規ページを追加してみます。scaffoldを使用するとコントローラー、ビュー、モデル等の必要とするファイルが全て自動生成されます。config/application.rbを編集して任意の単位で自動生成の拒否設定をすることもできます。"},"use_hamlit":{"linkPath":"/rails/use_hamlit/","ogpImage":"/images/rails/use_hamlit/ogp.png","title":"Hamlitを使う","subTitle":"hamlit-rails","menuIcon":"fas fa-crown","headerTitle":"HTMLテンプレートHamlitを使う","headerDescription":"Rails標準のHTMLテンプレートはERBが使われています。他にもHamlやSlimといったものがありますが、今回はHamlitというHTMLテンプレートを使う方法を説明します。HamlitはHamlの拡張でHamlをより高速にしたものです。記法はHamlと同様なのでHamlユーザーも利用しやすいでしょう。"},"add_page":{"linkPath":"/rails/add_page/","ogpImage":"/images/rails/add_page/ogp.png","title":"画面作成の基本","subTitle":"rails generate controller","menuIcon":"far fa-newspaper","headerTitle":"Railsで新規画面を作成する基本な流れ","headerDescription":"Railsで新規画面を作成する基本的な流れを説明します。今回は自動生成を使います。rails generate controllerでビューとコントローラーの自動生成をし、適宜画面を編集し画面を作成していきます。"},"use_devise":{"linkPath":"/rails/use_devise/","title":"Deviseで認証を追加する","subTitle":"Devise","menuIcon":"fas fa-passport","headerTitle":"Deviseを利用して認証を追加する","headerDescription":"Deviseを使ってユーザー認証処理を追加して見ます。Deviseはサインアップやログインなど認証の処理を提供してくれる便利なGemです。Deviseは複雑で柔軟性はないですが多機能を提供しているので独自のカスタマイズがなければとても有効です。"}}},"support_tool":{"category":"開発支援ツール","categoryLabel":"Rails","categoryPath":"/rails/","iconClass":"fas fa-hands-helping","menus":{"use_rubocop":{"linkPath":"/rails/use_rubocop/","ogpImage":"/images/rails/use_rubocop/ogp.png","title":"RuboCopを使う","subTitle":"RuboCop","menuIcon":"fas fa-robot","headerTitle":"RuboCopを導入してコードを整理する","headerDescription":"RubocopはRubyコードのスタイルガイドに沿ってコード解析をしてくれるツールです。プロジェクトの開発で実装する人数が増えればソースコードの記述が統一されなくなっていきます。コード解析ツールを使えばスタイルガイドに順守していない場合に警告を表示して知らせてくれます。"}}}}')},241:function(e,t,n){"use strict";var r=n(234);n.n(r).a},242:function(e,t,n){(t=n(33)(!1)).push([e.i,'.__amp *[data-v-967b7d70]{box-sizing:border-box}.__amp a[data-v-967b7d70]{outline:none;cursor:pointer;text-decoration:none;color:#0089a7}.__amp a[data-v-967b7d70]:visited{color:inherit}.__amp .m0[data-v-967b7d70]{margin:0}.__amp .p0[data-v-967b7d70]{padding:0}.__amp .pl1[data-v-967b7d70]{padding-left:.5rem}.__amp .pl2[data-v-967b7d70]{padding-left:1rem}.__amp .pl3[data-v-967b7d70]{padding-left:1.5rem}.__amp .pl4[data-v-967b7d70]{padding-left:2rem}.__amp .pr1[data-v-967b7d70]{padding-right:.5rem}.__amp .pr2[data-v-967b7d70]{padding-right:1rem}.__amp .pr3[data-v-967b7d70]{padding-right:1.5rem}.__amp .pr4[data-v-967b7d70]{padding-right:2rem}.__amp .menu-link[data-v-967b7d70]{outline:none;cursor:pointer;text-decoration:none;color:#efefef}.__amp .menu-link[data-v-967b7d70]:visited{color:inherit}.__amp .headerbar[data-v-967b7d70]{background-color:#0089a7;color:#efefef;z-index:999;box-shadow:0 0 5px 2px rgba(0,0,0,.1);position:fixed;display:-webkit-box;display:flex;-webkit-box-pack:start;justify-content:flex-start;-webkit-box-align:center;align-items:center;top:0;left:0;right:0}.__amp .headerbar-nav[data-v-967b7d70]{display:none;line-height:3.5rem}@media screen and (min-width:52.06rem){.__amp .headerbar-nav[data-v-967b7d70]{display:-webkit-box;display:flex}}.__amp .headerbar-nav ul[data-v-967b7d70]{display:-webkit-box;display:flex;-webkit-box-pack:"center";justify-content:"center";list-style:none;white-space:nowrap;text-align:center}.__amp .headerbar-nav li[data-v-967b7d70]{display:list-item;text-align:-webkit-match-parent;padding:0 1rem}.__amp .headerbar-nav .dropdown-container[data-v-967b7d70]{position:absolute;top:0;left:0;right:0;bottom:0}.__amp .headerbar-nav .dropdown-container section header[data-v-967b7d70]{outline:none;background-color:#0089a7;border:none}.__amp .headerbar-nav .dropdown-container section ul[data-v-967b7d70]{background-color:#0089a7;list-style:none;padding:0 0 0 20px}.__amp .headerbar-nav .dropdown-container section li[data-v-967b7d70]{text-align:left}.__amp .nav-single[data-v-967b7d70]{min-width:100px}.__amp .nav-dropdown[data-v-967b7d70]{position:relative;min-width:140px}.__amp .humbarger[data-v-967b7d70]{outline:none;line-height:3.5rem;font-size:2rem;cursor:pointer;text-decoration:none}@media screen and (min-width:52.06rem){.__amp .humbarger[data-v-967b7d70]{display:none}}.__amp .sidebar[data-v-967b7d70]{background-color:#0089a7;color:#efefef;width:300px}.__amp .sidebar-header[data-v-967b7d70]{display:-webkit-box;display:flex;-webkit-box-pack:start;justify-content:flex-start;-webkit-box-align:center;align-items:center;line-height:3.5rem;min-height:3.5rem}.__amp .sidebar-header .close[data-v-967b7d70]{outline:none;line-height:3.5rem;font-size:2rem;cursor:pointer;text-decoration:none;-webkit-box-align:start;align-items:flex-start}.__amp .sidebar-nav ul[data-v-967b7d70]{font-size:1.2rem;line-height:1.2rem;letter-spacing:.06rem;list-style:none}.__amp .sidebar-nav .nav-single[data-v-967b7d70]{margin:0 0 1rem}.__amp .sidebar-nav .dropdown-container header[data-v-967b7d70]{outline:none;background-color:#0089a7;border:none;margin:0 0 1rem}.__amp .sidebar-nav .dropdown-container ul[data-v-967b7d70]{list-style:none;padding:0 0 0 20px}.__amp .sidebar-nav .dropdown-container li[data-v-967b7d70]{text-align:left;margin:0 0 1rem}.footer[data-v-967b7d70]{display:-webkit-box;display:flex;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;background-color:#0089a7;padding:.2rem}.footer p[data-v-967b7d70]{color:#efefef}#sidebar[data-v-967b7d70]{padding:1rem}@media screen and (min-width:52.06rem){#sidebar[data-v-967b7d70]{width:250px;font-size:.9rem}}#sidebar section[data-v-967b7d70]{margin-bottom:1rem}#sidebar .menu-overview[data-v-967b7d70]{border-bottom:1px solid #b2b2b2;margin-bottom:8px}#sidebar .menu-item[data-v-967b7d70]{padding-left:4px}#sidebar .menu-item .access-now[data-v-967b7d70]{color:#0089a7}#sidebar .menu-item a[data-v-967b7d70]{color:#8c8c8c;text-decoration:none}#sidebar .menu-item a[data-v-967b7d70]:hover{color:#262626}',""]),e.exports=t},243:function(e,t,n){"use strict";var r={name:"SideMenu",props:["menuSections"],computed:{routePath:function(){return this.$route.path}}},o=(n(241),n(12)),component=Object(o.a)(r,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("aside",{attrs:{id:"sidebar"}},e._l(e.menuSections,(function(t){return n("section",{key:t.category},[n("div",{staticClass:"menu-overview"},[e._v(e._s(t.category))]),e._v(" "),e._l(t.menus,(function(t){return n("div",{key:t.linkPath,staticClass:"menu-item"},[n("nuxt-link",{class:e.routePath==t.linkPath?"access-now":"",attrs:{to:t.linkPath}},[e._v("\n          "+e._s(t.title)+"\n        ")])],1)}))],2)})),0)])}),[],!1,null,"967b7d70",null);t.a=component.exports},247:function(e,t,n){"use strict";var r=n(238);n.n(r).a},248:function(e,t,n){(t=n(33)(!1)).push([e.i,".article-timestamp{margin-top:1.5rem;padding-top:.5rem;border-top:1px solid #aaa;color:#aaa}.article-timestamp,.timestamp-container{display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row}.timestamp-container{-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;padding-right:1rem}.timestamp-container i{margin-right:.4rem}",""]),e.exports=t},249:function(e,t,n){"use strict";var r=n(239);n.n(r).a},250:function(e,t,n){(t=n(33)(!1)).push([e.i,'.__amp *[data-v-47ae3f5c]{box-sizing:border-box}.__amp a[data-v-47ae3f5c]{outline:none;cursor:pointer;text-decoration:none;color:#0089a7}.__amp a[data-v-47ae3f5c]:visited{color:inherit}.__amp .m0[data-v-47ae3f5c]{margin:0}.__amp .p0[data-v-47ae3f5c]{padding:0}.__amp .pl1[data-v-47ae3f5c]{padding-left:.5rem}.__amp .pl2[data-v-47ae3f5c]{padding-left:1rem}.__amp .pl3[data-v-47ae3f5c]{padding-left:1.5rem}.__amp .pl4[data-v-47ae3f5c]{padding-left:2rem}.__amp .pr1[data-v-47ae3f5c]{padding-right:.5rem}.__amp .pr2[data-v-47ae3f5c]{padding-right:1rem}.__amp .pr3[data-v-47ae3f5c]{padding-right:1.5rem}.__amp .pr4[data-v-47ae3f5c]{padding-right:2rem}.__amp .menu-link[data-v-47ae3f5c]{outline:none;cursor:pointer;text-decoration:none;color:#efefef}.__amp .menu-link[data-v-47ae3f5c]:visited{color:inherit}.__amp .headerbar[data-v-47ae3f5c]{background-color:#0089a7;color:#efefef;z-index:999;box-shadow:0 0 5px 2px rgba(0,0,0,.1);position:fixed;display:-webkit-box;display:flex;-webkit-box-pack:start;justify-content:flex-start;-webkit-box-align:center;align-items:center;top:0;left:0;right:0}.__amp .headerbar-nav[data-v-47ae3f5c]{display:none;line-height:3.5rem}@media screen and (min-width:52.06rem){.__amp .headerbar-nav[data-v-47ae3f5c]{display:-webkit-box;display:flex}}.__amp .headerbar-nav ul[data-v-47ae3f5c]{display:-webkit-box;display:flex;-webkit-box-pack:"center";justify-content:"center";list-style:none;white-space:nowrap;text-align:center}.__amp .headerbar-nav li[data-v-47ae3f5c]{display:list-item;text-align:-webkit-match-parent;padding:0 1rem}.__amp .headerbar-nav .dropdown-container[data-v-47ae3f5c]{position:absolute;top:0;left:0;right:0;bottom:0}.__amp .headerbar-nav .dropdown-container section header[data-v-47ae3f5c]{outline:none;background-color:#0089a7;border:none}.__amp .headerbar-nav .dropdown-container section ul[data-v-47ae3f5c]{background-color:#0089a7;list-style:none;padding:0 0 0 20px}.__amp .headerbar-nav .dropdown-container section li[data-v-47ae3f5c]{text-align:left}.__amp .nav-single[data-v-47ae3f5c]{min-width:100px}.__amp .nav-dropdown[data-v-47ae3f5c]{position:relative;min-width:140px}.__amp .humbarger[data-v-47ae3f5c]{outline:none;line-height:3.5rem;font-size:2rem;cursor:pointer;text-decoration:none}@media screen and (min-width:52.06rem){.__amp .humbarger[data-v-47ae3f5c]{display:none}}.__amp .sidebar[data-v-47ae3f5c]{background-color:#0089a7;color:#efefef;width:300px}.__amp .sidebar-header[data-v-47ae3f5c]{display:-webkit-box;display:flex;-webkit-box-pack:start;justify-content:flex-start;-webkit-box-align:center;align-items:center;line-height:3.5rem;min-height:3.5rem}.__amp .sidebar-header .close[data-v-47ae3f5c]{outline:none;line-height:3.5rem;font-size:2rem;cursor:pointer;text-decoration:none;-webkit-box-align:start;align-items:flex-start}.__amp .sidebar-nav ul[data-v-47ae3f5c]{font-size:1.2rem;line-height:1.2rem;letter-spacing:.06rem;list-style:none}.__amp .sidebar-nav .nav-single[data-v-47ae3f5c]{margin:0 0 1rem}.__amp .sidebar-nav .dropdown-container header[data-v-47ae3f5c]{outline:none;background-color:#0089a7;border:none;margin:0 0 1rem}.__amp .sidebar-nav .dropdown-container ul[data-v-47ae3f5c]{list-style:none;padding:0 0 0 20px}.__amp .sidebar-nav .dropdown-container li[data-v-47ae3f5c]{text-align:left;margin:0 0 1rem}.footer[data-v-47ae3f5c]{display:-webkit-box;display:flex;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;background-color:#0089a7;padding:.2rem}.footer p[data-v-47ae3f5c]{color:#efefef}#table-content[data-v-47ae3f5c]{width:300px;-webkit-box-ordinal-group:4;order:3}#table-content-list[data-v-47ae3f5c]{padding:16px;font-size:.9rem;position:-webkit-sticky;position:sticky;top:3.5rem}.link-container[data-v-47ae3f5c]{margin-bottom:.3rem}.link-container a[data-v-47ae3f5c]{color:#8c8c8c;text-decoration:none}.link-container a[data-v-47ae3f5c]:hover{color:#262626}',""]),e.exports=t},252:function(e,t,n){"use strict";var r={name:"ArticleTimestamp",props:["createdAt","updatedAt"]},o=(n(247),n(12)),component=Object(o.a)(r,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"article-timestamp"},[n("div",{staticClass:"timestamp-container"},[n("i",{staticClass:"far fa-clock"}),e._v(" "),n("p",[e._v(e._s(e.createdAt))])]),e._v(" "),n("div",{staticClass:"timestamp-container"},[n("i",{staticClass:"fas fa-clock"}),e._v(" "),n("p",[e._v(e._s(e.updatedAt))])])])}),[],!1,null,null,null);t.a=component.exports},253:function(e,t,n){"use strict";var r={name:"TableContent",props:["contents"]},o=(n(249),n(12)),component=Object(o.a)(r,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{attrs:{id:"table-content"}},[n("aside",{attrs:{id:"table-content-list"}},e._l(e.contents,(function(content){return n("div",{key:content.id,staticClass:"link-container"},[n("nuxt-link",{attrs:{to:"#"+content.id}},[e._v("\n        "+e._s(content.title)+"\n      ")])],1)})),0)])}),[],!1,null,"47ae3f5c",null);t.a=component.exports},286:function(e,t,n){"use strict";n.r(t);var r=n(252),o=n(243),d=n(253),l=n(240),c={components:{ArticleTimestamp:r.a,SideMenu:o.a,TableContent:d.a},data:function(){return{menuSections:l,datePublished:new Date(2019,5,2,22,0),dateModified:new Date(2019,5,2,22,0)}},computed:{ArticleMd:function(){return'<section><h1>Deviseを利用して認証を追加する</h1>\n<p>これまで作ってきたTodoアプリにユーザー認証を入れてみます。Railsで認証を提供するGemではDeviseというGemが有名です。Deviseを採用することには色々と議論がありますが、セキュリティ面やそのコストを考えると基本的にはDeviseを利用するのが良いかと思います。</p>\n<p>今回のサンプルは<a href="https://github.com/irisAsh/rails-todo-tutorial/tree/ver-use-devise">こちら</a>にあります。</p>\n<h2 id="setup-devise">Deviseの初期設定</h2>\n<p>下記のようにGemfileに追記してBundlerでインストールしてください。</p>\n<pre><code class="language-Gemfile.prettyprint">gem \'devise\' # 追加\n</code></pre>\n<p><code>bundle install</code>でGemを追加したら、<code>bin/rails generate devise:install</code>を実行してDeviseの初期ファイルを生成してください。</p>\n<pre><code class="language-shell.prettyprint">$ bin/rails generate devise:install\n      create  config/initializers/devise.rb\n      create  config/locales/devise.en.yml\n===============================================================================\n\nSome setup you must do manually if you haven\'t yet:\n\n  1. Ensure you have defined default url options in your environments files. Here\n     is an example of default_url_options appropriate for a development environment\n     in config/environments/development.rb:\n\n       config.action_mailer.default_url_options = { host: \'localhost\', port: 3000 }\n\n     In production, :host should be set to the actual host of your application.\n\n  2. Ensure you have defined root_url to *something* in your config/routes.rb.\n     For example:\n\n       root to: &quot;home#index&quot;\n\n  3. Ensure you have flash messages in app/views/layouts/application.html.erb.\n     For example:\n\n       &lt;p class=&quot;notice&quot;&gt;&lt;%= notice %&gt;&lt;/p&gt;\n       &lt;p class=&quot;alert&quot;&gt;&lt;%= alert %&gt;&lt;/p&gt;\n\n  4. You can copy Devise views (for customization) to your app by running:\n\n       rails g devise:views\n\n===============================================================================\n</code></pre>\n<p>実行結果に出力されているようにいくつか設定をする必要があります。</p>\n<h3>1.config/environments/development.rb の編集</h3>\n<p>下記のように<code>config/environments/development.rb</code>に設定を追加してください。</p>\n<pre><code class="language-shell.prettyprint"># config/environments/development.rb\n\n...\n\nconfig.action_mailer.perform_caching = false\n\n# 追加\nconfig.action_mailer.default_url_options = { host: \'localhost\', port: 3000 }\n\n...\n</code></pre>\n<h3>2.ルートパスの追加</h3>\n<p><a href="https://irisash.github.io/rails/add_page/">Railsで新規画面を作成する基本な流れ</a>で<code>welcome#index</code>を追加したのでこの場合は不要です。</p>\n<h3>3.フラッシュメッセージの追加</h3>\n<p><code>app/views/layouts/application.html.haml</code>にフラッシュメッセージを使いします。バリデーションエラーがあった時にメッセージが表示されるようになります。</p>\n<pre><code class="language-haml.prettyprint"># app/views/layouts/application.html.haml\n\n  %body\n    # 追加\n    .notice= notice\n    .alert= alert\n    = yield\n</code></pre>\n<h3>4.Deviseのフォームをカスタマイズする</h3>\n<p>Deviseの標準フォームを自分好みにカスタマイズしたい場合の設定です。普通はカタマイズすると思うので実行して良いでしょう。</p>\n<pre><code class="language-shell.prettyprint">$ bin/rails g devise:views\n      invoke  Devise::Generators::SharedViewsGenerator\n      create    app/views/devise/shared\n      create    app/views/devise/shared/_error_messages.html.erb\n      create    app/views/devise/shared/_links.html.erb\n      invoke  form_for\n      create    app/views/devise/confirmations\n      create    app/views/devise/confirmations/new.html.erb\n      create    app/views/devise/passwords\n      create    app/views/devise/passwords/edit.html.erb\n      create    app/views/devise/passwords/new.html.erb\n      create    app/views/devise/registrations\n      create    app/views/devise/registrations/edit.html.erb\n      create    app/views/devise/registrations/new.html.erb\n      create    app/views/devise/sessions\n      create    app/views/devise/sessions/new.html.erb\n      create    app/views/devise/unlocks\n      create    app/views/devise/unlocks/new.html.erb\n      invoke  erb\n      create    app/views/devise/mailer\n      create    app/views/devise/mailer/confirmation_instructions.html.erb\n      create    app/views/devise/mailer/email_changed.html.erb\n      create    app/views/devise/mailer/password_change.html.erb\n      create    app/views/devise/mailer/reset_password_instructions.html.erb\n      create    app/views/devise/mailer/unlock_instructions.html.erb\n</code></pre>\n<p>ビューファイルがたくさんできますが使用する時に見るのでここでは置いておきましょう。<br />\nまた自動生成されるビューはERBのテンプレートなるので、Haml(Hamlit)を利用する場合は、<a href="https://irisash.github.io/rails/use_hamlit/">HTMLテンプレートHamlitを使う</a>の変換処理をしてください。</p>\n<h2 id="create-user">Userの作成</h2>\n<p>ユーザーのモデルとコントローラーを用意する必要があります。</p>\n<h3>モデルの追加</h3>\n<p><a href="https://irisash.github.io/rails/scaffold/">rails generate scaffoldを使ってページを追加する</a>であったようにモデル追加にはマイグレーションファイルが必要となります。<br />\nしかし、Deviseには認証にいつようなカラムを持ったUserモデルを作成するコマンドが用意されていますので、それを使ってマイグレーションを用意しましょう。</p>\n<pre><code class="language-shell.prettyprint">$ bin/rails g devise User\n      invoke  active_record\n      create    db/migrate/20190526135251_devise_create_users.rb\n      create    app/models/user.rb\n      insert    app/models/user.rb\n       route  devise_for :users\n</code></pre>\n<p><code>bin/rails g devise User</code>を実行するとマイグレーションファイルとUserモデルのファイルが生成されます。<br />\n<code>app/models/user.rb</code>にはDeviseの利用機能を設定するコードが記載されています。<code>devise :database_authenticatable, ...</code>がその箇所です。またコメントになっている<code>:confirmable, ...</code>も利用できる機能です。<br />\n後で機能追加できますので、ここでは初期状態で設定されている機能のみ利用します。</p>\n<pre><code class="language-ruby.prettyprint"># app/models/user.rb\n\nclass User &lt; ApplicationRecord\n  # Include default devise modules. Others available are:\n  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable\n  devise :database_authenticatable, :registerable,\n         :recoverable, :rememberable, :validatable\nend\n</code></pre>\n<p>マイグレーションファイルは利用機能に対して必要なカラムが生成されるようになっています。<br />\n使用しない機能に対して必要なカラムはコメントアウトされています。</p>\n<pre><code class="language-ruby.prettyprint"># db/migrate/20190527152733_devise_create_users.rb\n\n# frozen_string_literal: true\n\nclass DeviseCreateUsers &lt; ActiveRecord::Migration[5.2]\n  def change\n    create_table :users do |t|\n      ## Database authenticatable\n      t.string :email,              null: false, default: &quot;&quot;\n      t.string :encrypted_password, null: false, default: &quot;&quot;\n\n      ## Recoverable\n      t.string   :reset_password_token\n      t.datetime :reset_password_sent_at\n\n      ## Rememberable\n      t.datetime :remember_created_at\n\n      ## Trackable\n      # t.integer  :sign_in_count, default: 0, null: false\n      # t.datetime :current_sign_in_at\n      # t.datetime :last_sign_in_at\n      # t.string   :current_sign_in_ip\n      # t.string   :last_sign_in_ip\n\n      ## Confirmable\n      # t.string   :confirmation_token\n      # t.datetime :confirmed_at\n      # t.datetime :confirmation_sent_at\n      # t.string   :unconfirmed_email # Only if using reconfirmable\n\n      ## Lockable\n      # t.integer  :failed_attempts, default: 0, null: false # Only if lock strategy is :failed_attempts\n      # t.string   :unlock_token # Only if unlock strategy is :email or :both\n      # t.datetime :locked_at\n\n\n      t.timestamps null: false\n    end\n\n    add_index :users, :email,                unique: true\n    add_index :users, :reset_password_token, unique: true\n    # add_index :users, :confirmation_token,   unique: true\n    # add_index :users, :unlock_token,         unique: true\n  end\nend\n</code></pre>\n<p>また、同時にルーティングも追加されています。</p>\n<pre><code class="language-ruby.prettyprint">Rails.application.routes.draw do\n  devise_for :users # 追加されている\n  root &quot;welcome#index&quot;\n</code></pre>\n<p>定義されているエンドポイントを確認してみるとDevise標準のものがいくつか追加されているのがわかります。</p>\n<pre><code class="language-shell.prettyprint">$ bin/rails routes\n                   Prefix Verb   URI Pattern                    Controller#Action\n         new_user_session GET    /users/sign_in(.:format)       devise/sessions#new\n             user_session POST   /users/sign_in(.:format)       devise/sessions#create\n     destroy_user_session DELETE /users/sign_out(.:format)      devise/sessions#destroy\n        new_user_password GET    /users/password/new(.:format)  devise/passwords#new\n       edit_user_password GET    /users/password/edit(.:format) devise/passwords#edit\n            user_password PATCH  /users/password(.:format)      devise/passwords#update\n                          PUT    /users/password(.:format)      devise/passwords#update\n                          POST   /users/password(.:format)      devise/passwords#create\n cancel_user_registration GET    /users/cancel(.:format)        devise/registrations#cancel\n    new_user_registration GET    /users/sign_up(.:format)       devise/registrations#new\n   edit_user_registration GET    /users/edit(.:format)          devise/registrations#edit\n        user_registration PATCH  /users(.:format)               devise/registrations#update\n                          PUT    /users(.:format)               devise/registrations#update\n                          DELETE /users(.:format)               devise/registrations#destroy\n                          POST   /users(.:format)               devise/registrations#create\n</code></pre>\n<p>それぞれのルーティングも使用する時に見てみましょう。とりあえずマイグレーションを実行します。</p>\n<pre><code class="language-shell.prettyprint">$ bin/rails db:migrate\n</code></pre>\n<pre><code class="language-ruby.prettyprint"># db/scheme.rb\n\n  # 追加される\n  create_table &quot;users&quot;, options: &quot;ENGINE=InnoDB DEFAULT CHARSET=utf8&quot;, force: :cascade do |t|\n    t.string &quot;email&quot;, default: &quot;&quot;, null: false\n    t.string &quot;encrypted_password&quot;, default: &quot;&quot;, null: false\n    t.string &quot;reset_password_token&quot;\n    t.datetime &quot;reset_password_sent_at&quot;\n    t.datetime &quot;remember_created_at&quot;\n    t.datetime &quot;created_at&quot;, null: false\n    t.datetime &quot;updated_at&quot;, null: false\n    t.index [&quot;email&quot;], name: &quot;index_users_on_email&quot;, unique: true\n    t.index [&quot;reset_password_token&quot;], name: &quot;index_users_on_reset_password_token&quot;, unique: true\n  end\n</code></pre>\n<h3>コントローラーの追加</h3>\n<p>コントローラーも基本的にカスタマイズするので追加しましょう。Devise用にコントローラーを追加するコマンドもあります。</p>\n<pre><code class="language-shell.prettyprint">$ bin/rails g devise:controllers users\n      create  app/controllers/users/confirmations_controller.rb\n      create  app/controllers/users/passwords_controller.rb\n      create  app/controllers/users/registrations_controller.rb\n      create  app/controllers/users/sessions_controller.rb\n      create  app/controllers/users/unlocks_controller.rb\n      create  app/controllers/users/omniauth_callbacks_controller.rb\n===============================================================================\n\nSome setup you must do manually if you haven\'t yet:\n\n  Ensure you have overridden routes for generated controllers in your routes.rb.\n  For example:\n\n    Rails.application.routes.draw do\n      devise_for :users, controllers: {\n        sessions: \'users/sessions\'\n      }\n    end\n\n===============================================================================\n</code></pre>\n<p>ルーティングに対して作成したコントローラーが呼ばれるように設定する必要があると出力結果にありますが、実際に編集を加えていく段階で設定しましょう。</p>\n<h2 id="sign-up">サインアップ処理の実装</h2>\n<p>Todo画面に認証チェックを入れて見ましょう。ログインしていない状態の場合はTodo画面を表示できましようにします。<br />\nDeviseで認証チェックするには<code>authenticate_user!</code>を使います。Todoのコントローラー処理が走る前にこれを呼び出してチェックしておくと、ログインしていない場合にサインイン画面へリダイレクトしてくれます。</p>\n<pre><code class="language-ruby.prettyprint"># app/controllers/todos_controller.rb\n\nclass TodosController &lt; ApplicationController\n  before_action :set_todo, only: [:show, :edit, :update, :destroy]\n  before_action :authenticate_user! # 追加\n\n  ...\n</code></pre>\n<img src="images/rails/use_devise/default-devise-sign-in.png" alt="Devise初期サインイン画面" title="Devise初期サインイン画面" style="max-height:400px;">\n<p>サインインの画面も直す必要がありますが、ユーザー作成する必要があるのでまずはサインアップ画面を作成します。<br />\n今は<code>/users/sign_up</code>にアクセスすると、Devise標準のアクション<code>devise/sessions#new</code>が呼ばれるようになっていますが、先程カスタマイズ用に追加したコントローラーが呼ばれるように修正しましょう。</p>\n<pre><code class="language-ruby.prettyprint"># config/routes.rb\n\nRails.application.routes.draw do\n  # 編集\n  devise_for :users, controllers: {\n    registrations: \'users/registrations\'\n  }\n  ...\n</code></pre>\n<p>すると、<code>/users/sign_up</code>アクセス時に呼ばれるコントローラーが変わります。</p>\n<pre><code class="language-shell.prettyprint">$ bin/rails routes\n                   Prefix Verb   URI Pattern                    Controller#Action\n         new_user_session GET    /users/sign_in(.:format)       devise/sessions#new\n             user_session POST   /users/sign_in(.:format)       devise/sessions#create\n     destroy_user_session DELETE /users/sign_out(.:format)      devise/sessions#destroy\n        new_user_password GET    /users/password/new(.:format)  devise/passwords#new\n       edit_user_password GET    /users/password/edit(.:format) devise/passwords#edit\n            user_password PATCH  /users/password(.:format)      devise/passwords#update\n                          PUT    /users/password(.:format)      devise/passwords#update\n                          POST   /users/password(.:format)      devise/passwords#create\n cancel_user_registration GET    /users/cancel(.:format)        users/registrations#cancel\n    new_user_registration GET    /users/sign_up(.:format)       users/registrations#new\n   edit_user_registration GET    /users/edit(.:format)          users/registrations#edit\n        user_registration PATCH  /users(.:format)               users/registrations#update\n                          PUT    /users(.:format)               users/registrations#update\n                          DELETE /users(.:format)               users/registrations#destroy\n                          POST   /users(.:format)               users/registrations#create\n</code></pre>\n<p>最後にサインインした後の遷移先を指定しましょう。<br />\n<code>app/controllers/users/registrations_controller.rb</code>にある<code>protected</code>と<code>after_sign_up_path_for</code>のコメントアウトを外して<code>after_sign_up_path_for</code>に遷移先のパスを追加します。ここではTodo一覧画面へ飛ばすようにしています。</p>\n<pre><code class="language-ruby.prettyprint"># app/controllers/users/registrations_controller.rb\n\n  ...\n\n  # コメントアウトを消す\n  protected\n \n    ...\n \n    # The path used after sign up.\n    # コメントアウトを消す\n    def after_sign_up_path_for(resource)\n      todos_path\n    end\n\n    ...\n</code></pre>\n<p><code>/user/sign_up</code>にアクセスし実際にメールアドレスとパスワードを入れてサインアップして見ましょう。認証が進んでTodo一覧画面が表示できれば成功です。</p>\n<img src="images/rails/use_devise/sign-up.png" alt="サインアップ画面" title="サインアップ画面" style="max-height:400px;">\n<h2 id="logout">ログイン/ログアウト処理</h2>\n<p>ログイン/ログアウトの機能を追加します。<br />\n機能追加の前にログインしていない場合にサインアップとログインのリンクを、ログインしている場合にログアウトのリンクを画面上部に表示するようにします。<code>app/views/layouts/application.html.haml</code>を編集します。</p>\n<pre><code class="language-haml.prettyprint"># app/views/layouts/application.html.haml\n\n  %body\n    - if user_signed_in?\n      = link_to &quot;ログアウト&quot;, destroy_user_session_path, method: :delete\n    - else\n      = link_to &quot;サインアップ&quot;, new_user_registration_path\n      = link_to &quot;ログイン&quot;, new_user_session_path\n    .notice= notice\n    .alert= alert\n</code></pre>\n<p><code>user_signed_in?</code>関数はDevise組み込みのメソッドでログイン状態かどうかを判別して、ログインしていると<code>true</code>の値を返してくれます。</p>\n<p>次にDevise標準のSessionControllerではなく、カスタマイズ用に用意したUser::SessionControllerを使うようにしましょう。</p>\n<pre><code class="language-ruby.prettyprint"># config/routes.rb\n\nRails.application.routes.draw do\n  devise_for :users, controllers: {\n    registrations: &quot;users/registrations&quot;,\n    sessions: &quot;users/sessions&quot; # 追加\n  }\n</code></pre>\n<p>最後にログイン/ログアウト後の遷移先を設定します。<br />\nログインは<code>after_sign_in_path_for</code>で、ログアウトは<code>after_sign_out_path_for</code>で遷移先のパスを返すように設定します。<br />\nここではログイン後にTodo一覧画面へ遷移し、ログアウト後にホーム画面へ遷移するようにしています。</p>\n<pre><code class="language-ruby.prettyprint"># app/controllers/application_controller.rb\n\n  # 下記を追加\n  private\n  \n    def after_sign_in_path_for(resource)\n      todos_path\n    end\n  \n    def after_sign_out_path_for(resource_or_scope)\n      root_path\n    end\n</code></pre>\n<h2 id="reference-links">参考サイト</h2>\n<ul>\n<li><a href="https://github.com/plataformatec/devise">Devise</a></li>\n<li><a href="https://github.com/plataformatec/devise/wiki/How-To:-Redirect-to-a-specific-page-on-successful-sign-in,-sign-up,-or-sign-out">How To: Redirect to a specific page on successful sign in, sign up, or sign out</a></li>\n</ul>\n</section>\n'}},head:function(){var e=l.tutorial.menus.use_devise,article=this.$createArticleStructuredData({headline:e.headerTitle,datePublished:this.$moment(this.datePublished).format(),dateModified:this.$moment(this.dateModified).format()}),t=this.$createBreadcrumbListStructuredData({itemList:[{name:this.$constants.siteName,url:this.$constants.domain},{name:"Rails",url:this.$constants.domain+"rails/"},{name:e.headerTitle,url:this.$constants.domain+"rails/use_devise/"}]});return{title:e.headerTitle,meta:[{hid:"description",name:"description",content:e.headerDescription}],__dangerouslyDisableSanitizers:["script"],script:[article,t]}}},m=n(12),component=Object(m.a)(c,(function(){var e=this.$createElement,t=this._self._c||e;return t("div",{attrs:{id:"wrapper"}},[t("article",{attrs:{id:"main"}},[t("section",[t("div",{domProps:{innerHTML:this._s(this.ArticleMd)}}),this._v(" "),t("article-timestamp",{attrs:{createdAt:this.$moment(this.datePublished).format("l"),updatedAt:this.$moment(this.dateModified).format("l")}})],1)]),this._v(" "),t("side-menu",{attrs:{menuSections:this.menuSections}}),this._v(" "),t("table-content",{attrs:{articleMd:this.ArticleMd}})],1)}),[],!1,null,null,null);t.default=component.exports}}]);