(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{247:function(e){e.exports=JSON.parse('{"tutorial":{"category":"入門","categoryLabel":"React Native","categoryPath":"/react_native/","iconClass":"fab fa-react","menus":{"initialize":{"linkPath":"/react_native/initialize/","ogpImage":"/images/react_native/initialize/ogp.png","title":"プロジェクトの作成（ Expo ）","subTitle":"expo init","menuIcon":"fab fa-react","headerTitle":"React Native チュートリアル（プロジェクトの作成 Expo ）","headerDescription":"React Native でのプロジェクト作成を説明していきます。React Nativeで開発を始めるには、Expo利用とReact Native CLI利用の２通りの方法があります。ここではExpo利用の開発を説明していきます。"},"form_screen":{"linkPath":"/react_native/form_screen/","ogpImage":"/images/react_native/form_screen/ogp.png","title":"フォーム画面の作成","subTitle":"State, Style","menuIcon":"fas fa-tasks","headerTitle":"React Native チュートリアル（TODOアプリのフォーム画面作成 ）","headerDescription":"React Native でTODOアプリで必要事項を入力するフォーム画面作成する方法を説明します。主に React Native での state や style、いくつかのAPIの使い方を説明していきます。"},"use_props":{"linkPath":"/react_native/use_props/","ogpImage":"/images/react_native/use_props/ogp.png","title":"コンポーネント化","subTitle":"Props","menuIcon":"fas fa-tools","headerTitle":"コンポーネントを作って共通化する（ React Native ）","headerDescription":"React の重要な機能の１つコンポーネントを利用して、重複している描画処理を共通化してコードの整理をしてみましょう。コンポーネントを作成して再利用することで重複するコードをなくすことができます。"},"use_react_navigation":{"linkPath":"/react_native/use_react_navigation/","ogpImage":"/images/react_native/use_react_navigation/ogp.png","title":"画面遷移の利用","subTitle":"React Navitation","menuIcon":"fas fa-chevron-circle-right","headerTitle":"React Navigation を使って画面遷移を実装する（Expo）","headerDescription":"前回作成したTODOアプリのフォーム画面と一覧表示画面を分けて画面移動ができるように改良してみます。画面遷移には React Navigation というパッケージを利用することで簡単に作ることができます。"}}}}')},313:function(e,t,n){"use strict";n.r(t);var o=n(234),r=n(235),l=n(247),c={components:{ArticlePage:o.a,CodeBox:r.a},data:function(){return{menuSections:l,categoryName:"tutorial",articleName:"initialize",datePublished:new Date("2020/01/12 22:00:00 +0900"),dateModified:new Date("2020/01/12 22:00:00 +0900"),contents:[{id:"in-link-sign-up-expo",title:"Expo アカウントの作成"},{id:"in-link-what-is-expo",title:"Expo と React Native CLI の違い"},{id:"in-link-install-client",title:"Expo client のインストール"},{id:"in-link-install-expo",title:"expo-cli のインストール"},{id:"in-link-run",title:"アプリの起動"}]}}},v=n(12),component=Object(v.a)(c,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("article-page",{attrs:{menuSections:e.menuSections,contents:e.contents,categoryName:e.categoryName,articleName:e.articleName,datePublished:e.datePublished,dateModified:e.dateModified}},[n("h1",[e._v("React Native チュートリアル（プロジェクトの作成 Expo ）")]),e._v(" "),n("div",{staticClass:"abstract"},[n("p",[e._v("\n        React Native でのプロジェクト作成を説明していきます。\n        React Nativeで開発を始めるには、Expo利用とReact Native CLI利用の２通りの方法があります。\n        ここではExpo利用の開発を説明していきます。\n      ")])]),e._v(" "),n("h2",{attrs:{id:"in-link-what-is-expo"}},[e._v("Expo と React Native CLI の違い")]),e._v(" "),n("p",[e._v("\n      Expo を使うメリットは、QRコードを読むだけで簡単に実機で動作確認できるという点です。\n      React Native CLI でプロジェクトを進める場合は、Xcode や Android Studio のインストールや環境設定が必要となり、\n      開発はシミュレーターを使って動作確認していくことになります（実機ビルドも可能です）。\n      よりアプリのネイティブの知識がなく開発を進めていくことができます。\n    ")]),e._v(" "),n("p",[e._v("\n      逆に React Native CLI を使うメリットは、iOS/Android のネイティブ言語での開発を組み込んだり、\n      またネイティブ言語で作成されたライブラリを使用することができるという点です。\n      Expo では"),n("code",[e._v("expo eject")]),e._v("という操作をすることで、そのようなライブラリを導入することができるようになります。\n      ただし、"),n("code",[e._v("eject")]),e._v("すると Expo 自体の機能が使えなくなり、React Native CLI の開発と同様の進め方となります。\n    ")]),e._v(" "),n("h2",{attrs:{id:"in-link-sign-up-expo"}},[e._v("Expo アカウントの作成")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://expo.io/",target:"_blank"}},[e._v("Expo公式ページ")]),e._v("\n      からアカウント登録をしてください。Sign up からメールアドレス、ユーザー名、パスワードを入力し、\n      「create your account」を選択すれば終了です。\n    ")]),e._v(" "),n("h2",{attrs:{id:"in-link-install-client"}},[e._v("Expo client のインストール")]),e._v(" "),n("p",[e._v("\n      アカウント作成が終わったら、手持ちの携帯に Expo client アプリをインストールしておきましょう。\n    ")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://apps.apple.com/jp/app/expo-client/id982107779",target:"_blank"}},[e._v("App Store")])]),e._v(" "),n("li",[n("a",{attrs:{href:"https://play.google.com/store/apps/details?id=host.exp.exponent",target:"_blank"}},[e._v("Google Pay")])])]),e._v(" "),n("h2",{attrs:{id:"in-link-install-expo"}},[e._v("expo-cli のインストール")]),e._v(" "),n("p",[e._v("\n      Expo でプロジェクトを作成するためには、Expo CLI コマンドラインをインストールする必要があります。\n      またインストールには、Node環境を利用します。Nodeのバージョンは10系(LTS)以上が必須であるので注意してください。\n    ")]),e._v(" "),n("p",[e._v("以下でインストールが可能です。")]),e._v(" "),n("code-box",[e._v("\n$ npm install -g expo-cli\n    ")]),e._v(" "),n("p",[e._v("インストールが完了したら、Expo のバージョンを確認して問題なくコマンドが使えるか確認しておきましょう。")]),e._v(" "),n("code-box",[e._v("\n$ expo -V\n3.11.3\n    ")]),e._v(" "),n("h2",{attrs:{id:"in-link-create-app"}},[e._v("プロジェクトフォルダの作成")]),e._v(" "),n("p",[e._v("\n      Expo CLI をインストールしたら早速プロジェクトフォルダを作成しましょう。\n      任意のフォルダで"),n("code",[e._v("expo init プロジェクト名")]),e._v("を実行すると指定したプロジェクト名のフォルダが作成されます。")]),e._v(" "),n("code-box",[e._v("\n$ expo init TodoAppExpo\n? Choose a template: \n  ----- Managed workflow -----\n❯ blank                 a minimal app as clean as an empty canvas \n  blank (TypeScript)    same as blank but with TypeScript configuration \n  tabs                  several example screens and tabs using react-navigation \n  ----- Bare workflow -----\n  minimal               bare and minimal, just the essentials to get you started \n  minimal (TypeScript)  same as minimal but with TypeScript configuration \n    ")]),e._v(" "),n("p",[n("code",[e._v("expo init")]),e._v("を実行するとどの初期設定でプロジェクトを作成するか選択を問われます。\n      Bare workflow は"),n("code",[e._v("eject")]),e._v("をしても引き続き Expo での開発を進めることができる設定となります。\n      予めネイティブ利用を想定している場合はこれを選択しておくと良いでしょう。Managed workflow でも後から導入は可能です。\n    ")]),e._v(" "),n("p",[e._v("\n      また TypeScript で開発するモードや画面遷移を扱うライブラリ\n      "),n("a",{attrs:{href:"https://reactnavigation.org/",target:"_blank"}},[e._v("react-navigation")]),e._v("\n      を予め導入しているモードがあります。\n    ")]),e._v(" "),n("p",[e._v("\n      ここでは一番シンプルな blank を使用します。\n    ")]),e._v(" "),n("code-box",[e._v('\n? Choose a template: expo-template-blank\n? Please enter a few initial configuration values.\n  Read more: https://docs.expo.io/versions/latest/workflow/configuration/ › 50% completed\n {\n   "expo": {\n     "name": "<The name of your app visible on the home screen>",\n     "slug": "TodoAppExpo"\n   }\n }\n    ')]),e._v(" "),n("p",[e._v("次に name の場所に任意の名前を入力します。")]),e._v(" "),n("code-box",[e._v("\n? Choose a template: expo-template-blank\n✔ Please enter a few initial configuration values.\n  Read more: https://docs.expo.io/versions/latest/workflow/configuration/ · 100% completed\n? Yarn v1.21.1 found. Use Yarn to install dependencies? (Y/n) Y\n    ")]),e._v(" "),n("p",[e._v("パッケージ管理を Yarn で指定することもできます。")]),e._v(" "),n("h2",{attrs:{id:"in-link-run"}},[e._v("アプリの起動")]),e._v(" "),n("p",[e._v("\n      実際にアプリを起動してみましょう。プロジェクトフォルダ内に入り"),n("code",[e._v("expo start")]),e._v("を実行します。\n    ")]),e._v(" "),n("code-box",[e._v("\n$ expo start\nStarting project at /*****/*****/*****/TodoAppExpo\nExpo DevTools is running at http://localhost:19002\nOpening DevTools in the browser... (press shift-d to disable)\nStarting Metro Bundler on port 19001.\nTunnel ready.\n\n  exp://192.168.0.7:19000\n\n  [ここにQRコード表示]\n\n  To run the app with live reloading, choose one of:\n  • Scan the QR code above with the Expo app (Android) or the Camera app (iOS).\n  • Press a for Android emulator, or i for iOS simulator.\n  • Press e to send a link to your phone with email.\n  • Press s to sign in and enable more options.\n\n Expo  Press ? to show a list of all available commands.\nLogs for your project will appear below. Press Ctrl+C to exit.\n    ")]),e._v(" "),n("p",[e._v("\n      表示されたQRコードを読み取るとExpo client が開かれます。\n      これで動作確認ができます。\n    ")]),e._v(" "),n("amp-img",{attrs:{src:"/images/react_native/initialize/expo_start.png",alt:"起動確認",title:"起動確認",width:"360",height:"635"}}),e._v(" "),n("p",[n("code",[e._v("expo start")]),e._v("は起動したままで、試しにアプリの実装内容を変更してみましょう。\n      "),n("code",[e._v("App.js")]),e._v("を開くと次のようになっています。\n    ")]),e._v(" "),n("code-box",{attrs:{fileName:"App.js"}},[e._v("\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text>Open up App.js to start working on your app!</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n    ")]),e._v(" "),n("p",[e._v("\n      Expoの動作内容を見てみると\n      "),n("code",[e._v("<Text>Open up App.js to start working on your app!</Text>")]),e._v("\n      の箇所が画面に表示されています。\n    ")]),e._v(" "),n("p",[e._v("\n      ここを\n      "),n("code",[e._v("<Text>Hello World</Text>")]),e._v("\n      と変えてみましょう。\n      するとファイル保存した途端に画面表示が変化したのが分かるかと思います。\n      このようにExpoでは同期して実機での動作確認ができるので、\n      開発をスムーズに進めることができます。\n    ")]),e._v(" "),n("p",[e._v("\n      次のステップ：\n      "),n("nuxt-link",{attrs:{to:"/react_native/form_screen/"}},[e._v("フォーム画面の作成")])],1)],1)}),[],!1,null,null,null);t.default=component.exports}}]);