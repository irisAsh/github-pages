(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{291:function(n,e,t){"use strict";t.r(e);var r=t(234),o=t(235),v=t(85),_={components:{ArticlePage:r.a,CodeBox:o.a},data:function(){return{menuSections:v,categoryName:"authentication",articleName:"form_auth",datePublished:new Date("2019/05/07 22:00:00 +0900"),dateModified:new Date("2019/12/31 01:00:00 +0900"),contents:[{id:"in-link-overview",title:"Form認証の流れ"},{id:"in-link-create-form",title:"Formの作成"},{id:"in-link-signin",title:"サインアップ"},{id:"in-link-logout",title:"ログアウト"},{id:"in-link-login",title:"ログイン"},{id:"in-link-reference-links",title:"参考サイト"}]}}},l=t(12),component=Object(l.a)(_,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("article-page",{attrs:{menuSections:n.menuSections,contents:n.contents,categoryName:n.categoryName,articleName:n.articleName,datePublished:n.datePublished,dateModified:n.dateModified}},[t("h1",[n._v("ExpressでForm認証を実装する")]),n._v(" "),t("div",{staticClass:"abstract"},[t("p",[t("nuxt-link",{attrs:{to:"/express/basic_auth/"}},[n._v("ExpressでBasic認証を実装する")]),n._v("や"),t("nuxt-link",{attrs:{to:"/express/digest_auth/"}},[n._v("ExpressでDigest認証を実装する")]),n._v("\n        でHTTPで定義される認証方式を実装しましたが、今回は多くのWebアプリケーションで利用されているForm認証を実装してみます。\n      ")],1),n._v(" "),t("p",[n._v("\n        実装済みのサンプルは\n        "),t("a",{attrs:{href:"https://github.com/irisAsh/express-form-auth-tutorial",target:"_blank"}},[n._v("こちら")]),n._v("\n        においていますのでご参考ください。\n      ")]),n._v(" "),t("p",[n._v("\n        また、前提知識としてExpressでのセッション管理とMongoDB(Mongoose)の使い方が必要となります。\n        各々の扱い方がわからない方は下記のリンクをご参考ください。\n      ")]),n._v(" "),t("ul",[t("li",[t("nuxt-link",{attrs:{to:"/express/mongoose/"}},[n._v("Express入門（Mongooseの利用）")])],1),n._v(" "),t("li",[t("nuxt-link",{attrs:{to:"/express/express_session/"}},[n._v("Expressでセッションを利用する")])],1)])]),n._v(" "),t("h2",{attrs:{id:"in-link-overview"}},[n._v("Form認証の流れ")]),n._v(" "),t("p",[n._v("Form認証の大まかな流れは下記の通りです。")]),n._v(" "),t("ul",[t("li",[n._v("クライアントからユーザー名とパスワードが送信される")]),n._v(" "),t("li",[n._v("ユーザー名とパスワードをDBに保存する"),t("br"),n._v("（ログイン時はユーザー名とパスワードに一致するデータをDBから取得）")]),n._v(" "),t("li",[n._v("ユーザーの識別値（ユーザーIDなど）をセッションに保存しログイン状態にします")])]),n._v(" "),t("h3",[n._v("クライアントからユーザー名とパスワードが送信される")]),n._v(" "),t("p",[n._v("\n      この時ユーザー名とパスワードは平文で送信されるので、通常はSSLで暗号化します。\n      今回はSSLの実装はしないので、パスワードのハッシュ化を実装することで代替とします。\n    ")]),n._v(" "),t("h3",[n._v("ユーザー名とパスワードをDBに保存する")]),n._v(" "),t("p",[n._v("\n      パスワードはそのまま保存せずハッシュ化して保存するようにします。\n      したがってデータを参照できる管理者側もパスワード自体はわからなくなります。\n      もし、パスワードを忘れてしまった場合は新たに作り直すような機能が必要となります。\n    ")]),n._v(" "),t("h3",[n._v("ユーザーの識別値（ユーザーIDなど）をセッションに保存しログイン状態にします")]),n._v(" "),t("p",[n._v("\n      セキュリティ的にこのセッションには有効期限を付与しておく方が良いです。\n      またアクセスする毎にセッションを発行し直すとセキュリティ面を強固にできます。\n    ")]),n._v(" "),t("h2",{attrs:{id:"in-link-create-form"}},[n._v("Formの作成")]),n._v(" "),t("p",[n._v("まずはサインアップを行うフォーム画面を作成します。")]),n._v(" "),t("amp-img",{attrs:{src:"/images/express/form_auth/home.png",alt:"Home画面",title:"Home画面",width:"640",height:"594",layout:"responsive"}}),n._v(" "),t("amp-img",{attrs:{src:"/images/express/form_auth/signin.png",alt:"SignIn画面",title:"SignIn画面",width:"640",height:"594",layout:"responsive"}}),n._v(" "),t("p",[n._v("以下がサインアップ画面のコードです。")]),n._v(" "),t("code-box",{attrs:{fileName:"views/signin.pug"}},[n._v("\ndoctype html\nhtml\n  head\n    title= title\n    link(rel='stylesheet', href='/stylesheets/style.css')\n    script(src='https://cdnjs.cloudflare.com/ajax/libs/jsSHA/2.3.1/sha512.js')\n  body\n    h1= title\n\n    form(method='POST' action=/'signin')\n      div\n        label(for='username') username：\n        input#username(\n          type='text'\n          name='username'\n          required='true'\n        )\n      div\n        label(for='password') password：\n        input#password(\n          type='password'\n          name='password'\n          required='true'\n        )\n      div\n        input(type='submit' value='submit' onClick='return getHashAndSubmit();')\n\n    script.\n      var getHashAndSubmit = function() {\n        try {\n          var passwordSelctor = document.getElementById('password');\n          var shaObj = new jsSHA(\"SHA-512\", \"TEXT\")\n          shaObj.update(passwordSelctor.value)\n          var hash = shaObj.getHash(\"HEX\")\n          passwordSelctor.value = hash\n          return true;\n        } catch (_e) {\n          return false;\n        }\n      }\n    ")]),n._v(" "),t("p",[n._v("\n      フォーム自体は特に変わったところはありません。\n      今回は送信時にパスワードをハッシュ化するようにしてみたので、その部分だけ説明します。\n    ")]),n._v(" "),t("p",[n._v("\n      CDNでハッシュ化のパッケージをインポートしています。\n      使用したパッケージは\n      "),t("a",{attrs:{href:"https://cdnjs.com/libraries/jsSHA",target:"_blank"}},[n._v("jsSHA")]),n._v("\n      というパッケージです。\n    ")]),n._v(" "),t("p",[n._v("\n      jsSHAの使い方は"),t("code",[n._v('new jsSHA("SHA-512", "TEXT")')]),n._v("で初期化します。\n      第１引数にSHAアルゴリズムの種類、第２引数にハッシュ化対象の指定形式を設定します。\n      次に初期化したオブジェクトの"),t("code",[n._v("update")]),n._v("関数でハッシュ化する値を指定し、\n      "),t("code",[n._v("getHash")]),n._v("で実際にハッシュ値を取得します。\n    ")]),n._v(" "),t("p",[n._v("\n      このハッシュ化を使って、送信時にパスワードをハッシュ化した上でサーバーにリクエストをするようにしています。\n    ")]),n._v(" "),t("h2",{attrs:{id:"in-link-signin"}},[n._v("サインアップ")]),n._v(" "),t("p",[n._v("\n      さて今回の主要部であるサインアップの処理を実装します。\n      クライアントから受け取ったユーザー名とパスワードをDBに保存するだけですが、\n      パスワードはそのまま保存せずに受け取った値をさらにハッシュ化することでセキュリティを強固にできます。\n    ")]),n._v(" "),t("p",[n._v("\n      各値を保存した後はユーザーの識別値をセッションに保存してユーザーがログインした状態にする必要があります。\n      今回はMongoDBのIDをセッションに保存することでログイン状態を保つようにしていきます。\n    ")]),n._v(" "),t("p",[n._v("\n      それでは実際の処理を"),t("code",[n._v("routes/index.js")]),n._v("に組み込んでいきます。\n    ")]),n._v(" "),t("code-box",{attrs:{fileName:"routes/index.js"}},[n._v("\n// bcryptをインポート\nvar bcrypt = require('bcrypt');\nvar saltRounds = 10;\n...\n\nrouter.post('/signin', function(req, res, next) {\n  var { username, password } = req.body;\n  // bcrypt でハッシュ化してusernameとパスワードを保存\n  var salt = bcrypt.genSaltSync(saltRounds);\n  var hash = bcrypt.hashSync(password, salt);\n  User.create({\n    username,\n    password: hash\n  })\n  .then(function(result) {\n    // user_idをセッションに詰める\n    var session = req.session;\n    session.userId = result._id;\n    res.redirect('/users');\n  })\n  .catch(function(err) {\n    console.log(err);\n    next(err);\n  });\n});\n    ")]),n._v(" "),t("p",[n._v("\n      ハッシュ化には\n      "),t("a",{attrs:{href:"https://github.com/kelektiv/node.bcrypt.js",target:"_blank"}},[n._v("bcrypt")]),n._v("\n      を使うことにします。\n      bcryptはいくつかあるハッシュ化アルゴリズムの中でも、ソルト値・ストレッチング回数も考慮されて算出されるためとても便利です。\n    ")]),n._v(" "),t("p",[n._v("インストールは下記のコマンドを実行してください。")]),n._v(" "),t("code-box",[n._v("\n$ yarn add bcrypt\n    ")]),n._v(" "),t("p",[n._v("\n      使い方ですが、まず"),t("code",[n._v("bcrypt.genSaltSync(加工コスト)")]),n._v("でソルト値を取得します。\n      加工コストは任意の数値で初期値は10です。\n    ")]),n._v(" "),t("p",[n._v("\n      また"),t("code",[n._v("bcrypt.hashSync(ハッシュ化対象, ソルト値)")]),n._v("で実際にハッシュ化された値が取得できます。  \n      あとはハッシュ化した値をユーザーデータに登録するだけです。\n    ")]),n._v(" "),t("p",[n._v("\n      登録後はセッションに登録したユーザーデータのIDを保存してユーザーページへリダイレクトしています。\n    ")]),n._v(" "),t("amp-img",{attrs:{src:"/images/express/form_auth/user.png",alt:"User画面",title:"User画面",width:"640",height:"594",layout:"responsive"}}),n._v(" "),t("p",[t("code",[n._v("/users")]),n._v("の振る舞いは次のようになっています。")]),n._v(" "),t("code-box",{attrs:{fileName:"routes/users.js"}},[n._v("\nvar express = require('express');\nvar router = express.Router();\nvar User = require('../models/user');\n\n/* GET users listing. */\nrouter.get('/', function(req, res, next) {\n  var session = req.session;\n  if (!!session.userId) {\n    User.findOne({ _id: session.userId })\n    .then(function(result) {\n      if (!result) {\n        throw new Error('Userが見つかりません');\n      }\n      res.render('user/index', {\n        title: 'Success',\n        user: result\n      });\n    })\n    .catch(function(err) {\n      console.log(err);\n      next(err);\n    });\n  } else {\n    res.redirect('/');\n  }\n});\n\nmodule.exports = router;\n    ")]),n._v(" "),t("p",[t("code",[n._v("/users")]),n._v("にアクセスするとまずセッションにIDが保存されているか確認するようになっています。\n      IDが保存されていなければ、Home画面へリダイレクトします。\n      さらに保存されているIDと一致するユーザーデータを取得し、ユーザー情報を画面に描画するようになっています。\n    ")]),n._v(" "),t("h2",{attrs:{id:"in-link-logout"}},[n._v("ログアウト")]),n._v(" "),t("p",[n._v("次はログアウトです。ユーザー画面にはログアウトのボタンをおいています。")]),n._v(" "),t("code-box",{attrs:{fileName:"views/user/index.pug"}},[n._v("\ndoctype html\nhtml\n  head\n    title= title\n    link(rel='stylesheet', href='/stylesheets/style.css')\n  body\n    h1= title\n\n    p.\n      username: #{user.username}\n\n    form(method='post' action='/logout')\n      input(type='submit' value='logout')\n    ")]),n._v(" "),t("p",[n._v("\n      ボタンを押すと"),t("code",[n._v("/logout")]),n._v("へPOSTリクエストを送信します。\n      サーバー側では保存されているセッションの値を削除しHome画面へリダイレクトしています。\n      セッションの値を削除することでログイン状態がなくなり、再度"),t("code",[n._v("/users")]),n._v("へアクセスしようとするとHome画面へ飛ばされます。\n    ")]),n._v(" "),t("code-box",{attrs:{fileName:"routes/index.js"}},[n._v("\nrouter.post('/logout', function(req, res, next) {\n  var session = req.session;\n  session.userId = null;\n  res.redirect('/');\n});\n    ")]),n._v(" "),t("h2",{attrs:{id:"in-link-login"}},[n._v("ログイン")]),n._v(" "),t("p",[n._v("\n      最後にログイン画面です。\n      ログアウトした場合はセッションの有効期限が切れてログイン状態がなくなった場合にこの画面からログインできるようにします。\n    ")]),n._v(" "),t("p",[n._v("\n      画面はサインアップと全く同様のため割愛します。\n      Formの"),t("code",[n._v("action")]),n._v("だけ"),t("code",[n._v("/login")]),n._v("に変更するようにしてください。\n    ")]),n._v(" "),t("p",[n._v("\n      ログイン処理はクライアントから受け取ったユーザー名とパスワードを受け取りDBに保存されている値と照合して組み合わせが正しいか確認します。\n    ")]),n._v(" "),t("p",[n._v("まずはソースコードから。")]),n._v(" "),t("code-box",{attrs:{fileName:"routes/index.js"}},[n._v("\nrouter.post('/login', function(req, res, next) {\n  var { username, password } = req.body;\n  User.findOne({ username })\n  .then(function(result) {\n    if (!result) {\n      throw new Error('Userが見つかりません');\n    }\n    if (bcrypt.compareSync(password, result.password)) {\n      // user_idをセッションに詰める\n      var session = req.session;\n      session.userId = result._id;\n      res.redirect('/users');\n    } else {\n      res.redirect('/login');\n    }\n  })\n  .catch(function(err) {\n    console.log(err);\n    next(err);\n  });\n});\n    ")]),n._v(" "),t("p",[n._v("\n      はじめに受け取ったユーザー名でユーザーデータを検索します。\n      見つかったらユーザーデータのパスワードと送信されたパスワードが一致しているか確認します。\n      DBに保存されているパスワードはハッシュ化されているので"),t("code",[n._v("bcrypt.compareSync(元の値, ハッシュ化された値")]),n._v("を使って値が一致するか検証します。\n      パスワードが一致している場合はセッションにユーザーデータのIDを保存してユーザー画面に遷移させます。\n    ")]),n._v(" "),t("p",[n._v("以上でForm認証の実装は完了です。")]),n._v(" "),t("p",[n._v("\n      実際にはセキュリティ面を考慮してSSLの暗号化などの工夫が必要でしょうが、Form認証の基本的な流れはここで説明した流れになります。\n      また今回は自前でForm認証を実装しましたが、ライブラリを利用するのも良いでしょう。\n      機会があれば当サイトでもライブラリを使った実装を紹介してみようと思います。\n    ")]),n._v(" "),t("h2",{attrs:{id:"in-link-reference-links"}},[n._v("参考サイト")]),n._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://qiita.com/toshiya/items/e7dcc7610b15884b167e",target:"_blank"}},[n._v("Basic認証とフォームによる認証についてのまとめ - Qiita")])]),n._v(" "),t("li",[t("a",{attrs:{href:"http://webeg.info/php-course/step3-030/",target:"_blank"}},[n._v("管理画面にフォーム型ログイン認証を実装する")])])])],1)}),[],!1,null,null,null);e.default=component.exports}}]);