(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{296:function(n,e,t){"use strict";t.r(e);var r=t(234),o=t(235),l=t(85),c={components:{ArticlePage:r.a,CodeBox:o.a},data:function(){return{menuSections:l,categoryName:"authentication",articleName:"passport_local",datePublished:new Date("2019/05/17 22:00:00 +0900"),dateModified:new Date("2019/12/31 01:00:00 +0900"),contents:[{id:"in-link-install",title:"パッケージのインストール"},{id:"in-link-setup",title:"認証処理を実装する"},{id:"in-link-authentication",title:"認証処理を指定する"},{id:"in-link-confirm",title:"ログイン状態の確認"},{id:"in-link-logout",title:"ログアウト"},{id:"in-link-reference",title:"参考サイト"}]}}},_=t(12),component=Object(_.a)(c,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("article-page",{attrs:{menuSections:n.menuSections,contents:n.contents,categoryName:n.categoryName,articleName:n.articleName,datePublished:n.datePublished,dateModified:n.dateModified}},[t("h1",[n._v("ExpressとPassportを使ってForm認証を作成する")]),n._v(" "),t("div",{staticClass:"abstract"},[t("p",[t("nuxt-link",{attrs:{to:"/express/form_auth/"}},[n._v("ExpressでForm認証を実装する")]),n._v("\n        では認証を提供するライブラリなしでForm認証を実装しました。\n        今回は\n        "),t("a",{attrs:{href:"http://www.passportjs.org/",target:"_blank"}},[n._v("Passport")]),n._v("\n        というライブラリを使ってのForm認証の実装を説明したいと思います。\n      ")],1),n._v(" "),t("p",[n._v("\n        サンプルは\n        "),t("a",{attrs:{href:"https://github.com/irisAsh/express-passport-local-tutorial",target:"_blank"}},[n._v("Github")]),n._v("\n        においていますのでご参考にしてください。\n      ")]),n._v(" "),t("p",[n._v("\n        また、セッション管理に"),t("code",[n._v("express-session")]),n._v("、データベースに"),t("code",[n._v("mongoose")]),n._v("を使っています。\n        それぞれの使い方が分からない方は以下の記事をご参照ください。\n      ")]),n._v(" "),t("ul",[t("li",[t("nuxt-link",{attrs:{to:"/express/express_session/"}},[n._v("Expressでセッションを利用する")])],1),n._v(" "),t("li",[t("nuxt-link",{attrs:{to:"/express/mongoose/"}},[n._v("Express入門（Mongooseの利用）")])],1)])]),n._v(" "),t("h2",{attrs:{id:"in-link-install"}},[n._v("パッケージのインストール")]),n._v(" "),t("p",[n._v("\n      まずはPassportパッケージをインストールします。\n      Passportではいくつかの種類の認証が扱えるようになっていて、それぞれの認証の用途に合わせてパッケージが用意されています。\n    ")]),n._v(" "),t("p",[n._v("\n      Form認証の場合は"),t("code",[n._v("passport-local")]),n._v("というパッケージを使用します。\n      また、ログイン状態を保持するためにセッション管理のパッケージ"),t("code",[n._v("express-session")]),n._v("もインストールしておきます。\n    ")]),n._v(" "),t("code-box",[n._v("\n$ yarn run passport passport-local express-session\n    ")]),n._v(" "),t("h2",{attrs:{id:"in-link-setup"}},[n._v("認証処理を実装する")]),n._v(" "),t("p",[n._v("\n      Passportでは認証時の動作をストラテジーと呼んでいて、実装ではこのストラテジーの設定をする必要があります。\n      先程インストールした"),t("code",[n._v("passport-local")]),n._v("はユーザーIDとパスワード(emailなどに変更可)で認証するストラテジーの雛形を提供します。\n    ")]),n._v(" "),t("code-box",{attrs:{fileName:"app.js"}},[n._v("\n// パッケージのインポート\nvar passport = require('passport')\nvar LocalStrategy = require('passport-local').Strategy;\nvar session = require('express-session');\n...\n\napp.use(express.static(path.join(__dirname, 'public')));\n\n// ここから追加\n// セッションの設定\napp.use(session({\n  secret: 'secret word',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    maxAge: 60 * 1000\n  }\n}));\n// Passportの初期化\napp.use(passport.initialize());\n// Passportとセッション管理を連携\napp.use(passport.session());\n// セッションにユーザーIDを格納\npassport.serializeUser(function(user, done) {\n  done(null, user.id);\n});\n// 認証後セッションのユーザーIDからユーザー情報を取得する\npassport.deserializeUser(function(id, done) {\n  User.findById(id, function(err, user) {\n    done(err, user);\n  });\n});\n// ログイン用のストラテジー\npassport.use(new LocalStrategy(\n  function(username, password, done) {\n    // usernameで検索\n    User.findOne({ username: username }, function(err, user) {\n      if (err) { return done(err); }\n      // ユーザー登録なし\n      if (!user) {\n        return done(null, false, { message: 'usernameが登録されていません。' });\n      }\n      // パスワードを検証\n      if (user.password !== password) {\n        return done(null, false, { message: 'passwordが間違っています。' });\n      }\n      // 認証OKならユーザー情報を返す\n      return done(null, user);\n    });\n  }\n));\n// サインアップ用のストラテジー\npassport.use('local-signup', new LocalStrategy(\n  function(username, password, done) {\n    // usernameで検索\n    User.findOne({ username: username }, function(err, user) {\n      if (err) { return done(err); }\n      // ユーザー登録済み\n      if (!!user) {\n        return done(null, false, { message: '既に登録されているusernameです。' });\n      }\n      // ユーザー登録\n      User.create({\n        username,\n        password\n      })\n      .then(function(user) {\n        // 完了したらユーザー情報を返す\n        return done(null, user);\n      })\n      .catch(function(err) {\n        console.log(err);\n        return done(null, false, { message: '登録エラー' });\n      });\n    });\n  }\n));\n\napp.use('/', indexRouter);\napp.use('/users', usersRouter);\n    ")]),n._v(" "),t("p",[n._v("実装の内容は大体コードのコメントに記載している内容になります。少し補足の説明をしておきます。")]),n._v(" "),t("h3",[n._v("ログイン状態の保存")]),n._v(" "),t("code-box",[n._v("\npassport.serializeUser(function(user, done) {\n  done(null, user.id);\n});\n    ")]),n._v(" "),t("p",[n._v("\n      この箇所ではログイン/サインアップ成功後に返されるユーザーデータからセッションにユーザーIDを格納する処理が行われます。\n    ")]),n._v(" "),t("p",[n._v("\n      セッションにユーザーIDを保存することでログイン状態を保持しています。\n      ここでは引数に"),t("code",[n._v("user.id")]),n._v("と指定していますが、\n      "),t("code",[n._v("user")]),n._v("のみにしてデータ全てを格納することもできます。\n    ")]),n._v(" "),t("h3",[n._v("ストラテジーの設定")]),n._v(" "),t("code-box",[n._v("\n// ログイン用\npassport.use(new LocalStrategy( ... );\n\n// サインアップ用\npassport.use('local-signup', new LocalStrategy( ... ));\n    ")]),n._v(" "),t("p",[t("code",[n._v("passport.use")]),n._v("でストラテジーの定義を行います。\n      ログイン用とサインアップ用の２種類を定義していますが、\n      サインアップの方では第１引数に"),t("code",[n._v("'local-signup'")]),n._v("と指定しています。\n      これはストラテジーの識別名で、後述しますが実際にアクセスした時に実行する認証の処理をこの識別名を使って呼び出します。\n      ログイン用のように名前を指定しない場合は"),t("code",[n._v("logal")]),n._v("が識別名になります。\n      複数ストラテジーを用意する場合は第１引数に名前を指定するようにしてください。\n    ")]),n._v(" "),t("h2",{attrs:{id:"in-link-authentication"}},[n._v("認証処理を指定する")]),n._v(" "),t("p",[n._v("さて、設定したストラテジーを使用する処理をルーティングに設定しましょう。")]),n._v(" "),t("code-box",{attrs:{fileName:"routes/index.js"}},[n._v("\n// サインアップ処理\nrouter.post('/signup', passport.authenticate('local-signup',\n  {\n    successRedirect: '/users',\n    failureRedirect: '/signup',\n    session: true\n  }\n));\n\n// ログイン処理\nrouter.post('/login', passport.authenticate('local',\n  {\n    successRedirect: '/users',\n    failureRedirect: '/login',\n    session: true\n  }\n));\n    ")]),n._v(" "),t("p",[n._v("\n      ルーターのMETHOD関数のコールバックに"),t("code",[n._v("passport.authenticate")]),n._v("を指定すると、\n      エンドポイントにアクセスした時に認証が実行されるようになります。\n      "),t("code",[n._v("authenticate")]),n._v("の第１引数には使用するストラテジーの識別名を、\n      第2引数には次のオプションを指定します。\n    ")]),n._v(" "),t("ul",[t("li",[t("code",[n._v("successRedirect")]),n._v(": 認証成功時のリダイレクト先。")]),n._v(" "),t("li",[t("code",[n._v("failureRedirect")]),n._v(": 認証失敗時のリダイレクト先。")]),n._v(" "),t("li",[t("code",[n._v("session")]),n._v(": セッション管理をするかどうか。基本はログイン状態を保持するので"),t("code",[n._v("true")]),n._v("。")])]),n._v(" "),t("h2",{attrs:{id:"in-link-confirm"}},[n._v("ログイン状態の確認")]),n._v(" "),t("p",[n._v("\n      ログイン後はユーザーページにリダイレクトするようにしていますが、\n      このページは当然ログインしている状態でないと表示されないようにしないといけません。\n    ")]),n._v(" "),t("p",[n._v("\n      ログイン状態の確認は"),t("code",[n._v("req.isAuthenticated")]),n._v("でできます。\n      Passportを導入しているとリクエストオブジェクト"),t("code",[n._v("req")]),n._v("に"),t("code",[n._v("isAuthenticated")]),n._v("の関数が定義され、\n      この関数が利用できるようになります。\n    ")]),n._v(" "),t("code-box",{attrs:{fileName:"routes/users.js"}},[n._v("\nrouter.get('/',\n  function(req, res, next) {\n    // ログイン状態を確認\n    if (req.isAuthenticated()) {\n      // OKなら次のコールバックの処理に進む\n      next();\n    } else {\n      // NGならHome画面へリダイレクト\n      res.redirect('/');\n    }\n  },\n  function(req, res, next) {\n    var session = req.session;\n    res.render('user', { title: 'User page' });\n  }\n);\n    ")]),n._v(" "),t("h2",{attrs:{id:"in-link-logout"}},[n._v("ログアウト")]),n._v(" "),t("p",[n._v("\n      最後にログアウトです。\n    ")]),n._v(" "),t("p",[n._v("\n      任意の箇所でログアウトボタンを用意し"),t("code",[n._v("/logout")]),n._v("にPOSTリクエストするようにします。\n      ログアウト自体の処理は"),t("code",[n._v("req.logout()")]),n._v("を呼び出すだけです。\n      この"),t("code",[n._v("logout")]),n._v("関数もPassportを導入することで、リクエストオブジェクトに定義される関数の１つです。\n    ")]),n._v(" "),t("code-box",{attrs:{fileName:"routes/index.js"}},[n._v("\nrouter.post('/logout', function(req, res, next) {\n  req.logout();\n  res.redirect('/');\n});\n    ")]),n._v(" "),t("h2",{attrs:{id:"in-link-reference"}},[n._v("参考サイト")]),n._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://scotch.io/tutorials/easy-node-authentication-setup-and-local#toc-handling-signupregistration",target:"_blank"}},[n._v("Easy Node Authentication: Setup and Local ― Scotch.io")])])])],1)}),[],!1,null,null,null);e.default=component.exports}}]);