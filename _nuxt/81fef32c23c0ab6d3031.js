(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{303:function(e,n,t){"use strict";t.r(n);var r=t(248),o=t(249),v=t(85),l={components:{ArticlePage:r.a,CodeBox:o.a},data:function(){return{menuSections:v,categoryName:"authentication",articleName:"basic_auth",datePublished:new Date("2019/04/20 22:00:00 +0900"),dateModified:new Date("2019/12/30 18:00:00 +0900"),contents:[{id:"in-link-basic-auth-overview",title:"Basic認証の流れ"},{id:"in-link-initialize-project",title:"サンプルプロジェクトの用意"},{id:"in-link-return-www-authenticate",title:"認証を要求する"},{id:"in-link-decode-authenticate",title:"認証の情報を読み取る"},{id:"in-link-logout",title:"Basic認証のログアウト"},{id:"in-link-use-basic-auth",title:"basic-authを使う"}]}}},_=t(12),component=Object(_.a)(l,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("article-page",{attrs:{menuSections:e.menuSections,contents:e.contents,categoryName:e.categoryName,articleName:e.articleName,datePublished:e.datePublished,dateModified:e.dateModified}},[t("h1",[e._v("ExpressでBasic認証を実装する")]),e._v(" "),t("div",{staticClass:"abstract"},[t("p",[e._v("\n        Basic認証は認証方式の１つで最も簡潔で基本的な認証で、セキュリティ面では弱い部分を持ちますが、\n        手軽に実装でき多くの環境で利用できる点で有用な認証の１つです。\n      ")]),e._v(" "),t("p",[e._v("\n        多くはApacheなどのアプリケーションサーバーでBasic認証を用意しますが、今回はExpressでBasic認証の設定をしてみます。\n      ")]),e._v(" "),t("p",[e._v("\n        実装済みのサンプルは\n        "),t("a",{attrs:{href:"https://github.com/irisAsh/express-basic-auth-tutorial",target:"_blank"}},[e._v("こちら")]),e._v("\n        のGithub上ありますのでご参照ください。\n      ")])]),e._v(" "),t("h2",{attrs:{id:"in-link-basic-auth-overview"}},[e._v("Basic認証の流れ")]),e._v(" "),t("p",[e._v("Basic認証の流れは以下のようになっています。")]),e._v(" "),t("ul",[t("li",[e._v("クライアントが保護のかかったページに訪れる")]),e._v(" "),t("li",[e._v("サーバーが認証を要求する")]),e._v(" "),t("li",[e._v("クライアントがユーザー名とパスワードをサーバーへ送信する")]),e._v(" "),t("li",[e._v("ユーザー名とパスワードが正しいことを確認しリクエストされたページの情報を返す")])]),e._v(" "),t("h2",{attrs:{id:"in-link-initialize-project"}},[e._v("サンプルプロジェクトの用意")]),e._v(" "),t("p",[e._v("Basic認証を試すためのサンプルプロジェクトを用意します。")]),e._v(" "),t("code-box",[e._v("\n$ express --view=pug express-basic-auth-tutorial\n    ")]),e._v(" "),t("p",[e._v("express-generatorでプロジェクトを作った後にページを３つ用意します。")]),e._v(" "),t("ul",[t("li",[e._v("/ : ルート画面")]),e._v(" "),t("li",[e._v("/tutorials : チュートリアル画面（このページにBasic認証保護をかけます）")]),e._v(" "),t("li",[e._v("/about : About画面")])]),e._v(" "),t("p",[e._v("Basic認証を試すだけですので、各画面は特に重要な実装はありません。")]),e._v(" "),t("h3",[e._v("ルート画面")]),e._v(" "),t("p",[t("code",[e._v("/tutorials")]),e._v(","),t("code",[e._v("/about")]),e._v("へのリンクとログアウトのボタンがあるだけです。\n      (サンプルではテンプレートエンジンにPugを使っています。Pugの書き方がわからない方は\n      "),t("a",{attrs:{href:"https://irisash.github.io/express/pug_reference/",target:"_blank"}},[e._v("Pugの書き方まとめ")]),e._v("\n      をご参考ください。)\n    ")]),e._v(" "),t("code-box",{attrs:{fileName:"index.pug"}},[e._v("\nextends layout\n\nblock content\n  h1= title\n  p Welcome to #{title}\n  ul\n    li\n      a(href='/tutorial') tutorial\n    li\n      a(href='/about') about\n  a(href='/logout') logout\n    ")]),e._v(" "),t("amp-img",{attrs:{src:"/images/express/basic_auth/root.png",alt:"ルート画面",title:"ルート画面",width:"640",height:"472",layout:"responsive"}}),e._v(" "),t("h3",[e._v("チュートリアル画面/About画面")]),e._v(" "),t("p",[e._v("画面に「Tutorial Page」が表示されるだけです。About画面も同様です。")]),e._v(" "),t("code-box",{attrs:{fileName:"routes/tutorials.js"}},[e._v("\nvar express = require('express');\nvar router = express.Router();\n\n/* GET users listing. */\nrouter.get('/', function(req, res, next) {\n  res.send('Tutorial Page');\n});\n\nmodule.exports = router;\n    ")]),e._v(" "),t("h2",{attrs:{id:"in-link-return-www-authenticate"}},[e._v("認証を要求する")]),e._v(" "),t("p",[e._v("\n      さて、今の状態ではチュートリアル画面は認証なしで閲覧できる状態です。\n      このページを表示するようにしようとすると認証が要求されるようにしましょう。\n    ")]),e._v(" "),t("p",[e._v("\n      そのためにはサーバーからのレスポンスで401のステータスコードを返し同時に「WWW-Authenticate」ヘッダをつけておくようにします。\n      この「WWW-Authenticate」ヘッダが返ってくると認証のポップアップが自動で表示されます。\n    ")]),e._v(" "),t("code-box",{attrs:{fileName:"app.js"}},[e._v("\napp.use(express.static(path.join(__dirname, 'public')));\n\n// 追加\napp.use('/*', function (req, res, next) {\n  if (req.originalUrl === '/about' || req.originalUrl === '/') {\n    next();\n  } else {\n    if (false /* 認証がOKならtrue */) {\n      next();\n    } else {\n      res.setHeader('WWW-Authenticate', 'Basic realm=\"tutorial\"');\n      next(createError(401));\n    }\n  }\n});\n\napp.use('/', indexRouter);\n    ")]),e._v(" "),t("p",[e._v("\n      処理の説明ですが、"),t("code",[e._v("req.originalUrl")]),e._v("の値が"),t("code",[e._v("/")]),e._v(","),t("code",[e._v("/about")]),e._v("以外の場合は認証を通るようにしています。\n    ")]),e._v(" "),t("p",[e._v("\n      とりあえずは全て認証NGとして、NGの場合は"),t("code",[e._v("res.setHeader('WWW-Authenticate', 'Basic realm=\"tutorial\"');")]),e._v("でヘッダに「WWW-Authenticate」を付与します。\n      また"),t("code",[e._v("realm=????")]),e._v("には任意の保護領域名を設定します。これにより既に認証有効かどうかを判定できます。\n    ")]),e._v(" "),t("p",[e._v("\n      最後に"),t("code",[e._v("next(createError(401));")]),e._v("で401エラーを発生させておきます。\n    ")]),e._v(" "),t("p",[e._v("\n      さて、"),t("code",[e._v("/tutorial")]),e._v("にアクセスしてチュートリアル画面を確認してみましょう。\n      ユーザー名とパスワードを要求されるポップアップが表示されるようになっています。  \n    ")]),e._v(" "),t("amp-img",{attrs:{src:"/images/express/basic_auth/popup.png",alt:"認証ポップアップ画面",title:"認証ポップアップ画面",width:"640",height:"472",layout:"responsive"}}),e._v(" "),t("h2",{attrs:{id:"in-link-decode-authenticate"}},[e._v("認証の情報を読み取る")]),e._v(" "),t("p",[e._v("\n      認証ポップアップは表示されたので、ユーザー名とパスワードを入力し「Sign In」を押された後の実装をしましょう。\n    ")]),e._v(" "),t("p",[e._v("\n      クライアントから送信されたリクエストのAuthorizationヘッダにはユーザー名とパスワードの情報が含まれています。\n      Basic認証では、ユーザ名とパスワードをコロン( : )で結合し、さらにBase64でエンコードされた情報が送信されるようになっています。\n      従ってサーバー側ではの逆の操作を行う必要があります。\n    ")]),e._v(" "),t("p",[e._v('\n      正確にはAuthorizationヘッダの値は"Basic base64でエンコードされた文字列"となるので初めの"Basic "は省く必要があります。\n    ')]),e._v(" "),t("p",[e._v("さて、app.jsを編集してBasic認証の実装を仕上げましょう。")]),e._v(" "),t("code-box",{attrs:{fileName:"app.js"}},[e._v("\n// 認証を登録したユーザーの情報\nvar allowedUsers = {\n  \"Express\": \"is good\"\n}\n// 認証判定関数\nvar judgeAllowedUse = function(authorization) {\n  // ヘッダの値が\"Basic \"であることを確認\n  if (!authorization || !authorization.startsWith(\"Basic\")) {\n    return false;\n  }\n  // エンコードされた文字列を取得\n  var encodedPassword = authorization.substring(6);\n  // エンコードされた文字列をデコード\n  var decodedPassword = Buffer(encodedPassword, 'base64').toString('binary');\n  // ユーザー名とパスワードを分ける\n  var colonIndex = decodedPassword.indexOf(':');\n  var username = decodedPassword.slice(0, colonIndex);\n  var password = decodedPassword.substring(colonIndex + 1);\n  // 送信されたユーザー名とパスワードが認証登録されたものか確認\n  if (!!allowedUsers[username] && allowedUsers[username] === password) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\napp.use('/*', function (req, res, next) {\n  if (req.originalUrl === '/about' || req.originalUrl === '/') {\n    next();\n  } else {\n    var authorization = req.headers[\"authorization\"] || \"\";\n    if (judgeAllowedUse(authorization)) {\n      // 認証OK\n      next();\n    } else {\n      // 認証NG\n      res.setHeader('WWW-Authenticate', 'Basic realm=\"tutorial\"');\n      next(createError(401));\n    }\n  }\n});\n    ")]),e._v(" "),t("p",[e._v("\n      まず認証登録ユーザーを設定します。ここでは"),t("code",[e._v("allowedUsers")]),e._v("に"),t("code",[e._v("{ ユーザー名: パスワード }")]),e._v("の形式で保存しています。\n    ")]),e._v(" "),t("p",[e._v("\n      ただし、実際の本番環境ではコード内に含めないようにしてください。\n      サーバー内のローカルファイルや環境変数など管理者以外が閲覧できない場所で情報を保存するようにしてください。\n    ")]),e._v(" "),t("p",[t("code",[e._v("judgeAllowedUse")]),e._v("は認証を判定する関数です。\n      引数にはAuthorizationのヘッダ値を渡すようにしています。\n      関数の処理は先程説明した通りエンコード時と逆の処理をしています。\n      送信された値が不正ならば"),t("code",[e._v("false")]),e._v("を返すようにしています。\n    ")]),e._v(" "),t("p",[e._v("Authorizationのヘッダ値は"),t("code",[e._v('req.headers["authorization"]')]),e._v("で取得できます。")]),e._v(" "),t("p",[e._v("\n      以上で実装は終わりです。\n      実際にチュートリアル画面を開いてみて登録してあるユーザー名とパスワードで認証を進めてください。\n      チュートリアル画面が表示されれば成功です。\n    ")]),e._v(" "),t("h2",{attrs:{id:"in-link-logout"}},[e._v("Basic認証のログアウト")]),e._v(" "),t("p",[e._v("\n      基本的にBasic認証を行なったブラウザが閉じられれば認証情報はリセットされます。\n      なので再度アクセスした時にまた認証が発生します。\n    ")]),e._v(" "),t("p",[e._v("\n      もし画面内からBasic認証をリセットしたい場合は、\n      任意のアクセスで「WWW-Authenticate」ヘッダを加えて401のレスポンスを返すようにするとログアウト状態にできます。\n    ")]),e._v(" "),t("code-box",{attrs:{fileName:"app.js"}},[e._v("\napp.use('/', indexRouter);\napp.use('/tutorial', tutorialsRouter);\napp.use('/about', aboutRouter);\n// ログアウト処理\napp.get('/logout', function (req, res) {\n  res.set('WWW-Authenticate', 'Basic realm=\"tutorial\"');\n  return res.sendStatus(401);\n});\n    ")]),e._v(" "),t("h2",{attrs:{id:"in-link-use-basic-auth"}},[e._v("basic-authを使う")]),e._v(" "),t("p",[e._v("\n      さて、ヘッダーから情報をデコードする処理をしてくれるライブラリがあるので使ってみましょう。\n      上のままで良いという方は、この実装は必要ないです。\n    ")]),e._v(" "),t("p",[e._v("\n      さてライブラリですが、\n      "),t("a",{attrs:{href:"https://github.com/jshttp/basic-auth",target:"_blank"}},[e._v("basic-auth")]),e._v("\n      というのがありますのでこれを使ってみましょう。\n    ")]),e._v(" "),t("code-box",[e._v("\n$ yarn add basic-auth\n    ")]),e._v(" "),t("p"),e._v(" "),t("code-box",{attrs:{fileName:"app.js"}},[e._v("\n// 追加\nvar basicAuth = require('basic-auth')\n...\n\n// 引数をcredentialsに変更\nvar judgeAllowedUse = function(credentials) {\n  if (!credentials) {\n    return false;\n  }\n  var username = credentials.name;\n  var password = credentials.pass;\n  var valid = true\n  valid = !!allowedUsers[username] && allowedUsers[username] === password && valid;\n  return valid;\n}\n\napp.use('/*', function (req, res, next) {\n  if (req.originalUrl === '/about' || req.originalUrl === '/') {\n    next();\n  } else {\n    // 変更\n    var credentials = basicAuth(req);\n    if (judgeAllowedUse(credentials)) {\n      next();\n    } else {\n      res.setHeader('WWW-Authenticate', 'Basic realm=\"tutorial\"');\n      next(createError(401));\n    }\n  }\n});\n    ")]),e._v(" "),t("p",[e._v("\n      ライブラリにリクエスト値を渡す("),t("code",[e._v("basicAuth(req);")]),e._v(")とユーザー名とパスワードをもつオブジェクトを返してくれます。\n      あとは先程と同じで判定関数で認証登録済みかを確認するだけです。\n      ライブラリを使うと少しだけ実装が楽になります。\n    ")])],1)}),[],!1,null,null,null);n.default=component.exports}}]);