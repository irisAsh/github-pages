(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{249:function(e,t,n){var content=n(253);"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,n(11).default)("40aafe93",content,!0,{sourceMap:!1})},250:function(e,t,n){"use strict";var r={name:"SideMenu",props:["menuSections"],computed:{routePath:function(){return this.$route.path}}},o=n(9),component=Object(o.a)(r,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("aside",{attrs:{id:"sidebar"}},e._l(e.menuSections,function(t){return n("section",{key:t.category},[n("div",{staticClass:"menu-overview"},[e._v(e._s(t.category))]),e._v(" "),e._l(t.menus,function(t){return n("div",{key:t.linkPath,staticClass:"menu-item"},[n("nuxt-link",{class:e.routePath==t.linkPath?"access-now":"",attrs:{to:t.linkPath}},[e._v("\n          "+e._s(t.title)+"\n        ")])],1)})],2)}),0)])},[],!1,null,null,null);t.a=component.exports},251:function(e,t){e.exports='<section><h1>Express入門（環境設定）</h1>\n<p>ここでは簡易なTODOアプリを作りながらNodeJSのWebアプリケーションフレームワーク <a href="https://expressjs.com/">Express</a> の使い方を学んでいきます。<br />\n<a href="https://github.com/irisAsh/express-todo-tutorial/tree/master">こちら</a>に完成済みのサンプルを置いておきます。サンプルは後記事の<a href="https://irisash.github.io/express/editrouting/">Expressのルーティングの設定</a>、<a href="https://irisash.github.io/express/mongodb/">ExpressでMongoDBを使う</a>の内容を含んでいます。</p>\n<p><strong>環境</strong></p>\n<ul>\n<li>NodeJS v8.15.0</li>\n<li>Express v4.16.0</li>\n</ul>\n<h2 id="setting">環境設定</h2>\n<p>プロジェクト作成から起動するまでの設定手順を説明していきます。</p>\n<h2 id="express-generator">express-generator のインストール</h2>\n<p>下記のコマンドで<code>express-generator</code>をグローバルインストールします。</p>\n<pre><code class="language-sh.prettyprint">$ yarn install express-generator -g\n</code></pre>\n<h2 id="init-project">プロジェクトの作成</h2>\n<p><code>express-generator</code>を使用すると簡単にWebアプリケーションプロジェクトを最小構成で生成できます。任意のフォルダで次のコマンドを実行してください。</p>\n<pre><code class="language-sh.prettyprint">$ express express-todo-tutorial --view=pug --git\n</code></pre>\n<p>実行すると<code>express-todo-tutorial</code>というフォルダが作成されます。このフォルダの中にWebアプリケーションを動かす最低限のファイルが用意されています。<br />\n先程実行した<code>express</code>コマンドでいくつかのオプションを使っているので説明しておきます。また、オプションにはここで使っていないものもあります。<code>express -h</code>を実行するとオプションの一覧が見れるので、興味があるものを使ってみてください。</p>\n<p><strong>--view=pug</strong></p>\n<p>このオプションは使用するテンプレートエンジンを指定します。ここでは <a href="https://pugjs.org/api/getting-started.html">Pug</a>(旧Jade) と呼ばれるテンプレートを指定しています。テンプレートエンジンは他にも色々あるので自分の好みにあったものを指定してください。</p>\n<p><strong>--git</strong></p>\n<p>このオプションをつけると<code>.gitignore</code>を最初に作成してくれます。最低限のGit管理外設定をしてくれるので、Git管理をする場合は指定しましょう。</p>\n<p>作成されたプロジェクトフォルダの初期構成は以下のようになっています。</p>\n<pre><code>.\n├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.pug\n    ├── index.pug\n    └── layout.pug\n</code></pre>\n<p>Webアプリケーションを作成したことがある方は大体の内容はわかるかと思います。初学者の方は作りながら説明していきますので、大まかで良いのでどのファイルがどこにあるかを覚えておけば良いでしょう。</p>\n<h2 id="running">起動確認</h2>\n<p>初期作成されたプロジェクトを起動して動作確認をしておきましょう。下記のコマンドで起動確認できます。プロジェクトフォルダ内に移動した後に<code>yarn install</code>でパッケージを取得しています。最後のコマンドが実際にExpressを起動するコマンドになります。</p>\n<pre><code>$ cd express-todo-tutorial\n$ yarn install\n$ DEBUG=express-todo-tutorial:* yarn start\n</code></pre>\n<p>コマンド実行後にブラウザから<a href="http://localhost:3000">http://localhost:3000</a>にアクセスしてみましょう。以下のように画面が表示されれば起動完了です。<br />\nまた、起動を終了するときは<code>Ctrl+c</code>で終了することができます。</p>\n<img src="images/express/gettingstarted/run-start.png" alt="起動確認" title="起動確認" style="max-height:400px;">\n<p>このままでも開発を進めることはできますが、ファイルを編集する度にサーバー停止・<code>yarn stat</code>実行をするのは手間になるので、<a href="https://github.com/remy/nodemon">nodemon</a> をインストールしておきましょう。<code>nodemon</code>を使うとファイル更新の度に自動でサーバーを再起動してくれます。</p>\n<pre><code>$ yarn add nodemon --dev\n</code></pre>\n<p>また、起動コマンドもスクリプトに定義しておきましょう。<code>package.json</code>に以下のようにスクリプトを追加します。</p>\n<pre><code class="language-json.prettyprint"># package.json\n  ...\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;node ./bin/www&quot;,\n    &quot;devstart&quot;: &quot;nodemon ./bin/www&quot;, # 追加\n    &quot;debugstart&quot;: &quot;DEBUG=express-todo-tutorial:* yarn run devstart&quot; # 追加\n  },\n</code></pre>\n<p>次のコマンドを実行して起動を確認しましょう。</p>\n<pre><code>$ yarn run debugstart\n</code></pre>\n<p><a href="http://localhost:3000">http://localhost:3000</a>で先程と同様に画面が表示されればOKです。<code>views/index.pug</code>を編集して<code>nodemon</code>の挙動を確認してみましょう。</p>\n<pre><code class="language-pug.prettyprint"># views/index.pug\n\nextends layout               \n                             \nblock content                \n  h1= title                  \n  p Welcome to #{title} !!!!!  # !!!!!を追加\n</code></pre>\n<p>サーバーが自動で再起動されて画面が変更されていることが確認できます。</p>\n</section>\n'},252:function(e,t,n){"use strict";var r=n(249);n.n(r).a},253:function(e,t,n){(e.exports=n(10)(!1)).push([e.i,".article-timestamp{margin-top:1.5rem;padding-top:.5rem;border-top:1px solid #aaa;color:#aaa;display:flex;flex-direction:row}.timestamp-container{display:flex;flex-direction:row;justify-content:center;align-items:center;padding-right:1rem}.timestamp-container i{margin-right:.4rem}",""])},254:function(e,t,n){"use strict";n(251);var r={name:"TableContent",props:["articleMd"],computed:{getInternalLinks:function(){if(!this||!this.$props||!this.$props.articleMd)return[];for(var e,t=/<h2 id="(.*)">(.*)<\/h2>/gm,n=[];null!=(e=t.exec(this.$props.articleMd));)e[1]&&e[2]&&n.push({id:e[1],title:e[2]});return n||[]}}},o=n(9),component=Object(o.a)(r,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{attrs:{id:"table-content"}},[n("aside",{attrs:{id:"table-content-list"}},e._l(e.getInternalLinks,function(t){return n("div",{key:t.id,staticClass:"link-container"},[n("nuxt-link",{directives:[{name:"scroll-to",rawName:"v-scroll-to",value:"#"+t.id,expression:"'#' + internalLink.id"}],attrs:{to:""}},[e._v("\n        "+e._s(t.title)+"\n      ")])],1)}),0)])},[],!1,null,null,null);t.a=component.exports},255:function(e,t,n){"use strict";var r={name:"ArticleTimestamp",props:["createdAt","updatedAt"]},o=(n(252),n(9)),component=Object(o.a)(r,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"article-timestamp"},[n("div",{staticClass:"timestamp-container"},[n("i",{staticClass:"far fa-clock"}),e._v(" "),n("p",[e._v(e._s(e.createdAt))])]),e._v(" "),n("div",{staticClass:"timestamp-container"},[n("i",{staticClass:"fas fa-clock"}),e._v(" "),n("p",[e._v(e._s(e.updatedAt))])])])},[],!1,null,null,null);t.a=component.exports},260:function(e){e.exports={tutorial:{category:"入門",iconClass:"fas fa-coins",menus:{setup:{linkPath:"/mariadb/setup/",title:"環境設定",subTitle:"MariaDB",menuIcon:"fas fa-coins",headerTitle:"MariaDBの環境設定",headerDescription:"MariaDBはMySQLから派生したオープンソースのリレーショナルデータベース管理システムです。LinuxOSでは標準のデータベースとして利用が広まっています。ここではMacOSでMariaDBを利用するための方法を説明します。"},user_and_authority:{linkPath:"/mariadb/user_and_authority/",title:"ユーザー管理と権限",subTitle:"CREATE USER / GRANT",menuIcon:"far fa-user-circle",headerTitle:"MariaDBのユーザー管理と権限",headerDescription:"MariaDBでのユーザー管理（ロール）と権限付与について説明していきます。環境構築後や入れ替え作業時くらいで頻繁に行う作業なので、忘れた時のメモとして活用ください。"},databases:{linkPath:"/mariadb/databases/",title:"データベースの作成",subTitle:"CREATE DATABASES",menuIcon:"fas fa-database",headerTitle:"MariaDBのデータベースの作成",headerDescription:"MariaDBでのデータベース作成について説明していきます。データベースの作成も頻繁に行う作業ではないのでメモとして活用ください。"}}}}},283:function(e,t){e.exports='<section><h1>MariaDB ユーザーと権限</h1>\n<p>MariaDBでのユーザー管理（ロール）と権限付与について説明していきます。環境構築後や入れ替え作業時くらいで頻繁に行う作業なので、忘れた時のメモとして活用ください。</p>\n<h2 id="select-user">ユーザーの確認</h2>\n<p>管理されているユーザーは<code>mysql.user</code>に保存されています。</p>\n<pre><code class="language-shell.prettyprint">MariaDB [(none)]&gt; SELECT host,user,password FROM mysql.user;\n+-----------+------+----------+\n| host      | user | password |\n+-----------+------+----------+\n| localhost | root |          |\n| 127.0.0.1 | root |          |\n| ::1       | root |          |\n| localhost |      |          |\n+-----------+------+----------+\n</code></pre>\n<h2 id="create-user">ユーザーの作成</h2>\n<p>ユーザーの作成コマンドです。大抵の場合はパスワードを付与してユーザーを作成することでしょう。パスワードは<code>IDENTIFIED BY \'パスワード\'</code>で付与できます。またDBに保存される場合はパスワードの値はハッシュ化されて登録されるようになっています。</p>\n<pre><code class="language-shell.prettyprint">MariaDB [(none)]&gt; CREATE USER test_user@localhost IDENTIFIED BY \'test\';\n\nMariaDB [(none)]&gt; SELECT host,user,password FROM mysql.user;\n+-----------+-----------+-------------------------------------------+\n| host      | user      | password                                  |\n+-----------+-----------+-------------------------------------------+\n| localhost | root      |                                           |\n| 127.0.0.1 | root      |                                           |\n| ::1       | root      |                                           |\n| localhost |           |                                           |\n| localhost | test_user | *94BDCEBE19083CE2A1F959FD02F964C7AF4CFC29 |\n+-----------+-----------+-------------------------------------------+\n</code></pre>\n<h2 id="drop-user">ユーザーの削除</h2>\n<p><code>DROP USER</code>または<code>DROP USER IF EXISTS</code>でユーザーを削除できます。ユーザーが存在しない場合、<code>IF EXISTS</code>なしではコンソールにエラー表示され、<code>IF EXISTS</code>ありではエラーはNoteに書き込まれます。<code>SHOW WARNINGS</code>でNoteの内容を確認できます。</p>\n<p>ユーザーが存在する場合。</p>\n<pre><code class="language-shell.prettyprint">MariaDB [(none)]&gt; DROP USER IF EXISTS test_user@localhost;\n\nMariaDB [(none)]&gt; SELECT host,user,password FROM mysql.user;\n+-----------+------+----------+\n| host      | user | password |\n+-----------+------+----------+\n| localhost | root |          |\n| 127.0.0.1 | root |          |\n| ::1       | root |          |\n| localhost |      |          |\n+-----------+------+----------+\n</code></pre>\n<p>ユーザーが存在しなかった場合。</p>\n<pre><code class="language-shell.prettyprint">MariaDB [(none)]&gt; DROP USER IF EXISTS test_user;\n\nMariaDB [(none)]&gt; SHOW WARNINGS;\n+-------+------+---------------------------------------------------+\n| Level | Code | Message                                           |\n+-------+------+---------------------------------------------------+\n| Note  | 1974 | Can\'t drop user \'test_user\'@\'%\'; it doesn\'t exist |\n+-------+------+---------------------------------------------------+\n</code></pre>\n<h2 id="replace-user">ユーザーの変更</h2>\n<p>ユーザー情報の変更は<code>ALTER USER</code>でできます。下記はユーザーのパスワードを変更しています。</p>\n<pre><code class="language-shell.prettyprint">MariaDB [(none)]&gt; ALTER USER test_user@localhost IDENTIFIED BY \'new_password\';\n\nMariaDB [(none)]&gt; SELECT host,user,password FROM mysql.user;\n+-----------+-----------+-------------------------------------------+\n| host      | user      | password                                  |\n+-----------+-----------+-------------------------------------------+\n| localhost | root      |                                           |\n| 127.0.0.1 | root      |                                           |\n| ::1       | root      |                                           |\n| localhost |           |                                           |\n| localhost | test_user | *0913BF2E2CE20CE21BFB1961AF124D4920458E5F |\n+-----------+-----------+-------------------------------------------+\n</code></pre>\n<p><code>CREATE OR REPLACE USER</code>でユーザーを作り直すこともできます。ただし、下記の処理はパスワードを変更してユーザーを作り直していますが、変更前の権限など情報は初期の状態（権限なし）となってしまいます。<code>ALTER USER</code>であれば作り直しではないので、パスワードを変更されるだけでその他の情報はそのままです。</p>\n<pre><code class="language-shell.prettyprint">MariaDB [(none)]&gt; CREATE OR REPLACE USER test_user@localhost IDENTIFIED BY \'new_password\';\n\nMariaDB [(none)]&gt; SELECT host,user,password FROM mysql.user;\n+-----------+-----------+-------------------------------------------+\n| host      | user      | password                                  |\n+-----------+-----------+-------------------------------------------+\n| localhost | root      |                                           |\n| 127.0.0.1 | root      |                                           |\n| ::1       | root      |                                           |\n| localhost |           |                                           |\n| localhost | test_user | *0913BF2E2CE20CE21BFB1961AF124D4920458E5F |\n+-----------+-----------+-------------------------------------------+\n</code></pre>\n<h2 id="login-user">ユーザーを指定してログイン</h2>\n<p>作成されたユーザーを指定してログインすることができます。<code>mysql -u ユーザー名</code>でログインができます。またパスワードを設定する場合は<code>-p</code>オプションをつけます。<code>-p</code>オプションをつけるとコマンド実行後にパスワードの確認が表示されます。もしワンライナーでログインしたい場合は<code>-p</code>の後にスペースなしでパスワードを付与すれば確認なしでログインできます。</p>\n<pre><code class="language-shell.prettyprint">$ mysql -u test_user -p\nEnter password:\n</code></pre>\n<pre><code class="language-shell.prettyprint">$ mysql -u test_user -pパスワード\n</code></pre>\n<h2 id="grant-user">ユーザーの権限の確認</h2>\n<p>ユーザーの権限は<code>SHOW GRANTS FOR</code>で確認できます。</p>\n<pre><code class="language-shell.prettyprint">MariaDB [(none)]&gt; SHOW GRANTS FOR test_user@localhost;\n+------------------------------------------------------------------------------------------------------------------+\n| Grants for test_user@localhost                                                                                   |\n+------------------------------------------------------------------------------------------------------------------+\n| GRANT USAGE ON *.* TO \'test_user\'@\'localhost\' IDENTIFIED BY PASSWORD \'*0913BF2E2CE20CE21BFB1961AF124D4920458E5F\' |\n+------------------------------------------------------------------------------------------------------------------+\n</code></pre>\n<h2 id="grant-user">権限の付与</h2>\n<p>権限は<code>GRANT 権限の種類 ON DB名.* TO ユーザー@ホスト</code>で付与できます。<br />\n下記の処理は<code>test_user</code>に全権限を付与しています。権限の種類は<a href="https://mariadb.com/kb/en/library/grant/#the-all-privileges-privilege">こちら</a>を参照ください。</p>\n<pre><code class="language-shell.prettyprint">MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON *.* TO test_user@localhost;\n\nMariaDB [(none)]&gt; SHOW GRANTS FOR test_user@localhost;\n+---------------------------------------------------------------------------------------------------------------------------+\n| Grants for test_user@localhost                                                                                            |\n+---------------------------------------------------------------------------------------------------------------------------+\n| GRANT ALL PRIVILEGES ON *.* TO \'test_user\'@\'localhost\' IDENTIFIED BY PASSWORD \'*0913BF2E2CE20CE21BFB1961AF124D4920458E5F\' |\n+---------------------------------------------------------------------------------------------------------------------------+\n</code></pre>\n<p>DBを限定して権限を与える場合。</p>\n<pre><code class="language-shell.prettyprint">MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON dbname.* TO test_user@localhost;\n\nMariaDB [(none)]&gt; SHOW GRANTS FOR test_user@localhost;\n+------------------------------------------------------------------------------------------------------------------+\n| Grants for test_user@localhost                                                                                   |\n+------------------------------------------------------------------------------------------------------------------+\n| GRANT USAGE ON *.* TO \'test_user\'@\'localhost\' IDENTIFIED BY PASSWORD \'*94BDCEBE19083CE2A1F959FD02F964C7AF4CFC29\' |\n| GRANT ALL PRIVILEGES ON `dbname`.* TO \'test_user\'@\'localhost\'                                                    |\n+------------------------------------------------------------------------------------------------------------------+\n</code></pre>\n<h2 id="reference-link">参考サイト</h2>\n<p><a href="https://mariadb.com/kb/en/library/account-management-sql-commands/">Account Management SQL Commands</a></p>\n</section>\n'},308:function(e,t,n){"use strict";n.r(t);var r=n(255),o=n(250),c=n(254),l=n(260),d=n(283),h=n.n(d),m={components:{ArticleTimestamp:r.a,SideMenu:o.a,TableContent:c.a},data:function(){return{menuSections:l,datePublished:new Date(2019,4,19,19,1),dateModified:new Date(2019,4,19,22,0)}},computed:{ArticleMd:function(){return h.a}},head:function(){var e=l.tutorial.menus.user_and_authority,article=this.$createArticleStructuredData({headline:e.headerTitle,datePublished:this.$moment(this.datePublished).format(),dateModified:this.$moment(this.dateModified).format()}),t=this.$createBreadcrumbListStructuredData({itemList:[{name:"足跡はもう見えない",url:this.$constants.domain},{name:"Express",url:this.$constants.domain+"mariadb/"},{name:e.headerTitle,url:this.$constants.domain+"mariadb/user_and_authority/"}]});return{title:e.headerTitle,meta:[{hid:"description",name:"description",content:e.headerDescription}],__dangerouslyDisableSanitizers:["script"],script:[article,t]}}},E=n(9),component=Object(E.a)(m,function(){var e=this.$createElement,t=this._self._c||e;return t("div",{attrs:{id:"wrapper"}},[t("article",{attrs:{id:"main"}},[t("section",[t("div",{domProps:{innerHTML:this._s(this.ArticleMd)}}),this._v(" "),t("article-timestamp",{attrs:{createdAt:this.$moment(this.datePublished).format("l"),updatedAt:this.$moment(this.dateModified).format("l")}})],1)]),this._v(" "),t("side-menu",{attrs:{menuSections:this.menuSections}}),this._v(" "),t("table-content",{attrs:{articleMd:this.ArticleMd}})],1)},[],!1,null,null,null);t.default=component.exports}}]);