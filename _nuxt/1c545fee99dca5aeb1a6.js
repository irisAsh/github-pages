(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{247:function(e){e.exports=JSON.parse('{"tutorial":{"category":"入門","categoryLabel":"React Native","categoryPath":"/react_native/","iconClass":"fab fa-react","menus":{"initialize":{"linkPath":"/react_native/initialize/","ogpImage":"/images/react_native/initialize/ogp.png","title":"プロジェクトの作成（ Expo ）","subTitle":"expo init","menuIcon":"fab fa-react","headerTitle":"React Native チュートリアル（プロジェクトの作成 Expo ）","headerDescription":"React Native でのプロジェクト作成を説明していきます。React Nativeで開発を始めるには、Expo利用とReact Native CLI利用の２通りの方法があります。ここではExpo利用の開発を説明していきます。"},"form_screen":{"linkPath":"/react_native/form_screen/","ogpImage":"/images/react_native/form_screen/ogp.png","title":"フォーム画面の作成","subTitle":"State, Style","menuIcon":"fas fa-tasks","headerTitle":"React Native チュートリアル（TODOアプリのフォーム画面作成 ）","headerDescription":"React Native でTODOアプリで必要事項を入力するフォーム画面作成する方法を説明します。主に React Native での state や style、いくつかのAPIの使い方を説明していきます。"},"use_props":{"linkPath":"/react_native/use_props/","ogpImage":"/images/react_native/use_props/ogp.png","title":"コンポーネント化","subTitle":"Props","menuIcon":"fas fa-tools","headerTitle":"コンポーネントを作って共通化する（ React Native ）","headerDescription":"React の重要な機能の１つコンポーネントを利用して、重複している描画処理を共通化してコードの整理をしてみましょう。コンポーネントを作成して再利用することで重複するコードをなくすことができます。"},"use_react_navigation":{"linkPath":"/react_native/use_react_navigation/","ogpImage":"/images/react_native/use_react_navigation/ogp.png","title":"画面遷移の利用","subTitle":"React Navitation","menuIcon":"fas fa-chevron-circle-right","headerTitle":"React Navigation を使って画面遷移を実装する（Expo）","headerDescription":"前回作成したTODOアプリのフォーム画面と一覧表示画面を分けて画面移動ができるように改良してみます。画面遷移には React Navigation というパッケージを利用することで簡単に作ることができます。"}}}}')},314:function(e,n,t){"use strict";t.r(n);var o=t(234),r=t(235),c=t(247),l={components:{ArticlePage:o.a,CodeBox:r.a},data:function(){return{menuSections:c,categoryName:"tutorial",articleName:"form_screen",datePublished:new Date("2020/01/19 22:00:00 +0900"),dateModified:new Date("2020/01/19 22:00:00 +0900"),contents:[{id:"in-link-create-form-part",title:"フォーム項目の作成"},{id:"use-function-component",title:"関数コンポーネント"}]}}},v=t(12),component=Object(v.a)(l,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("article-page",{attrs:{menuSections:e.menuSections,contents:e.contents,categoryName:e.categoryName,articleName:e.articleName,datePublished:e.datePublished,dateModified:e.dateModified}},[t("h1",[e._v("コンポーネントを作って共通化する（ React Native ）")]),e._v(" "),t("div",{staticClass:"abstract"},[t("p",[e._v("\n        React の重要な機能のコンポーネントを利用してみましょう。\n        コンポーネントとは部品作成のようなもので、既に使った\n        "),t("code",[e._v("View")]),e._v(", "),t("code",[e._v("TextInput")]),e._v(", "),t("code",[e._v("Button")]),e._v("\n        がそうです。\n        重複する処理をコンポーネントにして置くと、\n        共通化できるのでコード整理や拡張実装をスムーズにすることができます。\n      ")]),e._v(" "),t("p",[e._v("\n        また、コンポーネントを利用する際には Props という React では馴染みの機能を使用します。\n        これはコンポーネントに渡すパラメータのようなもので、\n        コンポーネントの呼び出し側からコンポーネントへ値を渡すために利用します。\n      ")]),e._v(" "),t("p",[e._v("\n        ここでは\n        "),t("nuxt-link",{attrs:{to:"/react_native/form_screen/"}},[e._v("前回")]),e._v("\n        作成したフォーム画面を改修して、フォーム項目の共通化を実装していきます。\n      ")],1)]),e._v(" "),t("h2",{attrs:{id:"in-link-create-form-part"}},[e._v("フォーム項目の作成")]),e._v(" "),t("p",[e._v("\n      コード管理のため作成するコンポーネントは"),t("code",[e._v("src/components")]),e._v("\n      に作成することにします。\n    ")]),e._v(" "),t("code-box",[e._v("\n$ mkdir src\n$ mkdir src/components\n    ")]),e._v(" "),t("p",[e._v("\n      さて作成する部分ですが、フォームの項目は「項目のラベル＋テキスト入力」で構成されています。\n      今、項目は「やること」「メモ」の２つですが、項目の数がもっと増えると\n      同じようなコードを何回も書かないといけません。\n      なのでこのフォーム項目をコンポーネントにして共通化してしまいましょう。\n    ")]),e._v(" "),t("code-box",{attrs:{fileName:"src/components/FormInput.js"}},[e._v("\nimport React, { Component } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  StyleSheet\n} from 'react-native';\n\nexport default class FormInput extends Component {\n  render() {\n    const {\n      label,\n      value,\n      placeholder,\n      onChangeText\n    } = this.props;\n\n    return (\n      <View style={styles.formGroup}>\n        <Text style={styles.formLabel}>{label}</Text>\n        <TextInput\n          style={styles.formControl}\n          value={value}\n          placeholder={placeholder}\n          onChangeText={v => onChangeText(v)}\n        />\n      </View>\n    );\n  }\n}\n\nFormInput.defaultProps = {\n  label: \"\",\n  value: \"\",\n  placeholder: \"\",\n  onChangeText: _v => null\n};\n\nconst styles = StyleSheet.create({\n  formGroup: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 16,\n  },\n  formLabel: {\n    paddingRight: 16,\n  },\n  formControl: {\n    height: 40,\n    width: 160,\n    padding: 8,\n    borderColor: 'gray',\n    borderWidth: 1\n  }\n});\n    ")]),e._v(" "),t("p"),e._v(" "),t("code-box",{attrs:{fileName:"App.js"}},[e._v('\n...(省略)\n\n// 追加\nimport FormInput from \'./src/components/FormInput\';\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoValue: "",\n      memoValue: "",\n      todoList: [],\n    };\n  }\n\n  render() {\n    const { todoValue, memoValue, todoList } = this.state;\n\n    return (\n      <SafeAreaView style={styles.container}>\n        <FormInput\n          label="やること"\n          value={todoValue}\n          placeholder="何かやること"\n          onChangeText={v => this.setState({ todoValue: v })}\n        />\n        <FormInput\n          label="メモ"\n          value={memoValue}\n          placeholder="何かメモ"\n          onChangeText={v => this.setState({ memoValue: v })}\n        />\n        <Button\n          title="登録"\n          onPress={() => {\n            const newList = todoList.concat({ todo: todoValue, memo: memoValue });\n            this.setState({\n              todoValue: "",\n              memoValue: "",\n              todoList: newList\n            });\n          }}\n        />\n\n        ...\n\n    ')]),e._v(" "),t("p",[e._v("\n      上記のコードがフォーム項目をコンポーネントにしたものとその呼び出しした内容です。\n    ")]),e._v(" "),t("p",[e._v("\n      コンポーネントは基本的に"),t("code",[e._v("extends Component")]),e._v("で React の Component を継承したクラスになります。\n      そして"),t("code",[e._v("render")]),e._v("で描画内容を返すようにします。\n      ここでは"),t("code",[e._v("App.js")]),e._v("にあったフォーム項目の描画内容を返すようにしています。\n    ")]),e._v(" "),t("p",[e._v("\n      描画の値には"),t("code",[e._v("this.props")]),e._v("のオブジェクトにあるプロパティの値を使っています。\n      この"),t("code",[e._v("this.props")]),e._v("には、コンポーネントの呼び出し側（親）から渡されたプロパティが含まれています。\n      呼び出し側の"),t("code",[e._v("App.js")]),e._v("をみてみると"),t("code",[e._v("FormInput")]),e._v("\n      に「やること」「メモ」用にそれぞれ値を渡しています。\n      このようにコンポーネントではPropsを使って、呼び出し側（親）からコンポーネント側（子）へ値を渡します。\n    ")]),e._v(" "),t("p",[e._v("\n      クラス定義の後に"),t("code",[e._v("FormInput.defaultProps")]),e._v("とある箇所がありますが、こちらはPropsの初期値を指定しています。\n      呼び出し側から該当するプロパティの値が渡されなかった場合に\n      "),t("code",[e._v("defaultProps")]),e._v("で指定された値が使われるようになります。\n    ")]),e._v(" "),t("h2",{attrs:{id:"use-function-component"}},[e._v("関数コンポーネント")]),e._v(" "),t("p",[e._v("\n      コンポーネントは関数型で書くこともできます。このコンポーネントを関数コンポーネントと呼びます。\n      下記のコードが先程のフォーム項目コンポーネントを関数化したものです。\n    ")]),e._v(" "),t("code-box",{attrs:{fileName:"src/components/FormInput.js"}},[e._v('\nconst FormInput = ({\n  label = "",\n  value = "",\n  placeholder = "",\n  onChangeText = _v => null\n}) => (\n  <View style={styles.formGroup}>\n    <Text style={styles.formLabel}>{label}</Text>\n    <TextInput\n      style={styles.formControl}\n      value={value}\n      placeholder={placeholder}\n      onChangeText={v => onChangeText(v)}\n    />\n  </View>\n);\n\nexport default FormInput;\n    ')]),e._v(" "),t("p",[e._v("\n      関数コンポーネントもクラス型のコンポーネントも同じものです。\n      クラス型は、"),t("code",[e._v("constructor")]),e._v("や"),t("code",[e._v("componentDidMount")]),e._v("等の\n      ライフサイクルメソッドを利用する場合に利用します。\n      基本的にはライフサイクルメソッドを利用しない簡素なコンポーネントは関数型を使い、\n      複雑な処理を行うようなコンポーネントはクラス型で作成していけば良いです。\n    ")]),e._v(" "),t("p",[e._v("\n      次のステップ：\n      "),t("nuxt-link",{attrs:{to:"/react_native/use_react_navigation/"}},[e._v("画面遷移の利用")])],1)],1)}),[],!1,null,null,null);n.default=component.exports}}]);