(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{247:function(e){e.exports=JSON.parse('{"tutorial":{"category":"入門","categoryLabel":"Rails","categoryPath":"/rails/","iconClass":"fas fa-home","menus":{"setup":{"linkPath":"/rails/setup/","title":"環境設定","subTitle":"Gem / Bundle","menuIcon":"fas fa-home","headerTitle":"Ruby on Rails 5 の環境設定","headerDescription":"Ruby on Rails 5 の環境設定について説明します。ここでは、Rails new は使わずプロジェクト内でGemを管理してプロジェクトを作成します。また今後の記事では入門としてToDoアプリを作成しながら解説を進めていきます。"},"use_mariadb":{"linkPath":"/rails/use_mariadb/","ogpImage":"/images/rails/use_mariadb/ogp.png","title":"MariaDBを利用する","subTitle":"MariaDB","menuIcon":"fas fa-coins","headerTitle":"Ruby on RailsでMariaDBを利用する","headerDescription":"Railsプロジェクト作成直後にMariaDBを導入する手順を説明します。Rails初期設定ではSQLite3を利用するようになっていますが、プロジェクト規模が多くなる場合は関係性のあるデータベースを利用する方が良いです。"},"scaffold":{"linkPath":"/rails/scaffold/","title":"scaffoldを使う","subTitle":"rails generate scaffold","menuIcon":"fas fa-folder","headerTitle":"rails generate scaffoldを使ってページを追加する","headerDescription":"rails generate scaffoldを使って新規ページを追加してみます。scaffoldを使用するとコントローラー、ビュー、モデル等の必要とするファイルが全て自動生成されます。config/application.rbを編集して任意の単位で自動生成の拒否設定をすることもできます。"},"use_hamlit":{"linkPath":"/rails/use_hamlit/","ogpImage":"/images/rails/use_hamlit/ogp.png","title":"Hamlitを使う","subTitle":"hamlit-rails","menuIcon":"fas fa-crown","headerTitle":"HTMLテンプレートHamlitを使う","headerDescription":"Rails標準のHTMLテンプレートはERBが使われています。他にもHamlやSlimといったものがありますが、今回はHamlitというHTMLテンプレートを使う方法を説明します。HamlitはHamlの拡張でHamlをより高速にしたものです。記法はHamlと同様なのでHamlユーザーも利用しやすいでしょう。"},"add_page":{"linkPath":"/rails/add_page/","title":"画面作成の基本","subTitle":"rails generate controller","menuIcon":"far fa-newspaper","headerTitle":"Railsで新規画面を作成する基本な流れ","headerDescription":"Railsで新規画面を作成する基本的な流れを説明します。今回は自動生成を使います。rails generate controllerでビューとコントローラーの自動生成をし、適宜画面を編集し画面を作成していきます。"},"use_devise":{"linkPath":"/rails/use_devise/","title":"Deviseで認証を追加する","subTitle":"Devise","menuIcon":"fas fa-passport","headerTitle":"Deviseを利用して認証を追加する","headerDescription":"Deviseを使ってユーザー認証処理を追加して見ます。Deviseはサインアップやログインなど認証の処理を提供してくれる便利なGemです。Deviseは複雑で柔軟性はないですが多機能を提供しているので独自のカスタマイズがなければとても有効です。"}}},"support_tool":{"category":"開発支援ツール","categoryLabel":"Rails","categoryPath":"/rails/","iconClass":"fas fa-hands-helping","menus":{"use_rubocop":{"linkPath":"/rails/use_rubocop/","ogpImage":"/images/rails/use_rubocop/ogp.png","title":"RuboCopを使う","subTitle":"RuboCop","menuIcon":"fas fa-robot","headerTitle":"RuboCopを導入してコードを整理する","headerDescription":"RubocopはRubyコードのスタイルガイドに沿ってコード解析をしてくれるツールです。プロジェクトの開発で実装する人数が増えればソースコードの記述が統一されなくなっていきます。コード解析ツールを使えばスタイルガイドに順守していない場合に警告を表示して知らせてくれます。"}}}}')},310:function(e,t,n){"use strict";n.r(t);var l=n(248),r=n(249),o=n(247),_={components:{ArticlePage:l.a,CodeBox:r.a},data:function(){return{menuSections:o,categoryName:"tutorial",articleName:"use_mariadb",datePublished:new Date("2019/06/02 22:00:00 +0900"),dateModified:new Date("2020/01/01 01:00:00 +0900"),contents:[{id:"in-link-install-gem",title:"MariaDB用のGem"},{id:"in-link-settings",title:"MariaDBの設定"},{id:"in-link-create-database",title:"データベースを作成する"},{id:"in-link-reference-links",title:"参考サイト"}]}}},d=n(12),component=Object(d.a)(_,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("article-page",{attrs:{menuSections:e.menuSections,contents:e.contents,categoryName:e.categoryName,articleName:e.articleName,datePublished:e.datePublished,dateModified:e.dateModified}},[n("h1",[e._v("Ruby on RailsでMariaDBを利用する")]),e._v(" "),n("div",{staticClass:"abstract"},[n("p",[n("nuxt-link",{attrs:{to:"/rails/setup/"}},[e._v("環境設定")]),e._v("\n        でRailsプロジェクト作成をしました。\n        今度はプロジェクト作成後にMariaDBを導入する手順を説明します。\n      ")],1),e._v(" "),n("p",[e._v("\n        Rails初期設定ではSQLightを利用するようになっていますが、\n        プロジェクト規模が多くなる場合は関係性のあるデータベースを利用する方が良いです。\n        そこで今回はオープンソースのリレーショナルデータベースであるMariaDBを導入します。\n        MariaDBはMySQLから派生したRDBSで互換性もあり、MySQLユーザーも親しみやすいと思います。\n      ")]),e._v(" "),n("p",[e._v("\n        MariaDBについての説明は\n        "),n("nuxt-link",{attrs:{to:"/mariadb/"}},[e._v("こちら")]),e._v("\n        を参考にしてください。\n        また、実装サンプルは\n        "),n("a",{attrs:{href:"https://github.com/irisAsh/rails-todo-tutorial/tree/ver-use-mariadb",target:"_blank"}},[e._v("Github")]),e._v("\n        においていますのでご参照ください。\n      ")],1)]),e._v(" "),n("h2",{attrs:{id:"in-link-install-gem"}},[e._v("MariaDB用のGem")]),e._v(" "),n("p",[e._v("\n      Gemfileを開いてMariaDBのためのGemを追加します。\n      デフォルトのSQLite3のGemは不要なので削除します。\n    ")]),e._v(" "),n("code-box",{attrs:{fileName:"Gemfile"}},[e._v("\n# デフォルトのsqlite3は削除\n# Use sqlite3 as the database for Active Record\n#gem 'sqlite3'\n\ngem 'mysql2'\n    ")]),e._v(" "),n("p",[e._v("Gemfile編集後はBundlerでインストールします。")]),e._v(" "),n("code-box",[e._v("\n$ bundle install\n    ")]),e._v(" "),n("h2",{attrs:{id:"in-link-settings"}},[e._v("MariaDBの設定")]),e._v(" "),n("p",[e._v("Railsではデータベースの設定は"),n("code",[e._v("config/database.yml")]),e._v("で記載するようになっています。")]),e._v(" "),n("code-box",{attrs:{fileName:"config/database.yml"}},[e._v("\ndefault: &default\n  adapter: mysql2\n  encoding: utf8\n  pool: 5\n  timeout: 5000\n  username: rails_todo_tutorial_user\n  password: test\n  socket: /tmp/mysql.sock\n\ndevelopment:\n  <<: *default\n  database: rails_todo_tutorial_development\n\ntest:\n  <<: *default\n  database: rails_todo_tutorial_test\n\nproduction:\n  <<: *default\n  database: rails_todo_tutorial_production\n    ")]),e._v(" "),n("p",[n("code",[e._v("default: &default")]),e._v("にネストして記述することで共通の設定を持ち回せるようになっています。\n      利用する際は"),n("code",[e._v("<<: *default")]),e._v("と記述すると参照できます。\n    ")]),e._v(" "),n("h3",[e._v("adapter")]),e._v(" "),n("p",[n("code",[e._v("adapter")]),e._v("には利用するデータベースを指定します。MariaDBの場合は"),n("code",[e._v("mysql2")]),e._v("です。")]),e._v(" "),n("h3",[e._v("encoding")]),e._v(" "),n("p",[e._v("文字コードを指定します。通常は"),n("code",[e._v("utf8")]),e._v("になるでしょう。")]),e._v(" "),n("h3",[e._v("pool")]),e._v(" "),n("p",[e._v("コネクションプールの数を設定します。")]),e._v(" "),n("h3",[e._v("timeout")]),e._v(" "),n("p",[e._v("接続のタイムアウトの時間を設定します。単位はミリ秒。")]),e._v(" "),n("h3",[e._v("socket")]),e._v(" "),n("p",[e._v("\n      MariaDBのソケットファイルの位置を指定します。通常はなくても問題ないです。\n      設定でソケットファイルの場所を変更している場合は必要です。\n    ")]),e._v(" "),n("h3",[e._v("username")]),e._v(" "),n("p",[e._v("\n      データベースに接続する際のユーザー名です。\n      管理者ユーザー"),n("code",[e._v("root")]),e._v("であれば不要ですが、\n      "),n("code",[e._v("root")]),e._v("以外の場合は予めMariaDBコンソールから作成しておく必要があります。\n    ")]),e._v(" "),n("p",[e._v("\n      ユーザーの作成方法は\n      "),n("nuxt-link",{attrs:{to:"/mariadb/user_and_authority/"}},[e._v("MariaDBのユーザーと権限")]),e._v("\n      をご参照ください。\n    ")],1),e._v(" "),n("h3",[e._v("password")]),e._v(" "),n("p",[e._v("\n      データベースに接続するユーザーのパスワードです。\n      本番環境の場合はソースコードに記載せず環境変数に持たせるなどの工夫が必要です。\n    ")]),e._v(" "),n("h3",[e._v("database")]),e._v(" "),n("p",[e._v("作成するデータベースの名前です。")]),e._v(" "),n("h3",[e._v("host")]),e._v(" "),n("p",[e._v("データベースのアクセス先です。")]),e._v(" "),n("h2",{attrs:{id:"in-link-create-database"}},[e._v("データベースを作成する")]),e._v(" "),n("p",[e._v("先程設定した内容でデータベースを作成します。")]),e._v(" "),n("code-box",[e._v("\n$ bin/rails db:create\nCreated database 'rails_todo_tutorial_development'\nCreated database 'rails_todo_tutorial_test'\n    ")]),e._v(" "),n("p",[e._v("\n      これでデータベースが作成されました。\n      実際にMariaDBのコンソールからみると"),n("code",[e._v("config/database.yml")]),e._v("の\n      ユーザー所有で設定した名称のデータベースが作成されていることが確認できます。\n    ")]),e._v(" "),n("p",[e._v("\n      次のステップ：\n      "),n("nuxt-link",{attrs:{to:"/rails/scaffold/"}},[e._v("scaffoldを使う")])],1),e._v(" "),n("h2",{attrs:{id:"in-link-reference-links"}},[e._v("参考サイト")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://guides.rubyonrails.org/configuring.html#configuring-a-mysql-or-mariadb-database",target:"_blank"}},[e._v("3.16.2 Configuring a MySQL or MariaDB Database")])])])],1)}),[],!1,null,null,null);t.default=component.exports}}]);