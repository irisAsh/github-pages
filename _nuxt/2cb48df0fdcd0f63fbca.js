(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{249:function(e,t,n){var content=n(253);"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,n(11).default)("40aafe93",content,!0,{sourceMap:!1})},250:function(e,t,n){"use strict";var r={name:"SideMenu",props:["menuSections"],computed:{routePath:function(){return this.$route.path}}},o=n(9),component=Object(o.a)(r,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("aside",{attrs:{id:"sidebar"}},e._l(e.menuSections,function(t){return n("section",{key:t.category},[n("div",{staticClass:"menu-overview"},[e._v(e._s(t.category))]),e._v(" "),e._l(t.menus,function(t){return n("div",{key:t.linkPath,staticClass:"menu-item"},[n("nuxt-link",{class:e.routePath==t.linkPath?"access-now":"",attrs:{to:t.linkPath}},[e._v("\n          "+e._s(t.title)+"\n        ")])],1)})],2)}),0)])},[],!1,null,null,null);t.a=component.exports},251:function(e,t){e.exports='<section><h1>Express入門（環境設定）</h1>\n<p>ここでは簡易なTODOアプリを作りながらNodeJSのWebアプリケーションフレームワーク <a href="https://expressjs.com/">Express</a> の使い方を学んでいきます。<br />\n<a href="https://github.com/irisAsh/express-todo-tutorial/tree/master">こちら</a>に完成済みのサンプルを置いておきます。サンプルは後記事の<a href="https://irisash.github.io/express/editrouting/">Expressのルーティングの設定</a>、<a href="https://irisash.github.io/express/mongodb/">ExpressでMongoDBを使う</a>の内容を含んでいます。</p>\n<p><strong>環境</strong></p>\n<ul>\n<li>NodeJS v8.15.0</li>\n<li>Express v4.16.0</li>\n</ul>\n<h2 id="setting">環境設定</h2>\n<p>プロジェクト作成から起動するまでの設定手順を説明していきます。</p>\n<h2 id="express-generator">express-generator のインストール</h2>\n<p>下記のコマンドで<code>express-generator</code>をグローバルインストールします。</p>\n<pre><code class="language-sh.prettyprint">$ yarn install express-generator -g\n</code></pre>\n<h2 id="init-project">プロジェクトの作成</h2>\n<p><code>express-generator</code>を使用すると簡単にWebアプリケーションプロジェクトを最小構成で生成できます。任意のフォルダで次のコマンドを実行してください。</p>\n<pre><code class="language-sh.prettyprint">$ express express-todo-tutorial --view=pug --git\n</code></pre>\n<p>実行すると<code>express-todo-tutorial</code>というフォルダが作成されます。このフォルダの中にWebアプリケーションを動かす最低限のファイルが用意されています。<br />\n先程実行した<code>express</code>コマンドでいくつかのオプションを使っているので説明しておきます。また、オプションにはここで使っていないものもあります。<code>express -h</code>を実行するとオプションの一覧が見れるので、興味があるものを使ってみてください。</p>\n<p><strong>--view=pug</strong></p>\n<p>このオプションは使用するテンプレートエンジンを指定します。ここでは <a href="https://pugjs.org/api/getting-started.html">Pug</a>(旧Jade) と呼ばれるテンプレートを指定しています。テンプレートエンジンは他にも色々あるので自分の好みにあったものを指定してください。</p>\n<p><strong>--git</strong></p>\n<p>このオプションをつけると<code>.gitignore</code>を最初に作成してくれます。最低限のGit管理外設定をしてくれるので、Git管理をする場合は指定しましょう。</p>\n<p>作成されたプロジェクトフォルダの初期構成は以下のようになっています。</p>\n<pre><code>.\n├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.pug\n    ├── index.pug\n    └── layout.pug\n</code></pre>\n<p>Webアプリケーションを作成したことがある方は大体の内容はわかるかと思います。初学者の方は作りながら説明していきますので、大まかで良いのでどのファイルがどこにあるかを覚えておけば良いでしょう。</p>\n<h2 id="running">起動確認</h2>\n<p>初期作成されたプロジェクトを起動して動作確認をしておきましょう。下記のコマンドで起動確認できます。プロジェクトフォルダ内に移動した後に<code>yarn install</code>でパッケージを取得しています。最後のコマンドが実際にExpressを起動するコマンドになります。</p>\n<pre><code>$ cd express-todo-tutorial\n$ yarn install\n$ DEBUG=express-todo-tutorial:* yarn start\n</code></pre>\n<p>コマンド実行後にブラウザから<a href="http://localhost:3000">http://localhost:3000</a>にアクセスしてみましょう。以下のように画面が表示されれば起動完了です。<br />\nまた、起動を終了するときは<code>Ctrl+c</code>で終了することができます。</p>\n<img src="images/express/gettingstarted/run-start.png" alt="起動確認" title="起動確認" style="max-height:400px;">\n<p>このままでも開発を進めることはできますが、ファイルを編集する度にサーバー停止・<code>yarn stat</code>実行をするのは手間になるので、<a href="https://github.com/remy/nodemon">nodemon</a> をインストールしておきましょう。<code>nodemon</code>を使うとファイル更新の度に自動でサーバーを再起動してくれます。</p>\n<pre><code>$ yarn add nodemon --dev\n</code></pre>\n<p>また、起動コマンドもスクリプトに定義しておきましょう。<code>package.json</code>に以下のようにスクリプトを追加します。</p>\n<pre><code class="language-json.prettyprint"># package.json\n  ...\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;node ./bin/www&quot;,\n    &quot;devstart&quot;: &quot;nodemon ./bin/www&quot;, # 追加\n    &quot;debugstart&quot;: &quot;DEBUG=express-todo-tutorial:* yarn run devstart&quot; # 追加\n  },\n</code></pre>\n<p>次のコマンドを実行して起動を確認しましょう。</p>\n<pre><code>$ yarn run debugstart\n</code></pre>\n<p><a href="http://localhost:3000">http://localhost:3000</a>で先程と同様に画面が表示されればOKです。<code>views/index.pug</code>を編集して<code>nodemon</code>の挙動を確認してみましょう。</p>\n<pre><code class="language-pug.prettyprint"># views/index.pug\n\nextends layout               \n                             \nblock content                \n  h1= title                  \n  p Welcome to #{title} !!!!!  # !!!!!を追加\n</code></pre>\n<p>サーバーが自動で再起動されて画面が変更されていることが確認できます。</p>\n</section>\n'},252:function(e,t,n){"use strict";var r=n(249);n.n(r).a},253:function(e,t,n){(e.exports=n(10)(!1)).push([e.i,".article-timestamp{margin-top:1.5rem;padding-top:.5rem;border-top:1px solid #aaa;color:#aaa;display:flex;flex-direction:row}.timestamp-container{display:flex;flex-direction:row;justify-content:center;align-items:center;padding-right:1rem}.timestamp-container i{margin-right:.4rem}",""])},254:function(e,t,n){"use strict";n(251);var r={name:"TableContent",props:["articleMd"],computed:{getInternalLinks:function(){if(!this||!this.$props||!this.$props.articleMd)return[];for(var e,t=/<h2 id="(.*)">(.*)<\/h2>/gm,n=[];null!=(e=t.exec(this.$props.articleMd));)e[1]&&e[2]&&n.push({id:e[1],title:e[2]});return n||[]}}},o=n(9),component=Object(o.a)(r,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{attrs:{id:"table-content"}},[n("aside",{attrs:{id:"table-content-list"}},e._l(e.getInternalLinks,function(t){return n("div",{key:t.id,staticClass:"link-container"},[n("nuxt-link",{directives:[{name:"scroll-to",rawName:"v-scroll-to",value:"#"+t.id,expression:"'#' + internalLink.id"}],attrs:{to:""}},[e._v("\n        "+e._s(t.title)+"\n      ")])],1)}),0)])},[],!1,null,null,null);t.a=component.exports},255:function(e,t,n){"use strict";var r={name:"ArticleTimestamp",props:["createdAt","updatedAt"]},o=(n(252),n(9)),component=Object(o.a)(r,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"article-timestamp"},[n("div",{staticClass:"timestamp-container"},[n("i",{staticClass:"far fa-clock"}),e._v(" "),n("p",[e._v(e._s(e.createdAt))])]),e._v(" "),n("div",{staticClass:"timestamp-container"},[n("i",{staticClass:"fas fa-clock"}),e._v(" "),n("p",[e._v(e._s(e.updatedAt))])])])},[],!1,null,null,null);t.a=component.exports},260:function(e){e.exports={tutorial:{category:"入門",iconClass:"fas fa-layer-group",menus:{setup:{linkPath:"/redis/setup/",title:"環境設定",subTitle:"redis-server / redis-cli",menuIcon:"fas fa-layer-group",headerTitle:"Redis 環境設定",headerDescription:"RedisはNoSQLと呼ばれるデータベースの１つで、データをキー・バリューの形で扱うインメモリデータベースです。メモリ上にデータを保存するので高速な処理ができます。また、バックアップの設定で永続的にデータを保存することもできます。"}}}}},282:function(e,t){e.exports="<section><h1>Redisの環境設定</h1>\n<p>RedisはNoSQLと呼ばれるデータベースの１つで、データをキー・バリューの形で扱うインメモリデータベースです。メモリ上にデータを保存するのでRDBと比べて高速な処理ができます。ただし、RDBのようにテーブル構造の構成には不向きであり、またメモリ上にデータを格納するので再起動やシステムダウンなどがあるとデータを失います。（バックアップ機能を設定すれば永続的にデータを保存できます。）</p>\n<h2 id=\"install-redis\">Redisのインストール</h2>\n<p>Macbook環境であれば<a href=\"https://brew.sh/index_ja\">Homebrew</a>を使うことで簡単にインストールすることができます。</p>\n<pre><code class=\"language-shell.prettyprint\">$ brew install redis\n</code></pre>\n<p>下記のようにRedisのバージョンを確認できればインストール完了です。</p>\n<pre><code class=\"language-shell.prettyprint\">$ redis-server --version\nRedis server v=5.0.4 sha=00000000:0 malloc=libc bits=64 build=d4ba11298acbb366\n$ redis-cli --version\nredis-cli 5.0.4\n</code></pre>\n<h2 id=\"run-redis-server\">Redisの起動</h2>\n<p><code>redis-server /usr/local/etc/redis.conf</code>でRedisを起動することができます。<code>/usr/local/etc/redis.conf</code>はRedisの設定ファイルです。<br />\n下記のようにコンソールに表示が出れば成功です。</p>\n<p>停止は<code>Ctrl-C</code>でできます。</p>\n<pre><code class=\"language-shell.prettyprint\">$ redis-server /usr/local/etc/redis.conf\n\n38357:C 27 Apr 2019 20:42:35.585 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo\n38357:C 27 Apr 2019 20:42:35.586 # Redis version=5.0.4, bits=64, commit=00000000, modified=0, pid=38357, just started\n38357:C 27 Apr 2019 20:42:35.586 # Configuration loaded\n38357:M 27 Apr 2019 20:42:35.587 * Increased maximum number of open files to 10032 (it was originally set to 2560).\n                _._                                                  \n           _.-``__ ''-._                                             \n      _.-``    `.  `_.  ''-._           Redis 5.0.4 (00000000/0) 64 bit\n  .-`` .-```.  ```\\/    _.,_ ''-._                                   \n (    '      ,       .-`  | `,    )     Running in standalone mode\n |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379\n |    `-._   `._    /     _.-'    |     PID: 38357\n  `-._    `-._  `-./  _.-'    _.-'                                   \n |`-._`-._    `-.__.-'    _.-'_.-'|                                  \n |    `-._`-._        _.-'_.-'    |           http://redis.io        \n  `-._    `-._`-.__.-'_.-'    _.-'                                   \n |`-._`-._    `-.__.-'    _.-'_.-'|                                  \n |    `-._`-._        _.-'_.-'    |                                  \n  `-._    `-._`-.__.-'_.-'    _.-'                                   \n      `-._    `-.__.-'    _.-'                                       \n          `-._        _.-'                                           \n              `-.__.-'                                               \n\n38357:M 27 Apr 2019 20:42:35.593 # Server initialized\n38357:M 27 Apr 2019 20:42:35.593 * Ready to accept connections\n</code></pre>\n<h2 id=\"use-service\">Redisの自動起動</h2>\n<p><code>brew services</code>でMacの起動後に自動でRedisサーバーが起動するようにすることができます。</p>\n<p><strong>起動</strong></p>\n<pre><code class=\"language-shell.prettyprint\">$ brew services start redis\n==&gt; Successfully started `redis`\n</code></pre>\n<p>またサービスの停止と再起動は次のコマンドです。</p>\n<p><strong>停止</strong></p>\n<pre><code class=\"language-shell.prettyprint\">$ brew services stop redis\n</code></pre>\n<p><strong>再起動</strong></p>\n<pre><code class=\"language-shell.prettyprint\">$ brew services restart redis\n</code></pre>\n<h2 id=\"redis-cli\">Redisクライアントの起動</h2>\n<p>コンソールからRedisの操作をするには<code>redis-cli</code>でRedisクライアントを起動する必要があります。</p>\n<p>また、終了は<code>quit</code>でできます。</p>\n<pre><code class=\"language-shell.prettyprint\">$ redis-cli\n127.0.0.1:6379&gt;\n127.0.0.1:6379&gt; quit\n</code></pre>\n<h2 id=\"get-set\">データの登録と削除</h2>\n<p>簡単にですが、データの登録と削除方法を説明しておきます。</p>\n<p>データの登録は<code>set キー 値</code>でできます。また<code>get キー</code>でキーに登録した値を取得できます。</p>\n<pre><code class=\"language-shell.prettyprint\">$ redis-cli\n127.0.0.1:6379&gt; set hello 'world'\nOK\n127.0.0.1:6379&gt; get hello\n&quot;world&quot;\n127.0.0.1:6379&gt;\n</code></pre>\n<p>データの削除は<code>del キー</code>でできます。</p>\n<pre><code class=\"language-shell.prettyprint\">127.0.0.1:6379&gt; del hello\n(integer) 1\n127.0.0.1:6379&gt; get hello\n(nil)\n127.0.0.1:6379&gt; \n</code></pre>\n</section>\n"},295:function(e,t,n){"use strict";n.r(t);var r=n(255),o=n(250),c=n(254),d=n(260),l=n(282),h=n.n(l),_={components:{ArticleTimestamp:r.a,SideMenu:o.a,TableContent:c.a},data:function(){return{menuSections:d}},computed:{SetupMd:function(){return h.a}},head:function(){var e=d.tutorial.menus;return{title:e.setup.headerTitle,meta:[{hid:"description",name:"description",content:e.setup.headerDescription}]}}},m=n(9),component=Object(m.a)(_,function(){var e=this.$createElement,t=this._self._c||e;return t("div",{attrs:{id:"wrapper"}},[t("article",{attrs:{id:"main"}},[t("section",[t("div",{domProps:{innerHTML:this._s(this.SetupMd)}}),this._v(" "),t("article-timestamp",{attrs:{createdAt:"2019/04/27",updatedAt:"2019/04/27"}})],1)]),this._v(" "),t("side-menu",{attrs:{menuSections:this.menuSections}}),this._v(" "),t("table-content",{attrs:{articleMd:this.SetupMd}})],1)},[],!1,null,null,null);t.default=component.exports}}]);