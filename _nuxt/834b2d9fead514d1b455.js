(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{247:function(e){e.exports=JSON.parse('{"tutorial":{"category":"入門","categoryLabel":"React Native","categoryPath":"/react_native/","iconClass":"fab fa-react","menus":{"initialize":{"linkPath":"/react_native/initialize/","ogpImage":"/images/react_native/initialize/ogp.png","title":"プロジェクトの作成（ Expo ）","subTitle":"expo init","menuIcon":"fab fa-react","headerTitle":"React Native チュートリアル（プロジェクトの作成 Expo ）","headerDescription":"React Native でのプロジェクト作成を説明していきます。React Nativeで開発を始めるには、Expo利用とReact Native CLI利用の２通りの方法があります。ここではExpo利用の開発を説明していきます。"},"form_screen":{"linkPath":"/react_native/form_screen/","ogpImage":"/images/react_native/form_screen/ogp.png","title":"フォーム画面の作成","subTitle":"State, Style","menuIcon":"fas fa-tasks","headerTitle":"React Native チュートリアル（TODOアプリのフォーム画面作成 ）","headerDescription":"React Native でTODOアプリで必要事項を入力するフォーム画面作成する方法を説明します。主に React Native での state や style、いくつかのAPIの使い方を説明していきます。"},"use_props":{"linkPath":"/react_native/use_props/","ogpImage":"/images/react_native/use_props/ogp.png","title":"コンポーネント化","subTitle":"Props","menuIcon":"fas fa-tools","headerTitle":"コンポーネントを作って共通化する（ React Native ）","headerDescription":"React の重要な機能の１つコンポーネントを利用して、重複している描画処理を共通化してコードの整理をしてみましょう。コンポーネントを作成して再利用することで重複するコードをなくすことができます。"},"use_react_navigation":{"linkPath":"/react_native/use_react_navigation/","ogpImage":"/images/react_native/use_react_navigation/ogp.png","title":"画面遷移の利用","subTitle":"React Navitation","menuIcon":"fas fa-chevron-circle-right","headerTitle":"React Navigation を使って画面遷移を実装する（Expo）","headerDescription":"前回作成したTODOアプリのフォーム画面と一覧表示画面を分けて画面移動ができるように改良してみます。画面遷移には React Navigation というパッケージを利用することで簡単に作ることができます。"}}}}')},315:function(e,n,t){"use strict";t.r(n);var o=t(234),r=t(235),c=t(247),v={components:{ArticlePage:o.a,CodeBox:r.a},data:function(){return{menuSections:c,categoryName:"tutorial",articleName:"use_react_navigation",datePublished:new Date("2020/01/19 22:00:00 +0900"),dateModified:new Date("2020/02/11 22:50:00 +0900"),contents:[{id:"in-link-install-react-navigation",title:"React Navigation のインストール"},{id:"in-link-create-home",title:"ホーム画面の実装"},{id:"in-link-navigation",title:"画面遷移の実装"},{id:"in-link-requirement",title:"未実装部分について"}]}}},_=t(12),component=Object(_.a)(v,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("article-page",{attrs:{menuSections:e.menuSections,contents:e.contents,categoryName:e.categoryName,articleName:e.articleName,datePublished:e.datePublished,dateModified:e.dateModified}},[t("h1",[e._v("React Navigation を使って画面遷移を実装する（Expo）")]),e._v(" "),t("div",{staticClass:"abstract"},[t("p",[t("nuxt-link",{attrs:{to:"/react_native/form_screen/"}},[e._v("前回")]),e._v("\n        作成したTODOアプリのフォーム画面と一覧表示画面分けてみましょう。\n      ")],1),e._v(" "),t("p",[e._v("\n        React Native で画面遷移機能を実装するためにいくつかパッケージがあります。ここでは最もよく使われる\n        "),t("a",{attrs:{href:"https://reactnavigation.org/",target:"_blank"}},[e._v("React Navigation")]),e._v("\n        を使用して画面遷移の機能を追加していきます。React Navigation のバージョンは５系のものを利用します。\n      ")]),e._v(" "),t("p",[e._v("\n        また今回の完成済のコードは\n        "),t("a",{attrs:{href:"https://github.com/irisAsh/react-native-todo-tutorial/tree/use-react-navigation",target:"_blank"}},[e._v("こちら")]),e._v("\n        です。\n      ")])]),e._v(" "),t("h2",{attrs:{id:"in-link-install-react-navigation"}},[e._v("React Navigation のインストール")]),e._v(" "),t("p",[e._v("\n      まずは React Navigation 本体をインストールしましょう。\n    ")]),e._v(" "),t("code-box",[e._v("\n$ yarn add @react-navigation/native\n    ")]),e._v(" "),t("p",[e._v("\n      次に依存関係のある必要パッケージをインストールします。\n      このチュートリアルでは Expo を使用してプロジェクトを作成しているので、\n      これらのパッケージは "),t("code",[e._v("expo install")]),e._v(" でインストールする必要があります。\n      Expo を利用していない場合は yarn または npm でインストールするようにしましょう。\n    ")]),e._v(" "),t("code-box",[e._v("\n$ yarn expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view\n    ")]),e._v(" "),t("p",[e._v("\n      さて最後に "),t("code",[e._v("@react-navigation/stack")]),e._v(" をインストールします。\n      これはスタックして画面遷移する機能を提供してくれるパッケージです。\n      「スタックして」とは、通常のアプリでよくある遷移で、遷移先の画面が横スライドしながら遷移元画面の上に表示される動きをみせます。\n      画面下タブで画面を切り替える場合やハンバーガーメニューのような切り替えをする場合は別のパッケージが必要となります。\n    ")]),e._v(" "),t("code-box",[e._v("\n$ yarn add @react-navigation/stack\n    ")]),e._v(" "),t("p",[e._v("\n        以上でパッケージのインストールは完了です。\n    ")]),e._v(" "),t("h2",{attrs:{id:"in-link-create-home"}},[e._v("ホーム画面の実装")]),e._v(" "),t("p",[e._v("\n      基本的な実装の流れは、１画面単位で画面を描画するコンポーネントを作成していきます。\n      作成したコンポーネントをナビゲーターというものに登録します。\n      この時画面名も同時に登録します。\n      あとは画面遷移するタイミングで画面登録した名前を呼び出すだけです。\n    ")]),e._v(" "),t("p",[e._v("\n      シンプルな構成で、実際機能を作るのは非常に楽です。\n      では最初にToDoの一覧を表示する画面を作成してみましょう。\n    ")]),e._v(" "),t("p",[e._v("\n      管理しやすくするために画面用のコンポーネントは "),t("code",[e._v("src/screens")]),e._v(" 配下に作るようにします。\n      "),t("code",[e._v("src/screens/Home.js")]),e._v("というファイルを作成し、前回作った "),t("code",[e._v("App.js")]),e._v("\n      から一覧表示の機能部分だけ抜き出します。\n    ")]),e._v(" "),t("code-box",{attrs:{fileName:"src/screens/Home.js"}},[e._v("\nimport React, { Component } from 'react';\nimport {\n  SafeAreaView,\n  FlatList,\n  View,\n  Text,\n  StyleSheet\n} from 'react-native';\n\n/* テストデータ */\nconst todoList = [\n  { todo: '買い物', memo: '今日の午後６時まで' },\n  { todo: '掃除', memo: '今日は必ずやる' }\n];\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <SafeAreaView style={styles.container}>\n        <FlatList\n          style={styles.listBox}\n          data={todoList}\n          renderItem={({ item }) => {\n            return (\n              <View style={styles.listItem}>\n                <Text>{item.todo}</Text>\n                <Text>{item.memo}</Text>\n              </View>\n            );\n          }}\n          keyExtractor={item => item.todo}\n        />\n      </SafeAreaView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  listItem: {\n    height: 64,\n    width: 200,\n    marginTop: 16,\n    padding: 16,\n    borderColor: 'gray',\n    borderWidth: 1,\n  }\n});\n    ")]),e._v(" "),t("p",[e._v("\n      前回の内容の部分なので特に説明は不要でしょう。\n    ")]),e._v(" "),t("p",[e._v("\n      次にこの一覧表示画面をアプリのホーム画面として表示されるように "),t("code",[e._v("App.js")]),e._v(" を修正します。\n    ")]),e._v(" "),t("code-box",{attrs:{fileName:"App.js"}},[e._v("\nimport React, { Component } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport Home from './src/screens/Home';\n\nconst Stack = createStackNavigator();\n\nexport default class App extends Component {\n\n  render() {\n    return (\n      <NavigationContainer>\n        <Stack.Navigator>\n          <Stack.Screen name=\"Home\" component={Home} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    );\n  }\n}\n    ")]),e._v(" "),t("p",[t("code",[e._v("NavigationContainer")]),e._v("は遷移の構成や状態など全てを管理するコンポーネントです。\n      画面のコンポーネントは全て NavigationContainer に内包されるようにして置く必要があります。\n    ")]),e._v(" "),t("p",[t("code",[e._v("createStackNavigator")]),e._v("は"),t("code",[e._v("Screen")]),e._v("と"),t("code",[e._v("Navigator")]),e._v("\n      の２つのプロパティを持つオブジェクトを返す関数です。\n      Navigator は Screen を含むようにしておき、\n      Screen の属性には、\n      "),t("code",[e._v("name")]),e._v("に画面の名前、\n      "),t("code",[e._v("component")]),e._v("にはその画面を描画するコンポーネントを設定します。\n    ")]),e._v(" "),t("p",[e._v("\n      ここまで完了したらアプリを実行してください。すると画面上にヘッダーが表示されるようになります。\n    ")]),e._v(" "),t("amp-img",{attrs:{src:"/images/react_native/use_react_navigation/home_screen.png",alt:"ホーム画面",title:"ホーム画面",width:"360",height:"635"}}),e._v(" "),t("h2",{attrs:{id:"in-link-navigation"}},[e._v("画面遷移の実装")]),e._v(" "),t("p",[e._v("\n      さてメインの画面遷移の実装に入ります。まずはForm画面の切り出しをしておきます。\n    ")]),e._v(" "),t("code-box",{attrs:{fileName:"src/screens/Form.js"}},[e._v('\nimport React, { Component } from \'react\';\nimport {\n  SafeAreaView,\n  Button,\n  StyleSheet\n} from \'react-native\';\nimport FormInput from \'../components/FormInput\';\n\nexport default class Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoValue: "",\n      memoValue: "",\n      todoList: [],\n    };\n  }\n\n  render() {\n    const { todoValue, memoValue, todoList } = this.state;\n\n    return (\n      <SafeAreaView style={styles.container}>\n        <FormInput\n          label="やること"\n          value={todoValue}\n          placeholder="何かやること"\n          onChangeText={v => this.setState({ todoValue: v })}\n        />\n        <FormInput\n          label="メモ"\n          value={memoValue}\n          placeholder="何かメモ"\n          onChangeText={v => this.setState({ memoValue: v })}\n        />\n        <Button\n          title="登録"\n          onPress={() => {\n            const newList = todoList.concat({ todo: todoValue, memo: memoValue });\n            this.setState({\n              todoValue: "",\n              memoValue: "",\n              todoList: newList\n            });\n          }}\n        />\n      </SafeAreaView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: \'column\',\n    backgroundColor: \'#fff\',\n    alignItems: \'center\',\n    justifyContent: \'center\',\n  }\n});\n    ')]),e._v(" "),t("p",[e._v("\n      この画面自体の内容も前回のものなので説明は割愛します。\n    ")]),e._v(" "),t("p",[e._v("\n      先程のホーム画面と同様このToDo登録画面もナビゲーションに追加します。\n    ")]),e._v(" "),t("code-box",{attrs:{fileName:"App.js"}},[e._v('\n （略）...\n\n  render() {\n    return (\n      <NavigationContainer>\n        <Stack.Navigator initialRouteName="Home">\n          <Stack.Screen name="Home" component={Home} />\n          <Stack.Screen name="Form" component={Form} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    );\n  }\n    ')]),e._v(" "),t("p",[e._v("\n      Navigator の "),t("code",[e._v("initialRouteName")]),e._v("\n      属性にはアプリ起動時に最初に表示される画面を設定します。\n      未設定の場合は Navigator の一番上に書かれている Screen が最初に表示されます。\n    ")]),e._v(" "),t("p",[e._v("\n      さてToDo登録画面へ移動するためのボタンをホームの一覧画面に用意しましょう。\n    ")]),e._v(" "),t("code-box",{attrs:{fileName:"src/screens/Home.js"}},[e._v("\n  (略)...\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Button\n        title=\"登録画面へ\"\n        onPress={() => navigation.navigate('Form')}\n      />\n    ")]),e._v(" "),t("p",[e._v("\n      Screen に登録したコンポーネントの props には自動で\n      "),t("code",[e._v("navigation")]),e._v("という props が挿入されるようになっています。\n    ")]),e._v(" "),t("p",[t("code",[e._v("navigation")]),e._v("には"),t("code",[e._v("navigate")]),e._v("という画面へ移動する関数が用意されています。\n      この関数の引数に移動さきの画面名を設定するとその画面へ遷移する機能が動作します。\n    ")]),e._v(" "),t("p",[e._v("\n      以下が完成形の画像です。\n    ")]),e._v(" "),t("amp-img",{attrs:{src:"/images/react_native/use_react_navigation/navigate_button.png",alt:"遷移ボタン",title:"遷移ボタン",width:"360",height:"635"}}),e._v(" "),t("p",[e._v("\n      遷移先のヘッダーには前画面へ戻るためのボタンが自動で作成されます。\n    ")]),e._v(" "),t("amp-img",{attrs:{src:"/images/react_native/use_react_navigation/form_screen.png",alt:"登録画面",title:"登録画面",width:"360",height:"635"}}),e._v(" "),t("p",[e._v("\n      補足ですが、ヘッダーには今「Home」「Form」と登録した画面名（Screen の name 属性の値）が表示されるようになっています。\n    ")]),e._v(" "),t("p",[e._v("\n      こちらは Screen の options 属性を使用して変更することができます。\n    ")]),e._v(" "),t("code-box",{attrs:{fileName:"App.js"}},[e._v("\n      <Stack.Screen name=\"Home\" component={Home} options={ { title: '一覧' } }/>\n    ")]),e._v(" "),t("h2",{attrs:{id:"in-link-requirement"}},[e._v("未実装部分について")]),e._v(" "),t("p",[e._v("\n      これで画面遷移についての実装は完了しました。\n      と言いたいとことですが、お気づきのように今の実装ではToDo登録画面から登録しても結果が反映されません。\n    ")]),e._v(" "),t("p",[e._v("\n      これについては２通りの方法がありますが、そちらは次回の内容に記載させていただきます。\n    ")])],1)}),[],!1,null,null,null);n.default=component.exports}}]);