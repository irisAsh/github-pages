(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{246:function(t,e,n){var content=n(250);"string"==typeof content&&(content=[[t.i,content,""]]),content.locals&&(t.exports=content.locals);(0,n(11).default)("40aafe93",content,!0,{sourceMap:!1})},247:function(t,e,n){"use strict";var r={name:"SideMenu",props:["menuSections"],computed:{routePath:function(){return this.$route.path}}},o=n(9),component=Object(o.a)(r,function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("aside",{attrs:{id:"sidebar"}},t._l(t.menuSections,function(e){return n("section",{key:e.category},[n("div",{staticClass:"menu-overview"},[t._v(t._s(e.category))]),t._v(" "),t._l(e.menus,function(e){return n("div",{key:e.linkPath,staticClass:"menu-item"},[n("nuxt-link",{class:t.routePath==e.linkPath?"access-now":"",attrs:{to:e.linkPath}},[t._v("\n          "+t._s(e.title)+"\n        ")])],1)})],2)}),0)])},[],!1,null,null,null);e.a=component.exports},248:function(t,e){t.exports='<section><h1>Express入門（環境設定）</h1>\n<p>ここでは簡易なTODOアプリを作りながらNodeJSのWebアプリケーションフレームワーク <a href="https://expressjs.com/">Express</a> の使い方を学んでいきます。<br />\n<a href="https://github.com/irisAsh/express-todo-tutorial/tree/master">こちら</a>に完成済みのサンプルを置いておきます。サンプルは後記事の<a href="https://irisash.github.io/express/editrouting/">Expressのルーティングの設定</a>、<a href="https://irisash.github.io/express/mongodb/">ExpressでMongoDBを使う</a>の内容を含んでいます。</p>\n<p><strong>環境</strong></p>\n<ul>\n<li>NodeJS v8.15.0</li>\n<li>Express v4.16.0</li>\n</ul>\n<h2 id="setting">環境設定</h2>\n<p>プロジェクト作成から起動するまでの設定手順を説明していきます。</p>\n<h2 id="express-generator">express-generator のインストール</h2>\n<p>下記のコマンドで<code>express-generator</code>をグローバルインストールします。</p>\n<pre><code class="language-sh.prettyprint">$ yarn install express-generator -g\n</code></pre>\n<h2 id="init-project">プロジェクトの作成</h2>\n<p><code>express-generator</code>を使用すると簡単にWebアプリケーションプロジェクトを最小構成で生成できます。任意のフォルダで次のコマンドを実行してください。</p>\n<pre><code class="language-sh.prettyprint">$ express express-todo-tutorial --view=pug --git\n</code></pre>\n<p>実行すると<code>express-todo-tutorial</code>というフォルダが作成されます。このフォルダの中にWebアプリケーションを動かす最低限のファイルが用意されています。<br />\n先程実行した<code>express</code>コマンドでいくつかのオプションを使っているので説明しておきます。また、オプションにはここで使っていないものもあります。<code>express -h</code>を実行するとオプションの一覧が見れるので、興味があるものを使ってみてください。</p>\n<p><strong>--view=pug</strong></p>\n<p>このオプションは使用するテンプレートエンジンを指定します。ここでは <a href="https://pugjs.org/api/getting-started.html">Pug</a>(旧Jade) と呼ばれるテンプレートを指定しています。テンプレートエンジンは他にも色々あるので自分の好みにあったものを指定してください。</p>\n<p><strong>--git</strong></p>\n<p>このオプションをつけると<code>.gitignore</code>を最初に作成してくれます。最低限のGit管理外設定をしてくれるので、Git管理をする場合は指定しましょう。</p>\n<p>作成されたプロジェクトフォルダの初期構成は以下のようになっています。</p>\n<pre><code>.\n├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.pug\n    ├── index.pug\n    └── layout.pug\n</code></pre>\n<p>Webアプリケーションを作成したことがある方は大体の内容はわかるかと思います。初学者の方は作りながら説明していきますので、大まかで良いのでどのファイルがどこにあるかを覚えておけば良いでしょう。</p>\n<h2 id="running">起動確認</h2>\n<p>初期作成されたプロジェクトを起動して動作確認をしておきましょう。下記のコマンドで起動確認できます。プロジェクトフォルダ内に移動した後に<code>yarn install</code>でパッケージを取得しています。最後のコマンドが実際にExpressを起動するコマンドになります。</p>\n<pre><code>$ cd express-todo-tutorial\n$ yarn install\n$ DEBUG=express-todo-tutorial:* yarn start\n</code></pre>\n<p>コマンド実行後にブラウザから<a href="http://localhost:3000">http://localhost:3000</a>にアクセスしてみましょう。以下のように画面が表示されれば起動完了です。<br />\nまた、起動を終了するときは<code>Ctrl+c</code>で終了することができます。</p>\n<img src="images/express/gettingstarted/run-start.png" alt="起動確認" title="起動確認" style="max-height:400px;">\n<p>このままでも開発を進めることはできますが、ファイルを編集する度にサーバー停止・<code>yarn stat</code>実行をするのは手間になるので、<a href="https://github.com/remy/nodemon">nodemon</a> をインストールしておきましょう。<code>nodemon</code>を使うとファイル更新の度に自動でサーバーを再起動してくれます。</p>\n<pre><code>$ yarn add nodemon --dev\n</code></pre>\n<p>また、起動コマンドもスクリプトに定義しておきましょう。<code>package.json</code>に以下のようにスクリプトを追加します。</p>\n<pre><code class="language-json.prettyprint"># package.json\n  ...\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;node ./bin/www&quot;,\n    &quot;devstart&quot;: &quot;nodemon ./bin/www&quot;, # 追加\n    &quot;debugstart&quot;: &quot;DEBUG=express-todo-tutorial:* yarn run devstart&quot; # 追加\n  },\n</code></pre>\n<p>次のコマンドを実行して起動を確認しましょう。</p>\n<pre><code>$ yarn run debugstart\n</code></pre>\n<p><a href="http://localhost:3000">http://localhost:3000</a>で先程と同様に画面が表示されればOKです。<code>views/index.pug</code>を編集して<code>nodemon</code>の挙動を確認してみましょう。</p>\n<pre><code class="language-pug.prettyprint"># views/index.pug\n\nextends layout               \n                             \nblock content                \n  h1= title                  \n  p Welcome to #{title} !!!!!  # !!!!!を追加\n</code></pre>\n<p>サーバーが自動で再起動されて画面が変更されていることが確認できます。</p>\n</section>\n'},249:function(t,e,n){"use strict";var r=n(246);n.n(r).a},250:function(t,e,n){(t.exports=n(10)(!1)).push([t.i,".article-timestamp{margin-top:1.5rem;padding-top:.5rem;border-top:1px solid #aaa;color:#aaa;display:flex;flex-direction:row}.timestamp-container{display:flex;flex-direction:row;justify-content:center;align-items:center;padding-right:1rem}.timestamp-container i{margin-right:.4rem}",""])},251:function(t,e,n){"use strict";n(248);var r={name:"TableContent",props:["articleMd"],computed:{getInternalLinks:function(){if(!this||!this.$props||!this.$props.articleMd)return[];for(var t,e=/<h2 id="(.*)">(.*)<\/h2>/gm,n=[];null!=(t=e.exec(this.$props.articleMd));)t[1]&&t[2]&&n.push({id:t[1],title:t[2]});return n||[]}}},o=n(9),component=Object(o.a)(r,function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{attrs:{id:"table-content"}},[n("aside",{attrs:{id:"table-content-list"}},t._l(t.getInternalLinks,function(e){return n("div",{key:e.id,staticClass:"link-container"},[n("nuxt-link",{directives:[{name:"scroll-to",rawName:"v-scroll-to",value:"#"+e.id,expression:"'#' + internalLink.id"}],attrs:{to:""}},[t._v("\n        "+t._s(e.title)+"\n      ")])],1)}),0)])},[],!1,null,null,null);e.a=component.exports},252:function(t,e,n){"use strict";var r={name:"ArticleTimestamp",props:["createdAt","updatedAt"]},o=(n(249),n(9)),component=Object(o.a)(r,function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"article-timestamp"},[n("div",{staticClass:"timestamp-container"},[n("i",{staticClass:"far fa-clock"}),t._v(" "),n("p",[t._v(t._s(t.createdAt))])]),t._v(" "),n("div",{staticClass:"timestamp-container"},[n("i",{staticClass:"fas fa-clock"}),t._v(" "),n("p",[t._v(t._s(t.updatedAt))])])])},[],!1,null,null,null);e.a=component.exports},265:function(t,e){t.exports="<section><h1>ExpressでDigest認証を実装する</h1>\n<p><a href=\"https://irisash.github.io/express/basic_auth/\">ExpressでBasic認証を実装する</a>でBasic認証の仕組みをみました。そこで分かるのは、送信される情報の値を取得できれば、Base64でデコードするだけでパスワードを解読できてしまうということです。</p>\n<p>そこでクライアントから送信するパスワードはハッシュ化して、またサーバー側でも登録しているパスワードをハッシュ化し、それぞれの値を照合することで認可する方法が考案されました。これがDigest認証です。</p>\n<p>Digest認証のアルゴリズムや詳細については記事最後の参考サイトをご参考ください。今回の実装もそちらのサイトを参考に作成しました。実装済みのサンプルは<a href=\"https://github.com/irisAsh/express-digest-auth-tutorial\">Github</a>においていますのでご参考ください。</p>\n<h2 id=\"initialize-project\">実装準備</h2>\n<p>プロジェクトのテンプレートを<a href=\"https://github.com/irisAsh/express-digest-auth-tutorial/tree/project-template\">こちら</a>に置いています。認証を組み込むプロジェクトがない場合はこちらを活用ください。</p>\n<p>実装目標はサンプルの<code>/tutorial</code>ページにDigest認証を設定とします。</p>\n<img src=\"images/express/digest_auth/root.png\" alt=\"ルート画面\" title=\"ルート画面\" style=\"max-height:400px;\">\n<p>まずは実装に利用するパッケージをインストールします。</p>\n<p><strong>node-uuid</strong></p>\n<p>WWW-Authenticateヘッダーを返す際に、ランダムな文字列(nonce)を付与する必要があります。<br />\n今回はUUIDを生成してその値をnonceの値として利用することにしました。UUID生成パッケージとして<a href=\"https://github.com/kelektiv/node-uuid\">node-uuid</a>を使用します。</p>\n<pre><code class=\"language-shell.prettyprint\">$ yarn add uuid\n</code></pre>\n<p><strong>express-session</strong></p>\n<p>照合値の算出時にランダムな文字列(nonce)やリクエスト回数(nc)をサーバー側で保持しておく必要があります。それらの値はセッションで管理することにしました。Expressでセッションを管理するには<a href=\"https://github.com/expressjs/session\">express-session</a>を使います。</p>\n<p><code>express-session</code>の使い方については<a href=\"https://irisash.github.io/express/express_session/\">Expressでセッションを利用する</a>で説明しているのでご参考にしてください。</p>\n<pre><code class=\"language-shell.prettyprint\">$ yarn add express-session\n</code></pre>\n<p><strong>JavaScript-MD5</strong></p>\n<p>ハッシュ化にはMD5アルゴリズムを使用します。<a href=\"https://github.com/blueimp/JavaScript-MD5\">JavaScript-MD5</a>はJavascriptでハッシュ化(MD5)するパッケージの１つです。</p>\n<pre><code class=\"language-shell.prettyprint\">$ yarn add blueimp-md5\n</code></pre>\n<h2 id=\"digest\">Digest認証の実装</h2>\n<p>先に実装全体を記載してしまいます。</p>\n<pre><code class=\"language-app.js.prettyprint\">// app.js\n\nvar logger = require('morgan');\n// 追加\nvar session = require(&quot;express-session&quot;);\nvar md5 = require('blueimp-md5');\nvar uuidv4 = require('uuid/v4');\n...\n\n// 追加\napp.use(session({\n  secret: &quot;secret word&quot;,\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    maxAge: 60 * 1000\n  }\n}));\n\n// 登録ユーザー\nvar allowedUsers = {\n  'Express': 'good'\n};\n\n// authorization のパラメータを分解\nvar parseAuthorization = function(authorization) {\n  // 始めの'Digest 'を省き、', 'で分割\n  var arr = authorization.substr(7).split(', ');\n  var result = {};\n  arr.forEach(function(param) {\n    if (param.indexOf(&quot;=&quot;) &lt; 0) {\n      return;\n    }\n    var [key, value] = param.split(&quot;=&quot;);\n    result[key] = value.replace(/&quot;/g, '');\n  });\n  return result;\n};\n\napp.use('/*', function (req, res, next) {\n  var session = req.session;\n  // リクエスト数をカウントしセッションに残す\n  if (!!session.nc) {\n    session.nc += 1;\n  } else {\n    session.nc = 1;\n  }\n  if (req.originalUrl === '/about' || req.originalUrl === '/') {\n    next();\n  } else {\n    var realm = 'tutorial';\n    var method = 'GET';\n    var qop = 'auth';\n    var judgement = false;\n    var authorization = req.get('authorization');\n    if (!!authorization &amp;&amp; !!session.nonce &amp;&amp; !!session.nc) {\n      var authParams = parseAuthorization(authorization);\n      // リクエスト数が一致しているかチェック\n      if (session.nc === parseInt(authParams.nc, 16)) {\n        // responseを算出\n        var a1 = authParams.username + ':' + realm + ':' + allowedUsers[authParams.username];\n        var a2 = method + ':' + authParams.uri;\n        var a1_md5 = md5(a1);\n        var a2_md5 = md5(a2);\n        var code = a1_md5 + ':' + session.nonce + ':' + authParams.nc + ':' + authParams.cnonce + ':' + qop + ':' + a2_md5;\n        var code_md5 = md5(code);\n        judgement = code_md5 === authParams.response;\n      }\n    }\n    if (judgement) {\n      // 認証OK\n      next();\n    } else {\n      // 認証NG\n      session.nonce = uuidv4();\n      session.nc = 0;\n      res.set({\n        'WWW-Authenticate': 'Digest realm=&quot;' + realm + '&quot;, nonce=&quot;' + session.nonce + '&quot;, algorithm=MD5, qop=&quot;' + qop + '&quot;'\n      });\n      next(createError(401));\n    }\n  }\n});\n</code></pre>\n<h2 id=\"response\">認証要求のレスポンスを返す</h2>\n<p>クライアントが保護のかかったページに訪れた時にWWW-Authenticateヘッダーを返す必要があります。また以下の値を付与する必要があります。</p>\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>realm</td>\n<td>任意の保護領域名</td>\n</tr>\n<tr>\n<td>nonce</td>\n<td>ランダムな文字列</td>\n</tr>\n<tr>\n<td>algorithm</td>\n<td>MD5, MD5-sess, SHA-256, SHA-256-sess</td>\n</tr>\n<tr>\n<td>qop</td>\n<td>&quot;auth&quot;, &quot;auth-int&quot;</td>\n</tr>\n</tbody>\n</table>\n<p>nonce の値は準備でインストールした node-uuid で生成した値を指定します。<br />\nまた、algorithm には MD5 を指定します。 SHA-256 の方がセキュリティが強固になりますが、ブラウザがまだ対応していなかったため今回は MD5 にしました。<br />\nqop は auth の場合はリクエストのメソッドから、auth-int の場合はリクエストボディを含めて照合します。</p>\n<p>実装例では下記のようなヘッダーを返すようになっています。</p>\n<pre><code>WWW-Authenticate: Digest\n  realm=&quot;tutorial&quot;,\n  nonce=&quot;uuidv4で生成した文字列&quot;,\n  algorithm=MD5,\n  qop=&quot;auth&quot;\n</code></pre>\n<p>クライアントへの返答時に、nonce の値はセッションに保存します。nonce はクライアントから同じ値が送信されますが、検証にはサーバーで発行した値を使うため保存しておく必要があります。</p>\n<p>また、クライアントのリクエスト回数(nc)もセッションに保存しておきます。クライアントからパスワードが送信される時に16進数のリクエスト回数も同時に付与されてきます。検証時にこのリクエスト回数も一致しているか確認します。</p>\n<h2 id=\"authenticate\">Digestを算出し検証する</h2>\n<p>クライアントからユーザー名とパスワードが送信されるので、送信される値から Digest の値を算出します。</p>\n<img src=\"images/express/digest_auth/root.png\" alt=\"認証画面\" title=\"認証画面\" style=\"max-height:400px;\">\n<p>クライアントから送信される値は次のようになります。</p>\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>realm</td>\n<td>返答した値と同値</td>\n</tr>\n<tr>\n<td>nonce</td>\n<td>返答した値と同値</td>\n</tr>\n<tr>\n<td>algorithm</td>\n<td>返答した値と同値</td>\n</tr>\n<tr>\n<td>qop</td>\n<td>返答した値と同値</td>\n</tr>\n<tr>\n<td>username</td>\n<td>ユーザー名</td>\n</tr>\n<tr>\n<td>uri</td>\n<td>アクセスしたURI</td>\n</tr>\n<tr>\n<td>nc</td>\n<td>16進数のリクエスト回数(8桁になるようゼロサプライされています)</td>\n</tr>\n<tr>\n<td>cnonce</td>\n<td>ランダムな文字列</td>\n</tr>\n<tr>\n<td>response</td>\n<td>Digest値(この値をサーバ側でも算出して照合します)</td>\n</tr>\n</tbody>\n</table>\n<p>実装例では下記のような送信がされます。</p>\n<pre><code>WWW-Authenticate: Digest\n  realm=&quot;tutorial&quot;,\n  nonce=&quot;uuidv4で生成した文字列&quot;,\n  algorithm=MD5,\n  qop=&quot;auth&quot;,\n  username=&quot;Express&quot;,\n  uri=&quot;/tutorial&quot;,\n  nc=&quot;00000001&quot;,\n  cnonce=&quot;ランダムな文字列&quot;,\n  response=&quot;Digest値&quot;\n</code></pre>\n<p>上記のリクエストの値は１列の文字列になっているので<code>parseAuthorization</code>で各値を分解しています。algorithm 以外の値はダブルクォートで囲まれているので注意してください。</p>\n<p>分解した値の nc はリクエスト数は16進数なので<code>parseInt(ncの値, 16)</code>で10進数に変換してからセッションで管理しているリクエスト回数が一致しているか確認しておきます。不一致の場合は再度認証要求を行いサーバーで保存しているリクエスト回数は0に初期化します。</p>\n<p>さて、残りはDigest値の算出です。流れは下記の通りです。</p>\n<ul>\n<li>A1 = 'username:realm:password'</li>\n<li>A2 = 'method:uri' (method はHTTPメソッド、ここではGET)</li>\n<li>Digest値 = 'A1のMD5ハッシュ化:nonce:nc:cnonce:A2のMD5ハッシュ化' のMD5ハッシュ化</li>\n</ul>\n<p>算出したDigest値とresponseの値が一致すれば認証OKです。</p>\n<p>実際に<code>/tutorial</code>にアクセスして認証手続きが完了すれば成功です。</p>\n<p>Digest認証の実装は以上となります。</p>\n<h2 id=\"reference-links\">参考サイト</h2>\n<ul>\n<li><a href=\"https://tools.ietf.org/html/rfc7616\">RFC 7616 - HTTP Digest Access Authentication</a></li>\n<li><a href=\"http://x68000.q-e-d.net/~68user/net/http-auth-2.html\">HTTP クライアントを作ってみよう(6) - Digest 認証編 -</a></li>\n<li><a href=\"http://unarist.hatenablog.com/entry/2015/09/25/013142\">Digest認証のパラメータを眺めた - うならぼ</a></li>\n</ul>\n</section>\n"},301:function(t,e,n){"use strict";n.r(e);var r=n(252),o=n(247),d=n(251),c=n(73),l=n(265),h=n.n(l),m={components:{ArticleTimestamp:r.a,SideMenu:o.a,TableContent:d.a},data:function(){return{menuSections:c}},computed:{DigestAuthMd:function(){return h.a}},head:function(){var t=c.authentication.menus;return{title:t.digest_auth.headerTitle,meta:[{hid:"description",name:"description",content:t.digest_auth.headerDescription}]}}},v=n(9),component=Object(v.a)(m,function(){var t=this.$createElement,e=this._self._c||t;return e("div",{attrs:{id:"wrapper"}},[e("article",{attrs:{id:"main"}},[e("section",[e("div",{domProps:{innerHTML:this._s(this.DigestAuthMd)}}),this._v(" "),e("article-timestamp",{attrs:{createdAt:"2019/05/03",updatedAt:"2019/05/03"}})],1)]),this._v(" "),e("side-menu",{attrs:{menuSections:this.menuSections}}),this._v(" "),e("table-content",{attrs:{articleMd:this.DigestAuthMd}})],1)},[],!1,null,null,null);e.default=component.exports}}]);