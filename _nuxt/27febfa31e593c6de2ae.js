(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{305:function(e,o,n){"use strict";n.r(o);var t=n(248),r=n(249),d=n(85),v={components:{ArticlePage:t.a,CodeBox:r.a},data:function(){return{menuSections:d,categoryName:"tutorial",articleName:"mongoose",datePublished:new Date("2019/04/07 22:00:00 +0900"),dateModified:new Date("2019/12/29 20:00:00 +0900"),contents:[{id:"in-link-mongodb-install",title:"MongoDBのインストール"},{id:"in-link-mongoose-install",title:"Mongooseのインストール"},{id:"in-link-mongoose-connection",title:"Mongooseで接続確認をする"},{id:"in-link-mongoose-scheme",title:"Mongooseでモデル作成"},{id:"in-link-mongoose-count",title:"Mongooseでデータ数を取得する"},{id:"in-linki-mongoose-query",title:"MongooseでQueryHelperを利用する"},{id:"in-link-mongoose-insert",title:"Mongooseで登録処理をする"},{id:"in-link-mongoose-delete",title:"Mongooseで削除処理をする"},{id:"in-link-mongoose-update",title:"Mongooseで更新処理をする"},{id:"in-link-mongoose-summary",title:"まとめ"}]}}},_=n(12),component=Object(_.a)(v,(function(){var e=this,o=e.$createElement,n=e._self._c||o;return n("article-page",{attrs:{menuSections:e.menuSections,contents:e.contents,categoryName:e.categoryName,articleName:e.articleName,datePublished:e.datePublished,dateModified:e.dateModified}},[n("h1",[e._v("Express入門（Mongooseの利用）")]),e._v(" "),n("div",{staticClass:"abstract"},[n("p",[n("nuxt-link",{attrs:{to:"/express/mongodb/"}},[e._v("Express入門（MongoDBの利用）")]),e._v("\n        ではMongoDB Node.js Driverを使ったTodoの検索・作成・削除を説明しましたが、\n        今回はNode.js用のMongoDBライブラリ\n        "),n("a",{attrs:{href:"https://mongoosejs.com",target:"_blank"}},[e._v("Mongoose")]),e._v("\n        の使い方を説明していきます。\n      ")],1)]),e._v(" "),n("h2",{attrs:{id:"in-link-mongodb-install"}},[e._v("MongoDBのインストール")]),e._v(" "),n("p",[e._v("\n      MongoDB自体のインストールは\n      "),n("nuxt-link",{attrs:{to:"/express/mongodb/"}},[e._v("Express入門（MongoDBの利用）")]),e._v("\n      の「MongoDBのインストール」と同様なのでそちらの方をご参照ください。\n    ")],1),e._v(" "),n("h2",{attrs:{id:"in-link-mongoose-install"}},[e._v("Mongooseのインストール")]),e._v(" "),n("p",[e._v("\n      TodoアプリにMongooseを組み込みますが、プロジェクトのテンプレートを\n      "),n("a",{attrs:{href:"https://github.com/irisAsh/express-todo-tutorial/tree/initial-template",target:"_blank"}},[e._v("こちら")]),e._v("\n      に用意していますので、こちらの状態から実装を始めていきます。\n    ")]),e._v(" "),n("p",[e._v("\n      また、完成済は\n      "),n("a",{attrs:{href:"https://github.com/irisAsh/express-todo-tutorial/tree/tutorial-ver-mongoose",target:"_blank"}},[e._v("こちら")]),e._v("\n      にあります。\n    ")]),e._v(" "),n("p",[e._v("さて、Mongooseのインストールですが次のコマンド１つで完了です。")]),e._v(" "),n("code-box",[e._v("\n$ yarn add mongoose\n    ")]),e._v(" "),n("h2",{attrs:{id:"in-link-mongoose-connection"}},[e._v("Mongooseで接続確認をする")]),e._v(" "),n("p",[e._v("\n      アプリ起動時にMongoDBへの接続を確認するようにしておきましょう。\n      "),n("code",[e._v("app.js")]),e._v("に次のコードを追加してください。\n    ")]),e._v(" "),n("code-box",{attrs:{fileName:"app.js"}},[e._v("\n// DB connection\nvar mongoose = require('mongoose');\nvar constants = require('./lib/constants');\nmongoose.connect(constants.DB_URL + constants.DB_NAME, { useNewUrlParser: true });\nvar db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error:'));\n    ")]),e._v(" "),n("p",[n("code",[e._v("lib/constants.js")]),e._v("にはMongoDBのURLとDB名を定義しています。\n      本番環境など切り替えできるように別ファイルで定義しておくのが良いでしょう。\n    ")]),e._v(" "),n("code-box",{attrs:{fileName:"lib/constants.js"}},[e._v("\nmodule.exports = Object.freeze({\n  DB_URL: 'mongodb://127.0.0.1:27017/',\n  DB_NAME: 'express-todo-tutorial'\n});\n    ")]),e._v(" "),n("h2",{attrs:{id:"in-link-mongoose-scheme"}},[e._v("Mongooseでモデル作成")]),e._v(" "),n("p",[e._v("\n      MongooseではMongoDB Driverと違って、モデルを定義する必要があります。\n      Schemeクラスを使うことで実装できます。\n    ")]),e._v(" "),n("p",[e._v("以下がTodoモデルの構造定義になります。")]),e._v(" "),n("code-box",{attrs:{fileName:"models/todo.js"}},[e._v("\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\n\nvar TodoSchema = new Schema({\n  title: String,\n  description: String,\n  status: String,\n  estimatedDate: Date\n});\n\nmodule.exports = mongoose.model('Todo', TodoSchema);\n    ")]),e._v(" "),n("p",[e._v("\n      Schemeを生成する際の引数にTodoのカラム定義を指定します。\n      "),n("code",[e._v("カラム名: 型名")]),e._v("の形式で設定します。\n      型名の一覧は下記の通りになります。\n    ")]),e._v(" "),n("ul",[n("li",[e._v("String")]),e._v(" "),n("li",[e._v("Number")]),e._v(" "),n("li",[e._v("Date")]),e._v(" "),n("li",[e._v("Buffer")]),e._v(" "),n("li",[e._v("Boolean")]),e._v(" "),n("li",[e._v("Mixed")]),e._v(" "),n("li",[e._v("ObjectId")]),e._v(" "),n("li",[e._v("Array")]),e._v(" "),n("li",[e._v("Decimal128")]),e._v(" "),n("li",[e._v("Map")])]),e._v(" "),n("h2",{attrs:{id:"in-link-mongoose-count"}},[e._v("Mongooseでデータ数を取得する")]),e._v(" "),n("p",[e._v("Mongooseを使ってTodoの件数を取得してみます。サンプルでは以下のような画面になります。")]),e._v(" "),n("amp-img",{attrs:{src:"/images/express/mongoose/home_page.png",alt:"Todo件数取得",title:"Todo件数取得",width:"640",height:"511",layout:"responsive"}}),e._v(" "),n("p",[e._v("\n      先程定義したModelは"),n("code",[e._v("var Todo = require('../models/todo');")]),e._v("で読み込むことができます。\n      この"),n("code",[e._v("Todo")]),e._v("を使ってDB操作を行えます。\n    ")]),e._v(" "),n("p",[e._v("\n      件数取得には"),n("code",[e._v("countDocuments")]),e._v("関数を使います。\n      条件指定には関数の引数に指定する方法と一度検索クエリを作成する方法があります。\n    ")]),e._v(" "),n("h3",[e._v("引数に指定する方法")]),e._v(" "),n("code-box",[e._v("\nTodo.countDocuments(検索条件, コールバック)\n    ")]),e._v(" "),n("p",[e._v("\n      検索条件は直接MongoDBコンソールで指定する形式と同様"),n("code",[e._v("{ カラム名: { 比較文字: 値 } }")]),e._v("の形式で指定します。\n      また、コールバックには"),n("code",[e._v("function (err, count) {}")]),e._v("の形で検索後の処理を指定できます。\n    ")]),e._v(" "),n("h3",[e._v("検索クエリを作成する方法")]),e._v(" "),n("p",[e._v("\n      Schemeクラスには"),n("code",[e._v("where")]),e._v("関数というクエリを作成する関数があります。\n      クエリは比較関数を使ってチェーンすることができます。\n      チェーンの終わりに"),n("code",[e._v("countDocuments")]),e._v("関数でつなぐことで検索条件をしていたデータ数を取得できます。\n    ")]),e._v(" "),n("p",[e._v("\n      比較関数は基本的にMongoDBの比較文字と同じ名称です。\n      詳細は\n      "),n("a",{attrs:{href:"https://mongoosejs.com/docs/api.html#Query",target:"_blank"}},[e._v("公式の一覧")]),e._v("\n      を参照ください。\n    ")]),e._v(" "),n("code-box",[e._v("\nTodo\n  .where('カラム名').比較関数(検索値)\n  .where('カラム名').比較関数(検索値)\n  ...\n  .countDocuments(コールバック)\n    ")]),e._v(" "),n("h3",[e._v("Promiseを使う")]),e._v(" "),n("p",[e._v("\n      コールバックではなくPromiseを利用して後続処理を実装できます。\n      検索処理でPromiseを受け取るには"),n("code",[e._v("exec")]),e._v("関数を使います。\n    ")]),e._v(" "),n("code-box",[e._v("\nTodo\n  ...\n  .countDocuments()\n  .exec()\n    ")]),e._v(" "),n("p",[e._v("\n      さて実際に"),n("code",[e._v("controllers/homeController.js")]),e._v("にTodoの件数を取得するコードを追加しましょう。\n    ")]),e._v(" "),n("p",[e._v("\n      ここでは先程説明した"),n("code",[e._v("where")]),e._v("を使う方法で検索し、後続処理をPromiseを使って実装しています。\n      "),n("code",[e._v("Promise.all")]),e._v("で３種類の検索が全て終了した後に描画処理を行うようにしています。\n    ")]),e._v(" "),n("code-box",{attrs:{fileName:"controllers/homeController.js"}},[e._v("\nvar Todo = require('../models/todo');\n\nexports.index = function(req, res) {\n  var now = Date();\n  Promise.all([\n    Todo.where('status').ne('completed').countDocuments().exec(),\n    Todo.where('estimatedDate')\n      .gte(new Date(now).setHours(0,0,0,0))\n      .lte(new Date(now).setHours(23,59,59,999))\n      .countDocuments().exec(),\n    Todo.where('status').equals('completed').countDocuments().exec()\n  ])\n  .then(function(result) {\n    res.render('home/index', {\n      remainingTodoCount: result[0],\n      todayTodoCount: result[1],\n      completedTodoCount: result[2]\n    });\n  })\n  .catch(function(err) {\n    console.log(err);\n    next(err);\n  });\n};\n    ")]),e._v(" "),n("h2",{attrs:{id:"in-linki-mongoose-query"}},[e._v("MongooseでQueryHelperを利用する")]),e._v(" "),n("p",[e._v("\n      検索条件を指定してTodoの件数を取得することができました。\n      残りのTodoなど指定した検索条件は他箇所でも使うことがあるので、\n      TodoモデルのQueryHelperを利用して、関数１つで検索条件を指定できるようにしましょう。\n    ")]),e._v(" "),n("p",[e._v("\n      モデルのQueryHelperの定義は"),n("code",[e._v("Schemeクラス.query.関数名")]),e._v("で定義できます。\n      下記のようにクエリ定義を追加してください。\n    ")]),e._v(" "),n("code-box",{attrs:{fileName:"models/todo.js"}},[e._v("\n// Query ============================================\nTodoSchema.query.queryNotCompleted = function() {\n  return this.where('status').ne('completed');\n}\nTodoSchema.query.queryToday = function() {\n  var now = Date();\n  return this\n    .where('estimatedDate')\n    .gte(new Date(now).setHours(0,0,0,0))\n    .lte(new Date(now).setHours(23,59,59,999))\n}\nTodoSchema.query.queryCompleted = function() {\n  return this.where('status').equals('completed');\n}\n\nmodule.exports = mongoose.model('Todo', TodoSchema);\n    ")]),e._v(" "),n("p",[e._v("\n      さて、定義したクエリを使ってみましょう。\n      下記のように"),n("code",[e._v("homeController.js")]),e._v("を編集します。\n    ")]),e._v(" "),n("code-box",{attrs:{fileName:"controllers/homeController.js"}},[e._v("\nexports.index = function(req, res) {\n  Promise.all([\n    Todo.countDocuments().queryNotCompleted().exec(),\n    Todo.countDocuments().queryToday().exec(),\n    Todo.countDocuments().queryCompleted().exec()\n  ])\n  .then(function(result) {\n  ...\n    ")]),e._v(" "),n("p",[e._v("\n      同様にTodoの一覧を取得する画面でも定義したクエリ関数を使ってみましょう。\n      件数取得と同様にクエリを指定します。一覧取得には"),n("code",[e._v("find")]),e._v("関数を使うだけです。\n    ")]),e._v(" "),n("code-box",{attrs:{fileName:"controllers/todoController.js"}},[e._v("\nexports.index = function(req, res, next) {\n  Todo.find().queryNotCompleted().exec()\n  .then(function(todos) {\n    res.render('todo/index', {\n      todos: todos,\n      date2Str: dateUtils.date2Str\n    });\n  })\n  .catch(function(err) {\n    console.log(err);\n    next(err);\n  });\n};\n    ")]),e._v(" "),n("p",[e._v("コード的にもみやすくなります。このようによく使う検索はモデルのQueryHelperにしておくと良いでしょう。")]),e._v(" "),n("h2",{attrs:{id:"in-link-mongoose-insert"}},[e._v("Mongooseで登録処理をする")]),e._v(" "),n("p",[e._v("\n      Mongooseを使ってTodoを登録する処理を作りましょう。\n      プロジェクトのテンプレートに用意してあるフォーム画面に登録処理を組み込みます。\n    ")]),e._v(" "),n("amp-img",{attrs:{src:"/images/express/mongoose/form_page.png",alt:"Form画面",title:"Form画面",width:"640",height:"590",layout:"responsive"}}),e._v(" "),n("p",[e._v("\n      POST処理を受け取ると"),n("code",[e._v("todoController.js")]),e._v("の"),n("code",[e._v("createPost")]),e._v("へ処理が走るようになっています。\n      "),n("code",[e._v("createPost")]),e._v("にMongooseの登録処理を追加しましょう。\n    ")]),e._v(" "),n("p",[e._v("\n      追加処理はモデルの"),n("code",[e._v("create")]),e._v("関数を使います。\n      使い方ですが引数に登録するTodoデータの値を指定するだけです。\n      登録後の処理は検索時と同じように、引数にコールバックを指定するか、\n      コールバックを指定しない場合は"),n("code",[e._v("create")]),e._v("関数がPromiseを返すのでPromiseを使って後続処理を実装できます。\n    ")]),e._v(" "),n("code-box",{attrs:{fileName:"controllers/todoController.js"}},[e._v("\nexports.createPost = function(req, res) {\n  var { title, description, status, estimatedDate } = req.body;\n  Todo.create({\n    title,\n    description,\n    status,\n    estimatedDate\n  })\n  .then(function(result) {\n    res.redirect('/todo');\n  })\n  .catch(function(err) {\n    console.log(err);\n    next(err);\n  });\n};\n    ")]),e._v(" "),n("h2",{attrs:{id:"in-link-mongoose-delete"}},[e._v("Mongooseで削除処理をする")]),e._v(" "),n("p",[e._v("\n      続いてはTodoの削除処理です。\n      一覧画面の削除ボタンは"),n("code",[e._v("/todo/TodoのID")]),e._v("へDeleteリクエストを飛ばすようになっています。\n    ")]),e._v(" "),n("p",[e._v("\n      コントローラーではURLのIDから削除対象のTodoを探し、そして削除する必要があります。\n    ")]),e._v(" "),n("p",[e._v("\n      方法は２通りでモデル関数の"),n("code",[e._v("deleteOne(検索条件)")]),e._v("を使って検索条件に一致するデータを１つ削除する方法か、\n      一度"),n("code",[e._v("findOne(検索条件)")]),e._v("などで対象を１つ取得してからTodoインスタンスの"),n("code",[e._v("remove")]),e._v("を使うかがあります。\n    ")]),e._v(" "),n("h3",[e._v("deleteOneを使った場合")]),e._v(" "),n("code-box",{attrs:{fileName:"controllers/todoController.js"}},[e._v("\nexports.delete = function(req, res) {\n  var { id } = req.params;\n  Todo.deleteOne({ _id: id })\n  .then(function(result) {\n  ...\n    ")]),e._v(" "),n("h3",[e._v("removeを使った場合")]),e._v(" "),n("code-box",{attrs:{fileName:"controllers/todoController.js"}},[e._v("\nexports.delete = function(req, res, next) {\n  var { id } = req.params;\n  Todo.findOne({ _id: id })\n  .then(function(result) {\n    if (!result) {\n      throw new Error('削除対象が見つかりません');\n    }\n    return result.remove();\n  })\n  .then(function(result) {\n    res.redirect('/todo');\n  })\n  ...\n    ")]),e._v(" "),n("h2",{attrs:{id:"in-link-mongoose-update"}},[e._v("Mongooseで更新処理をする")]),e._v(" "),n("p",[e._v("\n      更新処理の前に編集フォーム画面に表示するTodoのデータを取得する必要があります。\n      データ取得は"),n("code",[e._v("findOne")]),e._v("関数を使ってできます。\n    ")]),e._v(" "),n("code-box",{attrs:{fileName:"controllers/todoController.js"}},[e._v("\nexports.updateGet = function(req, res, next) {\n  res.render('todo/update', { todo: {} });\n  var { id } = req.params;\n  Todo.findOne({ _id: id })\n  .then(function(result) {\n    if (!result) {\n      throw new Error('削除対象が見つかりません');\n    }\n    res.render('todo/update', { todo: result });\n  })\n  .catch(function(err) {\n    console.log(err);\n    next(err);\n  });\n};\n    ")]),e._v(" "),n("p",[e._v("\n      さてデータは取得できていますが、フォーム画面では"),n("code",[e._v("datetime-local")]),e._v("のINPUTタグを使っているので\n      日付の形式を"),n("code",[e._v("YYYY-MM-DDThh:mm:ss")]),e._v("に変換する必要があります。\n    ")]),e._v(" "),n("p",[e._v("\n      そこで、モデルのVirtualsを利用してTodoに変換されたestimatedDateを取得できるプロパティを作成しましょう。\n      プロパティ名は"),n("code",[e._v("estimatedDateISOS")]),e._v("として用意し、下記のようにView側で使えるようにします。\n    ")]),e._v(" "),n("code-box",{attrs:{fileName:"views/todo/form.pug"}},[e._v("\ndiv\n  label(for='estimatedDate') 予定時刻：\n  input#estimatedDate(\n    type='datetime-local'\n    name='estimatedDate'\n    value=todo.estimatedDateISOS\n  )\n    ")]),e._v(" "),n("p",[e._v("\n      モデルに"),n("code",[e._v("todo.estimatedDateISOS")]),e._v("を定義しましょう。\n      "),n("code",[e._v("Schemeクラス.virtual('プロパティ名').get(function() {})")]),e._v("の形で定義します。\n    ")]),e._v(" "),n("code-box",{attrs:{fileName:"models/todo.js"}},[e._v("\n// Virtuals =========================================\nTodoSchema.virtual('estimatedDateISOS').get(function () {\n  return dateUtils.date2ISOS(this.estimatedDate);\n});\n\nmodule.exports = mongoose.model('Todo', TodoSchema);\n    ")]),e._v(" "),n("h2",{attrs:{id:"in-link-mongoose-summary"}},[e._v("まとめ")]),e._v(" "),n("p",[e._v("\n      以上がTodoアプリの簡単な実装となります。\n      MongoDB Driverと違ってMongooseではモデル定義ができるのでDB操作は簡潔に書くことができます。\n      説明はMongooseの一部なので、より高度な機能を扱う場合は適宜Mongooseの\n      "),n("a",{attrs:{href:"https://mongoosejs.com/",target:"_blank"}},[e._v("公式サイト")]),e._v("\n      を確認しましょう。\n    ")])],1)}),[],!1,null,null,null);o.default=component.exports}}]);